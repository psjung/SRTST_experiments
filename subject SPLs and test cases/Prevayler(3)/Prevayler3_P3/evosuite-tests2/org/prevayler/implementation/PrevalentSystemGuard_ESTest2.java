/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 07 20:51:06 KST 2017
 */

package org.prevayler.implementation;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import static org.junit.Assert.fail;

import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.NotSerializableException;
import java.io.UnsupportedEncodingException;
import java.time.Clock;
import java.time.Duration;
import java.time.ZoneOffset;
import java.time.chrono.JapaneseDate;
import java.time.chrono.MinguoChronology;
import java.time.chrono.MinguoDate;
import java.time.chrono.ThaiBuddhistDate;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.prevayler.Query;
import org.prevayler.Transaction;
import org.prevayler.TransactionWithQuery;
import org.prevayler.foundation.Chunk;
import org.prevayler.foundation.serialization.JavaSerializer;
import org.prevayler.foundation.serialization.Serializer;
import org.prevayler.foundation.serialization.SkaringaSerializer;
import org.prevayler.foundation.serialization.XStreamSerializer;
import org.prevayler.implementation.clock.BrokenClock;
import org.prevayler.implementation.clock.MachineClock;
import org.prevayler.implementation.clock.PausableClock;
import org.prevayler.implementation.journal.Journal;
import org.prevayler.implementation.journal.TransientJournal;
import org.prevayler.implementation.publishing.CentralPublisher;
import org.prevayler.implementation.snapshot.GenericSnapshotManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class PrevalentSystemGuard_ESTest2 extends PrevalentSystemGuard_ESTest_scaffolding2 {
@BeforeClass
public static void initEvoSuiteFramework() {
String a = "aa";
}
@AfterClass
public static void clearEvoSuiteFramework() {
String a = "aa";
}

  @Test
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard(object0, 5425L, (Serializer) skaringaSerializer0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.receive((TransactionTimestamp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test01()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZoneOffset zoneOffset1 = ZoneOffset.from(zoneOffset0);
      Clock clock0 = Clock.system(zoneOffset1);
      ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS;
      Duration duration0 = chronoUnit0.getDuration();
      Clock clock1 = Clock.tick(clock0, duration0);
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now(clock1);
      thaiBuddhistDate0.getEra();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      JavaSerializer javaSerializer0 = new JavaSerializer(classLoader1);
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) thaiBuddhistDate0, (-5769L), (Serializer) javaSerializer0);
      MachineClock machineClock0 = new MachineClock();
      PausableClock pausableClock0 = new PausableClock((org.prevayler.Clock) machineClock0);
      CentralPublisher centralPublisher0 = new CentralPublisher((org.prevayler.Clock) pausableClock0, (Journal) null);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.subscribeTo(centralPublisher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.publishing.CentralPublisher", e);
      }
  }

  @Test
  public void test02()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) japaneseDate0, 0L, (Serializer) skaringaSerializer0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.takeSnapshot((GenericSnapshotManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) byteArrayInputStream0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JavaSerializer javaSerializer0 = new JavaSerializer(classLoader0);
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) dataInputStream0, (-1684L), (Serializer) javaSerializer0);
      BrokenClock brokenClock0 = new BrokenClock();
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((org.prevayler.Clock) brokenClock0, (Journal) transientJournal0);
      centralPublisher0.subscribe(prevalentSystemGuard0, 2580L);
      centralPublisher0.cancelSubscription(prevalentSystemGuard0);
      try { 
        prevalentSystemGuard0.subscribeTo(centralPublisher0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to recover transaction -1683. The oldest recoverable transaction is 2580.
         //
         assertThrownBy("org.prevayler.implementation.journal.TransientJournal", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      JavaSerializer javaSerializer0 = new JavaSerializer((ClassLoader) null);
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard(object0, 2026L, (Serializer) javaSerializer0);
      try { 
        prevalentSystemGuard0.deepCopy(2026L, javaSerializer0);
        fail("Expecting exception: NotSerializableException");
      
      } catch(NotSerializableException e) {
         //
         // java.lang.Object
         //
         assertThrownBy("java.io.ObjectOutputStream", e);
      }
  }

  @Test
  public void test05()  throws Throwable  {
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) null, (-2647L), (Serializer) null);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.deepCopy((-1171L), (Serializer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Prevayler is no longer accepting transactions due to an Error thrown from an earlier transaction.
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) "", 5000L, (Serializer) javaSerializer0);
      prevalentSystemGuard0.prevalentSystem();
      prevalentSystemGuard0.prevalentSystem();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)50;
      TransactionWithQueryCapsule transactionWithQueryCapsule0 = new TransactionWithQueryCapsule(byteArray0);
      Date date0 = new Date();
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) transactionWithQueryCapsule0, (long) (byte)50, date0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.receive(transactionTimestamp0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempted to apply transaction 50 when prevalent system was only at 5000
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer("");
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) "", 1L, (Serializer) xStreamSerializer0);
      try { 
        prevalentSystemGuard0.deepCopy(1L, xStreamSerializer0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 
         //
         assertThrownBy("sun.nio.cs.StreamEncoder", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) null, (-2132L), (Serializer) javaSerializer0);
      MachineClock machineClock0 = new MachineClock();
      Date date0 = machineClock0.time();
      BrokenClock brokenClock0 = new BrokenClock(date0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.executeQuery((Query) null, brokenClock0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Prevayler is no longer processing queries due to an Error thrown from an earlier transaction.
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) null, (-700L), (Serializer) skaringaSerializer0);
      TransactionCapsule transactionCapsule0 = new TransactionCapsule((Transaction) null, (Serializer) skaringaSerializer0);
      Date date0 = new Date();
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) transactionCapsule0, 0L, date0);
      Chunk chunk0 = transactionTimestamp0.toChunk();
      TransactionTimestamp transactionTimestamp1 = TransactionTimestamp.fromChunk(chunk0);
      TransactionTimestamp transactionTimestamp2 = transactionTimestamp1.cleanCopy();
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.receive(transactionTimestamp2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Prevayler is no longer processing transactions due to an Error thrown from an earlier transaction.
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) null, 2332L, (Serializer) skaringaSerializer0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.prevalentSystem();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Prevayler is no longer allowing access to the prevalent system due to an Error thrown from an earlier transaction.
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      MinguoChronology minguoChronology0 = MinguoChronology.INSTANCE;
      MinguoDate minguoDate0 = minguoChronology0.dateEpochDay(0L);
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) minguoDate0, 1458L, (Serializer) null);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.deepCopy(0L, (Serializer) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already at 1458; can't go back to 0
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      BrokenClock brokenClock0 = new BrokenClock();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JavaSerializer javaSerializer0 = new JavaSerializer(classLoader0);
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) null, (-376L), (Serializer) javaSerializer0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.takeSnapshot((GenericSnapshotManager) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Prevayler is no longer allowing snapshots due to an Error thrown from an earlier transaction.
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard(object0, 1L, (Serializer) javaSerializer0);
      MachineClock machineClock0 = new MachineClock();
      try { 
        prevalentSystemGuard0.executeQuery((Query) null, machineClock0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-17);
      Integer integer0 = new Integer((-17));
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) integer0, (long) (-17), (Serializer) null);
      prevalentSystemGuard0.prevalentSystem();
      MachineClock machineClock0 = new MachineClock();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-1);
      Chunk chunk0 = new Chunk(byteArray0, (Map) null);
      chunk0.getParameters();
      PrevaylerDirectory prevaylerDirectory0 = null;
      String string0 = "";
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer("");
      GenericSnapshotManager genericSnapshotManager0 = null;
      try {
        genericSnapshotManager0 = new GenericSnapshotManager((Map) null, "f}Zd[%", (Object) machineClock0, (PrevaylerDirectory) null, (Serializer) xStreamSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.snapshot.GenericSnapshotManager", e);
      }
  }

  @Test
  public void test16()  throws Throwable  {
      HashMap<ThaiBuddhistDate, MinguoDate> hashMap0 = new HashMap<ThaiBuddhistDate, MinguoDate>();
      PrevaylerDirectory prevaylerDirectory0 = null;
      try {
        prevaylerDirectory0 = new PrevaylerDirectory((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.io.File", e);
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard(object0, 369L, (Serializer) xStreamSerializer0);
      TransactionCapsule transactionCapsule0 = new TransactionCapsule((Transaction) null, (Serializer) xStreamSerializer0);
      TransactionCapsule transactionCapsule1 = (TransactionCapsule)transactionCapsule0.cleanCopy();
      Date date0 = new Date();
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) transactionCapsule1, 1760L, date0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.receive(transactionTimestamp0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempted to apply transaction 1760 when prevalent system was only at 369
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(0);
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) integer0, (long) 0, (Serializer) javaSerializer0);
      PrevalentSystemGuard prevalentSystemGuard1 = prevalentSystemGuard0.deepCopy(0L, javaSerializer0);
      prevalentSystemGuard1.prevalentSystem();
      prevalentSystemGuard1.deepCopy(0L, javaSerializer0);
      TransactionWithQueryCapsule transactionWithQueryCapsule0 = new TransactionWithQueryCapsule((TransactionWithQuery) null, (Serializer) javaSerializer0);
      MachineClock machineClock0 = new MachineClock();
      PausableClock pausableClock0 = new PausableClock((org.prevayler.Clock) machineClock0);
      Date date0 = pausableClock0.time();
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) transactionWithQueryCapsule0, 759L, date0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard1.receive(transactionTimestamp0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempted to apply transaction 759 when prevalent system was only at 0
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }
}
