/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 07 16:59:28 KST 2017
 */

package org.prevayler.foundation.monitor;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class SimpleMonitor_ESTest3 extends SimpleMonitor_ESTest_scaffolding3 {

  @Test
  public void test0()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleMonitor simpleMonitor0 = new SimpleMonitor((PrintStream) null);
      // Undeclared exception!
      try { 
        simpleMonitor0.info(class0, "m@0=xU(LF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.foundation.monitor.SimpleMonitor", e);
      }
  }

  @Test
  public void test1()  throws Throwable  {
      SimpleMonitor simpleMonitor0 = new SimpleMonitor((PrintStream) null);
      Class<Object> class0 = Object.class;
      Exception exception0 = new Exception();
      // Undeclared exception!
      try { 
        simpleMonitor0.error(class0, "", exception0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.foundation.monitor.SimpleMonitor", e);
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PrintStream printStream0 = new PrintStream((OutputStream) byteArrayOutputStream0, false);
      SimpleMonitor simpleMonitor0 = new SimpleMonitor(printStream0);
      Class<String> class0 = String.class;
      Exception exception0 = new Exception("\nFile: ");
      simpleMonitor0.error(class0, (String) null, exception0);
      //  // Unstable assertion: assertEquals("\nnull\r\njava.lang.Exception: \nFile: \r\n\tat sun.reflect.GeneratedConstructorAccessor14.newInstance(Unknown Source)\r\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:422)\r\n\tat org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:241)\r\n\tat org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)\r\n\tat org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:196)\r\n\tat org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:306)\r\n\tat org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:212)\r\n\tat org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(1108, byteArrayOutputStream0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PrintStream printStream0 = new PrintStream((OutputStream) byteArrayOutputStream0, false);
      SimpleMonitor simpleMonitor0 = new SimpleMonitor(printStream0);
      Class<Object> class0 = Object.class;
      simpleMonitor0.info(class0, (String) null);
      assertEquals("\nnull\r\n", byteArrayOutputStream0.toString());
      assertEquals(7, byteArrayOutputStream0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      SimpleMonitor simpleMonitor0 = new SimpleMonitor();
  }
}
