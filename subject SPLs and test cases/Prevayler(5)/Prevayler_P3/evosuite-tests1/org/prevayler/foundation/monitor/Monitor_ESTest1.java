/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 07 23:34:21 KST 2017
 */

package org.prevayler.foundation.monitor;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

import java.io.File;
import java.io.PrintStream;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class Monitor_ESTest1 extends Monitor_ESTest_scaffolding1 {

  @Test
  public void test0()  throws Throwable  {
      NullMonitor nullMonitor0 = new NullMonitor();
      Class<Object> class0 = Object.class;
      Exception exception0 = new Exception();
      nullMonitor0.notify(class0, "", exception0);
      assertNull(exception0.getMessage());
  }

  @Test
  public void test1()  throws Throwable  {
      Log4jMonitor log4jMonitor0 = new Log4jMonitor();
      Class<String> class0 = String.class;
      String string0 = "";
      File file0 = null;
      Exception exception0 = new Exception("Ho-N`pcf8*p");
      log4jMonitor0.notify(class0, string0, file0, exception0);
      assertEquals("Ho-N`pcf8*p", exception0.getMessage());
  }

  @Test
  public void test2()  throws Throwable  {
      NullMonitor nullMonitor0 = new NullMonitor();
      Class<Object> class0 = Object.class;
      nullMonitor0.notify(class0, "ERROR", (File) null);
  }

  @Test
  public void test3()  throws Throwable  {
      NullMonitor nullMonitor0 = new NullMonitor();
      Class<Object> class0 = Object.class;
      nullMonitor0.notify(class0, "");
  }

  @Test
  public void test4()  throws Throwable  {
      SimpleMonitor simpleMonitor0 = new SimpleMonitor();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        simpleMonitor0.notify(class0, "r0DNx'R.", (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.foundation.monitor.SimpleMonitor", e);
      }
  }

  @Test
  public void test5()  throws Throwable  {
      SimpleMonitor simpleMonitor0 = new SimpleMonitor();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        simpleMonitor0.notify(class0, "", (File) null, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.foundation.monitor.SimpleMonitor", e);
      }
  }

  @Test
  public void test6()  throws Throwable  {
      SimpleMonitor simpleMonitor0 = new SimpleMonitor((PrintStream) null);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        simpleMonitor0.notify(class0, "k=iN?V+,D#|?B-C`FbM", (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.foundation.monitor.SimpleMonitor", e);
      }
  }
}
