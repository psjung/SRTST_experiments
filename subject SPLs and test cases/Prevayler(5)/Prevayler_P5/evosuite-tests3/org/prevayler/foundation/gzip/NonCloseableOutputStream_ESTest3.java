/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 07 16:57:45 KST 2017
 */

package org.prevayler.foundation.gzip;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class NonCloseableOutputStream_ESTest3 extends NonCloseableOutputStream_ESTest_scaffolding3 {

  @Test
  public void test01()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      NonCloseableOutputStream nonCloseableOutputStream0 = new NonCloseableOutputStream((OutputStream) byteArrayOutputStream0);
      byteArrayOutputStream0.writeTo(nonCloseableOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test
  public void test02()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      NonCloseableOutputStream nonCloseableOutputStream0 = new NonCloseableOutputStream((OutputStream) byteArrayOutputStream0);
      byte[] byteArray0 = new byte[4];
      nonCloseableOutputStream0.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test03()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      NonCloseableOutputStream nonCloseableOutputStream0 = new NonCloseableOutputStream((OutputStream) objectOutputStream0);
      nonCloseableOutputStream0.write(0);
  }

  @Test
  public void test04()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      NonCloseableOutputStream nonCloseableOutputStream0 = new NonCloseableOutputStream((OutputStream) byteArrayOutputStream0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        nonCloseableOutputStream0.write(byteArray0, (-1), (-661));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test
  public void test05()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) pipedOutputStream0);
      NonCloseableOutputStream nonCloseableOutputStream0 = new NonCloseableOutputStream((OutputStream) bufferedOutputStream0);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        nonCloseableOutputStream0.write(byteArray0, (-1), (int) (byte)16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.lang.System", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      NonCloseableOutputStream nonCloseableOutputStream0 = new NonCloseableOutputStream((OutputStream) pipedOutputStream0);
      byte[] byteArray0 = new byte[0];
      try { 
        nonCloseableOutputStream0.write(byteArray0, 0, 2385);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         assertThrownBy("java.io.PipedOutputStream", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      NonCloseableOutputStream nonCloseableOutputStream0 = new NonCloseableOutputStream((OutputStream) pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      try { 
        nonCloseableOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         assertThrownBy("java.io.PipedOutputStream", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      NonCloseableOutputStream nonCloseableOutputStream0 = new NonCloseableOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        nonCloseableOutputStream0.write(3918);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.foundation.gzip.NonCloseableOutputStream", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      NonCloseableOutputStream nonCloseableOutputStream0 = new NonCloseableOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        nonCloseableOutputStream0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.foundation.gzip.NonCloseableOutputStream", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      NonCloseableOutputStream nonCloseableOutputStream0 = new NonCloseableOutputStream((OutputStream) byteArrayOutputStream0);
      nonCloseableOutputStream0.flush();
  }

  @Test
  public void test11()  throws Throwable  {
      NonCloseableOutputStream nonCloseableOutputStream0 = new NonCloseableOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        nonCloseableOutputStream0.write(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.foundation.gzip.NonCloseableOutputStream", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      NonCloseableOutputStream nonCloseableOutputStream0 = new NonCloseableOutputStream((OutputStream) pipedOutputStream0);
      try { 
        nonCloseableOutputStream0.write((-1207));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         assertThrownBy("java.io.PipedOutputStream", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      NonCloseableOutputStream nonCloseableOutputStream0 = new NonCloseableOutputStream((OutputStream) byteArrayOutputStream0);
      nonCloseableOutputStream0.close();
  }

  @Test
  public void test14()  throws Throwable  {
      NonCloseableOutputStream nonCloseableOutputStream0 = new NonCloseableOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        nonCloseableOutputStream0.write(byteArray0, 1960, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.foundation.gzip.NonCloseableOutputStream", e);
      }
  }
}
