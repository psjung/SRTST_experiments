/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 07 16:09:50 KST 2017
 */

package org.prevayler.demos.scalability;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

import java.math.BigDecimal;
import java.util.Date;
import java.util.Random;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class Record_ESTest3 extends Record_ESTest_scaffolding3 {

  @Test
  public void test00()  throws Throwable  {
      Record record0 = new Record((-78L));
      String string0 = record0.getString1();
      assertEquals((-78L), record0.getId());
      assertNull(string0);
  }

  @Test
  public void test01()  throws Throwable  {
      Date date0 = new Date();
      Record record0 = new Record(0L, (String) null, (String) null, (BigDecimal) null, (BigDecimal) null, date0, date0);
      String string0 = record0.getName();
      assertNull(string0);
  }

  @Test
  public void test02()  throws Throwable  {
      Record record0 = new Record(0L);
      record0.getId();
  }

  @Test
  public void test03()  throws Throwable  {
      Date date0 = new Date();
      Record record0 = new Record(10000L, "gE5vd5NzJT'5pM]", "gE5vd5NzJT'5pM]", (BigDecimal) null, (BigDecimal) null, date0, date0);
      long long0 = record0.getId();
      assertEquals(10000L, long0);
  }

  @Test
  public void test04()  throws Throwable  {
      Record record0 = new Record(1733L);
      BigDecimal bigDecimal0 = record0.getBigDecimal2();
      //  // Unstable assertion: assertEquals(120, bigDecimal0.byteValue());
  }

  @Test
  public void test05()  throws Throwable  {
      Record record0 = new Record(0L);
      record0.getBigDecimal1();
  }

  @Test
  public void test06()  throws Throwable  {
      Random random0 = new Random((-4748L));
      Record record0 = new Record((-4748L), random0);
      assertEquals((-4748L), record0.getId());
  }

  @Test
  public void test07()  throws Throwable  {
      Date date0 = new Date();
      Record record0 = new Record((-1L), "Y&-A,I2QuM@", "Y&-A,I2QuM@", (BigDecimal) null, (BigDecimal) null, date0, date0);
      // Undeclared exception!
      try { 
        record0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.demos.scalability.Record", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Record record0 = null;
      try {
        record0 = new Record((-1511L), ">CL.bXTuJn<WIu", ">CL.bXTuJn<WIu", (BigDecimal) null, (BigDecimal) null, (Date) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.demos.scalability.Record", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      Record record0 = null;
      try {
        record0 = new Record(0L, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.demos.scalability.Record", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Record record0 = new Record(0L);
      record0.hashCode();
  }

  @Test
  public void test11()  throws Throwable  {
      Record record0 = new Record(0L);
      record0.getString1();
  }

  @Test
  public void test12()  throws Throwable  {
      Record record0 = new Record(0L);
      record0.getDate1();
  }

  @Test
  public void test13()  throws Throwable  {
      Random random0 = new Random();
      Record record0 = new Record((-1859L), random0);
      long long0 = record0.getId();
      assertEquals((-1859L), long0);
  }

  @Test
  public void test14()  throws Throwable  {
      Date date0 = new Date();
      Record record0 = new Record(10000L, "snapshot", (String) null, (BigDecimal) null, (BigDecimal) null, date0, date0);
      record0.getBigDecimal2();
      assertEquals(10000L, record0.getId());
  }

  @Test
  public void test15()  throws Throwable  {
      Record record0 = new Record(1733L);
      Date date0 = record0.getDate2();
      //  // Unstable assertion: assertEquals("Thu Jan 01 10:52:45 KST 1970", date0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      Date date0 = new Date();
      Record record0 = new Record(232L, "", ":_`ilKjxO(R~JQ?H", (BigDecimal) null, (BigDecimal) null, date0, date0);
      record0.getBigDecimal1();
      assertEquals(":_`ilKjxO(R~JQ?H", record0.getString1());
      assertEquals("", record0.getName());
      assertEquals(232L, record0.getId());
  }

  @Test
  public void test17()  throws Throwable  {
      Record record0 = new Record(0L);
      record0.getName();
  }
}
