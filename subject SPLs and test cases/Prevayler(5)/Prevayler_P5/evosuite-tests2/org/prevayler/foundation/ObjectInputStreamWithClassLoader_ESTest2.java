/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 07 20:15:41 KST 2017
 */

package org.prevayler.foundation;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.fail;

import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.StreamCorruptedException;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class ObjectInputStreamWithClassLoader_ESTest2 extends ObjectInputStreamWithClassLoader_ESTest_scaffolding2 {

  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) byteArrayInputStream0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ObjectInputStreamWithClassLoader objectInputStreamWithClassLoader0 = null;
      try {
        objectInputStreamWithClassLoader0 = new ObjectInputStreamWithClassLoader((InputStream) pushbackInputStream0, classLoader0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 00000000
         //
         assertThrownBy("java.io.ObjectInputStream", e);
      }
  }

  @Test
  public void test1()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      ObjectInputStreamWithClassLoader objectInputStreamWithClassLoader0 = null;
      try {
        objectInputStreamWithClassLoader0 = new ObjectInputStreamWithClassLoader((InputStream) pushbackInputStream0, (ClassLoader) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         assertThrownBy("java.io.PushbackInputStream", e);
      }
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)0, 1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ObjectInputStreamWithClassLoader objectInputStreamWithClassLoader0 = null;
      try {
        objectInputStreamWithClassLoader0 = new ObjectInputStreamWithClassLoader((InputStream) byteArrayInputStream0, classLoader0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test
  public void test3()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ObjectInputStreamWithClassLoader objectInputStreamWithClassLoader0 = null;
      try {
        objectInputStreamWithClassLoader0 = new ObjectInputStreamWithClassLoader((InputStream) null, classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }
}
