/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 07 20:56:22 KST 2017
 */

package org.prevayler.implementation;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.time.Instant;
import java.util.Date;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.prevayler.Transaction;
import org.prevayler.TransactionWithQuery;
import org.prevayler.foundation.Chunk;
import org.prevayler.foundation.serialization.JavaSerializer;
import org.prevayler.foundation.serialization.Serializer;
import org.prevayler.foundation.serialization.SkaringaSerializer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class TransactionTimestamp_ESTest2 extends TransactionTimestamp_ESTest_scaffolding2 {

  @Test
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Chunk chunk0 = new Chunk(byteArray0);
      TransactionCapsule transactionCapsule0 = (TransactionCapsule)Capsule.fromChunk(chunk0);
      Date date0 = new Date();
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) transactionCapsule0, (long) (byte)110, date0);
      long long0 = transactionTimestamp0.systemVersion();
      assertEquals(110L, long0);
  }

  @Test
  public void test01()  throws Throwable  {
      JavaSerializer javaSerializer0 = new JavaSerializer();
      TransactionCapsule transactionCapsule0 = new TransactionCapsule((Transaction) null, (Serializer) javaSerializer0);
      Instant instant0 = Instant.EPOCH;
      Date date0 = Date.from(instant0);
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) transactionCapsule0, (-1453L), date0);
      long long0 = transactionTimestamp0.systemVersion();
      assertEquals((-1453L), long0);
  }

  @Test
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TransactionWithQueryCapsule transactionWithQueryCapsule0 = new TransactionWithQueryCapsule(byteArray0);
      Date date0 = new Date();
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) transactionWithQueryCapsule0, 1L, date0);
      Chunk chunk0 = transactionTimestamp0.toChunk();
      TransactionTimestamp transactionTimestamp1 = TransactionTimestamp.fromChunk(chunk0);
      assertEquals(1L, transactionTimestamp1.systemVersion());
      assertEquals(1L, transactionTimestamp0.systemVersion());
  }

  @Test
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Chunk chunk0 = new Chunk(byteArray0);
      TransactionCapsule transactionCapsule0 = (TransactionCapsule)Capsule.fromChunk(chunk0);
      Date date0 = new Date();
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) transactionCapsule0, (long) (byte)110, date0);
      TransactionTimestamp transactionTimestamp1 = transactionTimestamp0.cleanCopy();
      assertEquals(110L, transactionTimestamp1.systemVersion());
      assertEquals(110L, transactionTimestamp0.systemVersion());
  }

  @Test
  public void test04()  throws Throwable  {
      JavaSerializer javaSerializer0 = new JavaSerializer();
      TransactionCapsule transactionCapsule0 = new TransactionCapsule((Transaction) null, (Serializer) javaSerializer0);
      Instant instant0 = Instant.EPOCH;
      Date date0 = Date.from(instant0);
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) transactionCapsule0, (-1453L), date0);
      TransactionTimestamp transactionTimestamp1 = transactionTimestamp0.cleanCopy();
      assertEquals((-1453L), transactionTimestamp0.systemVersion());
      assertEquals((-1453L), transactionTimestamp1.systemVersion());
  }

  @Test
  public void test05()  throws Throwable  {
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      TransactionWithQueryCapsule transactionWithQueryCapsule0 = new TransactionWithQueryCapsule((TransactionWithQuery) null, (Serializer) skaringaSerializer0);
      Date date0 = new Date();
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) transactionWithQueryCapsule0, 0L, date0);
      transactionTimestamp0.capsule();
      assertEquals(0L, transactionTimestamp0.systemVersion());
  }

  @Test
  public void test06()  throws Throwable  {
      JavaSerializer javaSerializer0 = new JavaSerializer();
      TransactionCapsule transactionCapsule0 = new TransactionCapsule((Transaction) null, (Serializer) javaSerializer0);
      Instant instant0 = Instant.EPOCH;
      Date date0 = Date.from(instant0);
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) transactionCapsule0, (-1453L), date0);
      Chunk chunk0 = transactionTimestamp0.toChunk();
      TransactionTimestamp transactionTimestamp1 = TransactionTimestamp.fromChunk(chunk0);
      assertEquals((-1453L), transactionTimestamp1.systemVersion());
      assertEquals((-1453L), transactionTimestamp0.systemVersion());
  }

  @Test
  public void test07()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JavaSerializer javaSerializer0 = new JavaSerializer(classLoader0);
      TransactionWithQueryCapsule transactionWithQueryCapsule0 = new TransactionWithQueryCapsule((TransactionWithQuery) null, (Serializer) javaSerializer0);
      Date date0 = new Date();
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) transactionWithQueryCapsule0, 0L, date0);
      TransactionTimestamp transactionTimestamp1 = transactionTimestamp0.cleanCopy();
      assertEquals(0L, transactionTimestamp1.systemVersion());
  }

  @Test
  public void test08()  throws Throwable  {
      Date date0 = new Date();
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) null, 0L, date0);
      // Undeclared exception!
      try { 
        transactionTimestamp0.toChunk();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.TransactionTimestamp", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Chunk chunk0 = new Chunk(byteArray0);
      // Undeclared exception!
      try { 
        TransactionTimestamp.fromChunk(chunk0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         assertThrownBy("java.lang.Long", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransactionTimestamp.fromChunk((Chunk) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.Capsule", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TransactionTimestamp transactionTimestamp0 = null;
      try {
        transactionTimestamp0 = new TransactionTimestamp((Capsule) null, (-3332L), (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.TransactionTimestamp", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TransactionWithQueryCapsule transactionWithQueryCapsule0 = new TransactionWithQueryCapsule(byteArray0);
      Instant instant0 = Instant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) transactionWithQueryCapsule0, 0L, date0);
      long long0 = transactionTimestamp0.systemVersion();
      assertEquals(0L, long0);
  }

  @Test
  public void test13()  throws Throwable  {
      Date date0 = new Date();
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) null, (long) (byte) (-27), date0);
      Date date1 = transactionTimestamp0.executionTime();
      //  // Unstable assertion: assertEquals("Fri Apr 07 20:56:16 KST 2017", date1.toString());
      //  // Unstable assertion: assertEquals((-27L), transactionTimestamp0.systemVersion());
  }

  @Test
  public void test14()  throws Throwable  {
      Date date0 = new Date();
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) null, (long) (byte) (-27), date0);
      transactionTimestamp0.capsule();
      assertEquals((-27L), transactionTimestamp0.systemVersion());
  }

  @Test
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TransactionWithQueryCapsule transactionWithQueryCapsule0 = new TransactionWithQueryCapsule(byteArray0);
      Instant instant0 = Instant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) transactionWithQueryCapsule0, 0L, date0);
      Chunk chunk0 = transactionTimestamp0.toChunk();
      TransactionTimestamp transactionTimestamp1 = TransactionTimestamp.fromChunk(chunk0);
      assertEquals(0L, transactionTimestamp1.systemVersion());
  }

  @Test
  public void test16()  throws Throwable  {
      Date date0 = new Date();
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) null, (long) (byte) (-27), date0);
      // Undeclared exception!
      try { 
        transactionTimestamp0.cleanCopy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.TransactionTimestamp", e);
      }
  }
}
