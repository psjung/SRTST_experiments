/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 07 20:53:14 KST 2017
 */

package org.prevayler.implementation;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

import java.time.Instant;
import java.util.Date;
import java.util.Map;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.prevayler.Clock;
import org.prevayler.Query;
import org.prevayler.SureTransactionWithQuery;
import org.prevayler.Transaction;
import org.prevayler.TransactionWithQuery;
import org.prevayler.foundation.Chunk;
import org.prevayler.foundation.serialization.JavaSerializer;
import org.prevayler.foundation.serialization.Serializer;
import org.prevayler.foundation.serialization.SkaringaSerializer;
import org.prevayler.foundation.serialization.XStreamSerializer;
import org.prevayler.implementation.clock.BrokenClock;
import org.prevayler.implementation.clock.MachineClock;
import org.prevayler.implementation.clock.PausableClock;
import org.prevayler.implementation.journal.Journal;
import org.prevayler.implementation.journal.TransientJournal;
import org.prevayler.implementation.publishing.CentralPublisher;
import org.prevayler.implementation.publishing.TransactionPublisher;
import org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor;
import org.prevayler.implementation.publishing.censorship.TransactionCensor;
import org.prevayler.implementation.snapshot.GenericSnapshotManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class PrevaylerImpl_ESTest2 extends PrevaylerImpl_ESTest_scaffolding2 {

  @Test
  public void test00()  throws Throwable  {
      Date date0 = new Date(1L);
      BrokenClock brokenClock0 = new BrokenClock(date0);
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) brokenClock0, (Journal) transientJournal0);
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer();
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) xStreamSerializer0);
      // Undeclared exception!
      try { 
        prevaylerImpl0.execute((Transaction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.publishing.CentralPublisher", e);
      }
  }

  @Test
  public void test01()  throws Throwable  {
      BrokenClock brokenClock0 = new BrokenClock();
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) brokenClock0, (Journal) transientJournal0);
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer();
      byte[] byteArray0 = new byte[1];
      TransactionCapsule transactionCapsule0 = new TransactionCapsule(byteArray0);
      Chunk chunk0 = transactionCapsule0.toChunk();
      Map map0 = chunk0.getParameters();
      String string0 = "";
      PrevaylerDirectory prevaylerDirectory0 = new PrevaylerDirectory(string0);
      GenericSnapshotManager genericSnapshotManager0 = null;
      try {
        genericSnapshotManager0 = new GenericSnapshotManager((Map) map0, string0, (Object) brokenClock0, prevaylerDirectory0, (Serializer) xStreamSerializer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Snapshot filename suffix must match /[a-zA-Z0-9]*[Ss]napshot/, but 'withQuery' does not
         //
         assertThrownBy("org.prevayler.implementation.PrevaylerDirectory", e);
      }
  }

  @Test
  public void test02()  throws Throwable  {
      BrokenClock brokenClock0 = new BrokenClock();
      LiberalTransactionCensor liberalTransactionCensor0 = new LiberalTransactionCensor();
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) brokenClock0, (TransactionCensor) liberalTransactionCensor0, (Journal) transientJournal0);
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) skaringaSerializer0);
      prevaylerImpl0.close();
  }

  @Test
  public void test03()  throws Throwable  {
      MachineClock machineClock0 = new MachineClock();
      PausableClock pausableClock0 = new PausableClock((Clock) machineClock0);
      LiberalTransactionCensor liberalTransactionCensor0 = new LiberalTransactionCensor();
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) pausableClock0, (TransactionCensor) liberalTransactionCensor0, (Journal) transientJournal0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JavaSerializer javaSerializer0 = new JavaSerializer(classLoader0);
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) javaSerializer0);
      try { 
        prevaylerImpl0.execute((TransactionWithQuery) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Journal.update() has to be called at least once before Journal.journal().
         //
         assertThrownBy("org.prevayler.implementation.journal.TransientJournal", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      Date date0 = new Date(5000L);
      BrokenClock brokenClock0 = new BrokenClock(date0);
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) brokenClock0, (Journal) null);
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer("");
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) xStreamSerializer0);
      // Undeclared exception!
      try { 
        prevaylerImpl0.execute((TransactionWithQuery) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unable to serialize transaction
         //
         assertThrownBy("org.prevayler.implementation.Capsule", e);
      }
  }

  @Test
  public void test05()  throws Throwable  {
      MachineClock machineClock0 = new MachineClock();
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) machineClock0, (TransactionCensor) null, (Journal) transientJournal0);
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) null);
      // Undeclared exception!
      try { 
        prevaylerImpl0.execute((Transaction) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unable to serialize transaction
         //
         assertThrownBy("org.prevayler.implementation.Capsule", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      LiberalTransactionCensor liberalTransactionCensor0 = new LiberalTransactionCensor();
      TransientJournal transientJournal0 = new TransientJournal();
      MachineClock machineClock0 = new MachineClock();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) machineClock0, (TransactionCensor) liberalTransactionCensor0, (Journal) transientJournal0);
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) skaringaSerializer0);
      // Undeclared exception!
      try { 
        prevaylerImpl0.execute((SureTransactionWithQuery) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Journal.update() has to be called at least once before Journal.journal().
         //
         assertThrownBy("org.prevayler.implementation.journal.TransientJournal", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      Date date0 = new Date(0L);
      BrokenClock brokenClock0 = new BrokenClock(date0);
      PausableClock pausableClock0 = new PausableClock((Clock) brokenClock0);
      LiberalTransactionCensor liberalTransactionCensor0 = new LiberalTransactionCensor();
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) pausableClock0, (TransactionCensor) liberalTransactionCensor0, (Journal) transientJournal0);
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer(".readResolve()");
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) xStreamSerializer0);
      // Undeclared exception!
      try { 
        prevaylerImpl0.execute((SureTransactionWithQuery) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unable to serialize transaction
         //
         assertThrownBy("org.prevayler.implementation.Capsule", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevaylerImpl prevaylerImpl0 = null;
      try {
        prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) null, (Serializer) skaringaSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.PrevaylerImpl", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) null, (Journal) null);
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) skaringaSerializer0);
      try { 
        prevaylerImpl0.execute((TransactionWithQuery) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.clock.PausableClock", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli(1698L);
      Date date0 = Date.from(instant0);
      BrokenClock brokenClock0 = new BrokenClock(date0);
      LiberalTransactionCensor liberalTransactionCensor0 = new LiberalTransactionCensor();
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) brokenClock0, (TransactionCensor) liberalTransactionCensor0, (Journal) transientJournal0);
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) javaSerializer0);
      // Undeclared exception!
      try { 
        prevaylerImpl0.execute((Transaction) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Journal.update() has to be called at least once before Journal.journal().
         //
         assertThrownBy("org.prevayler.implementation.journal.TransientJournal", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli(1713L);
      Date date0 = Date.from(instant0);
      BrokenClock brokenClock0 = new BrokenClock(date0);
      LiberalTransactionCensor liberalTransactionCensor0 = new LiberalTransactionCensor();
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) brokenClock0, (TransactionCensor) liberalTransactionCensor0, (Journal) transientJournal0);
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) javaSerializer0);
      // Undeclared exception!
      try { 
        prevaylerImpl0.prevalentSystem();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.PrevaylerImpl", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Date date0 = new Date();
      BrokenClock brokenClock0 = new BrokenClock(date0);
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) brokenClock0, (Journal) transientJournal0);
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevaylerImpl prevaylerImpl0 = null;
      try {
        prevaylerImpl0 = new PrevaylerImpl((GenericSnapshotManager) null, (TransactionPublisher) centralPublisher0, (Serializer) javaSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.PrevaylerImpl", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      BrokenClock brokenClock0 = new BrokenClock();
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) brokenClock0, (Journal) transientJournal0);
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer();
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) xStreamSerializer0);
      try { 
        prevaylerImpl0.execute((Query) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.PrevaylerImpl", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      BrokenClock brokenClock0 = new BrokenClock();
      LiberalTransactionCensor liberalTransactionCensor0 = new LiberalTransactionCensor();
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) brokenClock0, (TransactionCensor) liberalTransactionCensor0, (Journal) transientJournal0);
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) skaringaSerializer0);
      // Undeclared exception!
      try { 
        prevaylerImpl0.takeSnapshot();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.PrevaylerImpl", e);
      }
  }

  @Test
  public void test15()  throws Throwable  {
      LiberalTransactionCensor liberalTransactionCensor0 = new LiberalTransactionCensor();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) null, (TransactionCensor) liberalTransactionCensor0, (Journal) null);
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) javaSerializer0);
      // Undeclared exception!
      try { 
        prevaylerImpl0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.publishing.CentralPublisher", e);
      }
  }

  @Test
  public void test16()  throws Throwable  {
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      BrokenClock brokenClock0 = new BrokenClock();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) brokenClock0, (Journal) null);
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) skaringaSerializer0);
      PausableClock pausableClock0 = (PausableClock)prevaylerImpl0.clock();
      assertNotNull(pausableClock0);
  }

  @Test
  public void test17()  throws Throwable  {
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) null, (Journal) null);
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) skaringaSerializer0);
      // Undeclared exception!
      try { 
        prevaylerImpl0.execute((SureTransactionWithQuery) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.clock.PausableClock", e);
      }
  }
}
