/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 07 12:16:06 KST 2017
 */

package org.prevayler.implementation;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.fail;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.NotSerializableException;
import java.io.PipedInputStream;
import java.io.UnsupportedEncodingException;
import java.time.Clock;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.HijrahDate;
import java.time.chrono.JapaneseDate;
import java.time.chrono.MinguoDate;
import java.time.chrono.ThaiBuddhistDate;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.prevayler.Query;
import org.prevayler.Transaction;
import org.prevayler.foundation.Chunk;
import org.prevayler.foundation.serialization.JavaSerializer;
import org.prevayler.foundation.serialization.Serializer;
import org.prevayler.foundation.serialization.SkaringaSerializer;
import org.prevayler.foundation.serialization.XStreamSerializer;
import org.prevayler.implementation.clock.BrokenClock;
import org.prevayler.implementation.clock.MachineClock;
import org.prevayler.implementation.clock.PausableClock;
import org.prevayler.implementation.journal.Journal;
import org.prevayler.implementation.journal.TransientJournal;
import org.prevayler.implementation.publishing.CentralPublisher;
import org.prevayler.implementation.snapshot.GenericSnapshotManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class PrevalentSystemGuard_ESTest4 extends PrevalentSystemGuard_ESTest_scaffolding4 {

  @Test
  public void test00()  throws Throwable  {
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) "/jSAsT&{n", 215L, (Serializer) javaSerializer0);
      prevalentSystemGuard0.deepCopy(215L, javaSerializer0);
  }

  @Test
  public void test01()  throws Throwable  {
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) "", (-2058L), (Serializer) javaSerializer0);
      Instant instant0 = Instant.now();
      Date date0 = Date.from(instant0);
      byte[] byteArray0 = new byte[4];
      TransactionCapsule transactionCapsule0 = new TransactionCapsule(byteArray0);
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) transactionCapsule0, 0L, date0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.receive(transactionTimestamp0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempted to apply transaction 0 when prevalent system was only at -2058
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test02()  throws Throwable  {
      HashMap<JapaneseDate, MinguoDate> hashMap0 = new HashMap<JapaneseDate, MinguoDate>();
      PrevaylerDirectory prevaylerDirectory0 = new PrevaylerDirectory((File) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JavaSerializer javaSerializer0 = new JavaSerializer(classLoader0);
      GenericSnapshotManager genericSnapshotManager0 = null;
      try {
        genericSnapshotManager0 = new GenericSnapshotManager((Map) hashMap0, "Already at ", (Object) "Already at ", prevaylerDirectory0, (Serializer) javaSerializer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Primary suffix 'Already at ' does not appear in strategies map
         //
         assertThrownBy("org.prevayler.implementation.snapshot.GenericSnapshotManager", e);
      }
  }

  @Test
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JavaSerializer javaSerializer0 = new JavaSerializer(classLoader0);
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard(object0, 180L, (Serializer) javaSerializer0);
      Transaction transaction0 = null;
      TransactionCapsule transactionCapsule0 = new TransactionCapsule(transaction0, (Serializer) javaSerializer0);
      Chunk chunk0 = transactionCapsule0.toChunk();
      // Undeclared exception!
      try { 
        TransactionTimestamp.fromChunk(chunk0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         assertThrownBy("java.lang.Long", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer("");
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) byteArrayInputStream0, 626L, (Serializer) xStreamSerializer0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.receive((TransactionTimestamp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard(object0, (-938L), (Serializer) null);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.deepCopy((-938L), (Serializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.foundation.DeepCopier", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JavaSerializer javaSerializer0 = new JavaSerializer(classLoader0);
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard(object0, 0L, (Serializer) javaSerializer0);
      try { 
        prevalentSystemGuard0.deepCopy(0L, javaSerializer0);
        fail("Expecting exception: NotSerializableException");
      
      } catch(NotSerializableException e) {
         //
         // java.lang.Object
         //
         assertThrownBy("java.io.ObjectOutputStream", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JavaSerializer javaSerializer0 = new JavaSerializer(classLoader0);
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard(object0, 180L, (Serializer) javaSerializer0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.deepCopy(1L, javaSerializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already at 180; can't go back to 1
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) null, 0L, (Serializer) xStreamSerializer0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.deepCopy(5000L, xStreamSerializer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Prevayler is no longer accepting transactions due to an Error thrown from an earlier transaction.
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      Clock clock0 = Clock.system(zoneOffset0);
      ThaiBuddhistDate thaiBuddhistDate0 = ThaiBuddhistDate.now(clock0);
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer("java.lang.StringBuffer");
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) thaiBuddhistDate0, (long) 0, (Serializer) xStreamSerializer0);
      try { 
        prevalentSystemGuard0.deepCopy(0L, xStreamSerializer0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // java.lang.StringBuffer
         //
         assertThrownBy("sun.nio.cs.StreamEncoder", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      JavaSerializer javaSerializer0 = new JavaSerializer((ClassLoader) null);
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) null, 616L, (Serializer) javaSerializer0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.takeSnapshot((GenericSnapshotManager) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Prevayler is no longer allowing snapshots due to an Error thrown from an earlier transaction.
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      Clock clock0 = Clock.system(zoneId0);
      HijrahDate hijrahDate0 = HijrahDate.now(clock0);
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) hijrahDate0, 0L, (Serializer) null);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.takeSnapshot((GenericSnapshotManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) null, 0L, (Serializer) javaSerializer0);
      BrokenClock brokenClock0 = new BrokenClock();
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.executeQuery((Query) null, brokenClock0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Prevayler is no longer processing queries due to an Error thrown from an earlier transaction.
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard(object0, 577L, (Serializer) skaringaSerializer0);
      MachineClock machineClock0 = new MachineClock();
      try { 
        prevalentSystemGuard0.executeQuery((Query) null, machineClock0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) "Prevayler is no longer allowing access to the prevalent system due to an Error thrown from an earlier transaction.", 0L, (Serializer) javaSerializer0);
      TransactionCapsule transactionCapsule0 = new TransactionCapsule((Transaction) null, (Serializer) javaSerializer0);
      MachineClock machineClock0 = new MachineClock();
      PausableClock pausableClock0 = new PausableClock((org.prevayler.Clock) machineClock0);
      Date date0 = pausableClock0.time();
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) transactionCapsule0, 0L, date0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.receive(transactionTimestamp0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempted to apply transaction 0 when prevalent system was only at 0
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test15()  throws Throwable  {
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) null, (-1L), (Serializer) null);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.prevalentSystem();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Prevayler is no longer allowing access to the prevalent system due to an Error thrown from an earlier transaction.
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(3240);
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) pipedInputStream0, (long) 3240, (Serializer) javaSerializer0);
      PipedInputStream pipedInputStream1 = (PipedInputStream)prevalentSystemGuard0.prevalentSystem();
      assertSame(pipedInputStream0, pipedInputStream1);
  }

  @Test
  public void test17()  throws Throwable  {
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) "", (-2058L), (Serializer) javaSerializer0);
      Instant instant0 = Instant.now();
      Date date0 = Date.from(instant0);
      BrokenClock brokenClock0 = new BrokenClock(date0);
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((org.prevayler.Clock) brokenClock0, (Journal) transientJournal0);
      prevalentSystemGuard0.subscribeTo(centralPublisher0);
      //  // Unstable assertion: assertEquals("Fri Apr 07 12:15:14 KST 2017", date0.toString());
  }
}
