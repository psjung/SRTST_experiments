/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 07 12:25:02 KST 2017
 */

package org.prevayler.implementation.journal;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.io.IOException;
import java.time.Instant;
import java.util.Date;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.prevayler.foundation.Chunk;
import org.prevayler.foundation.Turn;
import org.prevayler.implementation.Capsule;
import org.prevayler.implementation.TransactionGuide;
import org.prevayler.implementation.TransactionTimestamp;
import org.prevayler.implementation.publishing.POBox;
import org.prevayler.implementation.publishing.TransactionSubscriber;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class TransientJournal_ESTest4 extends TransientJournal_ESTest_scaffolding4 {

  @Test
  public void test00()  throws Throwable  {
      TransientJournal transientJournal0 = new TransientJournal();
      transientJournal0.update((TransactionSubscriber) null, 0L);
      long long0 = transientJournal0.nextTransaction();
      assertEquals(0L, long0);
  }

  @Test
  public void test01()  throws Throwable  {
      TransientJournal transientJournal0 = new TransientJournal();
      POBox pOBox0 = new POBox((TransactionSubscriber) null);
      transientJournal0.update(pOBox0, 156L);
      long long0 = transientJournal0.nextTransaction();
      assertEquals(156L, long0);
  }

  @Test
  public void test02()  throws Throwable  {
      TransientJournal transientJournal0 = new TransientJournal();
      byte[] byteArray0 = new byte[0];
      Chunk chunk0 = new Chunk(byteArray0);
      // Undeclared exception!
      try { 
        TransactionTimestamp.fromChunk(chunk0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         assertThrownBy("java.lang.Long", e);
      }
  }

  @Test
  public void test03()  throws Throwable  {
      TransientJournal transientJournal0 = new TransientJournal();
      // Undeclared exception!
      try { 
        transientJournal0.nextTransaction();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // update() must be called at least once
         //
         assertThrownBy("org.prevayler.implementation.journal.TransientJournal", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      TransientJournal transientJournal0 = new TransientJournal();
      transientJournal0.update((TransactionSubscriber) null, (-2356L));
      long long0 = transientJournal0.nextTransaction();
      assertEquals((-2356L), long0);
  }

  @Test
  public void test05()  throws Throwable  {
      TransientJournal transientJournal0 = new TransientJournal();
      transientJournal0.update((TransactionSubscriber) null, (-3127L));
      POBox pOBox0 = new POBox((TransactionSubscriber) null);
      try { 
        transientJournal0.update(pOBox0, 0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // The transaction journal has not yet reached transaction 0. The last logged transaction was -3128.
         //
         assertThrownBy("org.prevayler.implementation.journal.TransientJournal", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      TransientJournal transientJournal0 = new TransientJournal();
      transientJournal0.update((TransactionSubscriber) null, 914L);
      transientJournal0.update((TransactionSubscriber) null, 914L);
  }

  @Test
  public void test07()  throws Throwable  {
      TransientJournal transientJournal0 = new TransientJournal();
      POBox pOBox0 = new POBox((TransactionSubscriber) null);
      transientJournal0.update((TransactionSubscriber) null, 3454L);
      try { 
        transientJournal0.update(pOBox0, 1521L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to recover transaction 1521. The oldest recoverable transaction is 3454.
         //
         assertThrownBy("org.prevayler.implementation.journal.TransientJournal", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      TransientJournal transientJournal0 = new TransientJournal();
      Date date0 = new Date(914L);
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) null, 914L, date0);
      Turn turn0 = Turn.first();
      TransactionGuide transactionGuide0 = new TransactionGuide(transactionTimestamp0, turn0);
      // Undeclared exception!
      try { 
        transientJournal0.append(transactionGuide0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Journal.update() has to be called at least once before Journal.journal().
         //
         assertThrownBy("org.prevayler.implementation.journal.TransientJournal", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      TransientJournal transientJournal0 = new TransientJournal();
      transientJournal0.update((TransactionSubscriber) null, 0L);
      Instant instant0 = Instant.ofEpochSecond(0L, 0L);
      Date date0 = Date.from(instant0);
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) null, 0L, date0);
      Turn turn0 = Turn.first();
      TransactionGuide transactionGuide0 = new TransactionGuide(transactionTimestamp0, turn0);
      // Undeclared exception!
      try { 
        transientJournal0.append(transactionGuide0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.TransactionTimestamp", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TransientJournal transientJournal0 = new TransientJournal();
      transientJournal0.close();
  }
}
