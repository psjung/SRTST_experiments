/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 07 23:46:56 KST 2017
 */

package org.prevayler.implementation;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.fail;

import java.io.File;
import java.io.NotSerializableException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.UnsupportedEncodingException;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.JapaneseDate;
import java.time.chrono.ThaiBuddhistDate;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.prevayler.Clock;
import org.prevayler.Query;
import org.prevayler.Transaction;
import org.prevayler.foundation.Chunk;
import org.prevayler.foundation.serialization.JavaSerializer;
import org.prevayler.foundation.serialization.Serializer;
import org.prevayler.foundation.serialization.SkaringaSerializer;
import org.prevayler.foundation.serialization.XStreamSerializer;
import org.prevayler.implementation.clock.BrokenClock;
import org.prevayler.implementation.clock.MachineClock;
import org.prevayler.implementation.clock.PausableClock;
import org.prevayler.implementation.journal.Journal;
import org.prevayler.implementation.journal.PersistentJournal;
import org.prevayler.implementation.journal.TransientJournal;
import org.prevayler.implementation.publishing.CentralPublisher;
import org.prevayler.implementation.publishing.TransactionPublisher;
import org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor;
import org.prevayler.implementation.publishing.censorship.TransactionCensor;
import org.prevayler.implementation.snapshot.GenericSnapshotManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class PrevalentSystemGuard_ESTest1 extends PrevalentSystemGuard_ESTest_scaffolding1 {

  @Test
  public void test00()  throws Throwable  {
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer("");
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) "XwYuEUMc`vP eM", 458L, (Serializer) xStreamSerializer0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.receive((TransactionTimestamp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test01()  throws Throwable  {
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) null, (-1L), (Serializer) null);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.deepCopy(100L, (Serializer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Prevayler is no longer accepting transactions due to an Error thrown from an earlier transaction.
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test03()  throws Throwable  {
      LocalDate localDate0 = LocalDate.MIN;
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) localDate0, (long) (-100), (Serializer) null);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.deepCopy((-100), (Serializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.foundation.DeepCopier", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2252);
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) pipedInputStream0, 515L, (Serializer) xStreamSerializer0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.subscribeTo((TransactionPublisher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      JapaneseDate japaneseDate0 = JapaneseDate.now((ZoneId) zoneOffset0);
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer("~_[#9)5GXIdRp`3");
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) japaneseDate0, 1658L, (Serializer) xStreamSerializer0);
      try { 
        prevalentSystemGuard0.deepCopy(1658L, xStreamSerializer0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // ~_[#9)5GXIdRp`3
         //
         assertThrownBy("sun.nio.cs.StreamEncoder", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) null, (-1L), (Serializer) javaSerializer0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.deepCopy((-1L), javaSerializer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Prevayler is no longer accepting transactions due to an Error thrown from an earlier transaction.
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      JavaSerializer javaSerializer0 = new JavaSerializer(classLoader1);
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) null, 0L, (Serializer) javaSerializer0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.prevalentSystem();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Prevayler is no longer allowing access to the prevalent system due to an Error thrown from an earlier transaction.
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard(object0, 0L, (Serializer) xStreamSerializer0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      JavaSerializer javaSerializer0 = new JavaSerializer(classLoader1);
      try { 
        prevalentSystemGuard0.deepCopy(0L, javaSerializer0);
        fail("Expecting exception: NotSerializableException");
      
      } catch(NotSerializableException e) {
         //
         // java.lang.Object
         //
         assertThrownBy("java.io.ObjectOutputStream", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) " supported", 1L, (Serializer) javaSerializer0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)1;
      Chunk chunk0 = new Chunk(byteArray0);
      TransactionCapsule transactionCapsule0 = (TransactionCapsule)Capsule.fromChunk(chunk0);
      Date date0 = new Date();
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) transactionCapsule0, (long) (byte)64, date0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.receive(transactionTimestamp0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempted to apply transaction 64 when prevalent system was only at 1
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer("");
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) "XwYuEUMc`vP eM", 458L, (Serializer) xStreamSerializer0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.deepCopy(1L, xStreamSerializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already at 458; can't go back to 1
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) "7X_k0Oh8uQC//2f>l", 0L, (Serializer) javaSerializer0);
      PrevalentSystemGuard prevalentSystemGuard1 = prevalentSystemGuard0.deepCopy(0L, javaSerializer0);
      prevalentSystemGuard1.prevalentSystem();
      prevalentSystemGuard1.prevalentSystem();
      prevalentSystemGuard0.prevalentSystem();
      Object object0 = new Object();
      PrevalentSystemGuard prevalentSystemGuard2 = new PrevalentSystemGuard(object0, (-469L), (Serializer) javaSerializer0);
      PrevalentSystemGuard prevalentSystemGuard3 = new PrevalentSystemGuard((Object) javaSerializer0, 1302L, (Serializer) javaSerializer0);
      TransactionCapsule transactionCapsule0 = new TransactionCapsule((Transaction) null, (Serializer) javaSerializer0);
      Chunk chunk0 = transactionCapsule0.toChunk();
      Map map0 = chunk0.getParameters();
      Object object1 = new Object();
      PrevaylerDirectory prevaylerDirectory0 = new PrevaylerDirectory((File) null);
      GenericSnapshotManager genericSnapshotManager0 = null;
      try {
        genericSnapshotManager0 = new GenericSnapshotManager((Map) map0, "com.thoughtworks.xstream.converters.extended.CurrencyConverter", object1, prevaylerDirectory0, (Serializer) javaSerializer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Snapshot filename suffix must match /[a-zA-Z0-9]*[Ss]napshot/, but 'withQuery' does not
         //
         assertThrownBy("org.prevayler.implementation.PrevaylerDirectory", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard(object0, 533L, (Serializer) skaringaSerializer0);
      MachineClock machineClock0 = new MachineClock();
      PausableClock pausableClock0 = new PausableClock((Clock) machineClock0);
      Date date0 = pausableClock0.realTime();
      BrokenClock brokenClock0 = new BrokenClock();
      PausableClock pausableClock1 = new PausableClock((Clock) brokenClock0);
      Date date1 = pausableClock1.realTime();
      date0.after(date1);
      BrokenClock brokenClock1 = new BrokenClock(date0);
      try { 
        prevalentSystemGuard0.executeQuery((Query) null, brokenClock1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test15()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JavaSerializer javaSerializer0 = new JavaSerializer();
      GenericSnapshotManager genericSnapshotManager0 = null;
      try {
        genericSnapshotManager0 = new GenericSnapshotManager((Map) hashMap0, "", (Object) "", (PrevaylerDirectory) null, (Serializer) javaSerializer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Primary suffix '' does not appear in strategies map
         //
         assertThrownBy("org.prevayler.implementation.snapshot.GenericSnapshotManager", e);
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 5787;
      // Undeclared exception!
      try { 
        ThaiBuddhistDate.of(1002, 1002, 5787);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 1002
         //
         assertThrownBy("java.time.temporal.ValueRange", e);
      }
  }

  @Test
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-22);
      Chunk chunk0 = new Chunk(byteArray0);
      Map map0 = chunk0.getParameters();
      Chunk chunk1 = new Chunk(byteArray0, (Map) map0);
      chunk1.getParameters();
      PrevaylerDirectory prevaylerDirectory0 = new PrevaylerDirectory("$SQ:NYX/e");
      JavaSerializer javaSerializer0 = new JavaSerializer();
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer("&DbqC4^bMU]");
      BrokenClock brokenClock0 = new BrokenClock();
      PausableClock pausableClock0 = new PausableClock((Clock) brokenClock0);
      LiberalTransactionCensor liberalTransactionCensor0 = new LiberalTransactionCensor();
      PersistentJournal persistentJournal0 = null;
      try {
        persistentJournal0 = new PersistentJournal(prevaylerDirectory0, 1L, 1L, "&DbqC4^bMU]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Journal filename suffix must match /[a-zA-Z0-9]*[Jj]ournal/, but '&DbqC4^bMU]' does not
         //
         assertThrownBy("org.prevayler.implementation.PrevaylerDirectory", e);
      }
  }
}
