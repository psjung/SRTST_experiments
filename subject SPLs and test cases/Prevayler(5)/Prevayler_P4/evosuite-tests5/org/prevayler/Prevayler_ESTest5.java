/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 06 19:49:37 KST 2017
 */

package org.prevayler;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

import java.time.Instant;
import java.util.Date;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.prevayler.foundation.serialization.JavaSerializer;
import org.prevayler.foundation.serialization.Serializer;
import org.prevayler.foundation.serialization.SkaringaSerializer;
import org.prevayler.foundation.serialization.XStreamSerializer;
import org.prevayler.implementation.PrevaylerImpl;
import org.prevayler.implementation.clock.BrokenClock;
import org.prevayler.implementation.clock.MachineClock;
import org.prevayler.implementation.clock.PausableClock;
import org.prevayler.implementation.journal.Journal;
import org.prevayler.implementation.journal.TransientJournal;
import org.prevayler.implementation.publishing.CentralPublisher;
import org.prevayler.implementation.publishing.TransactionPublisher;
import org.prevayler.implementation.publishing.censorship.LiberalTransactionCensor;
import org.prevayler.implementation.publishing.censorship.TransactionCensor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class Prevayler_ESTest5 extends Prevayler_ESTest_scaffolding5 {

  @Test
  public void test00()  throws Throwable  {
      LiberalTransactionCensor liberalTransactionCensor0 = new LiberalTransactionCensor();
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) null, (TransactionCensor) liberalTransactionCensor0, (Journal) transientJournal0);
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) javaSerializer0);
      prevaylerImpl0.close();
  }

  @Test
  public void test01()  throws Throwable  {
      MachineClock machineClock0 = new MachineClock();
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) machineClock0, (Journal) transientJournal0);
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer();
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) xStreamSerializer0);
      PausableClock pausableClock0 = (PausableClock)prevaylerImpl0.clock();
      assertNotNull(pausableClock0);
  }

  @Test
  public void test02()  throws Throwable  {
      Date date0 = new Date((-1L));
      BrokenClock brokenClock0 = new BrokenClock(date0);
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) brokenClock0, (Journal) transientJournal0);
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) skaringaSerializer0);
      // Undeclared exception!
      try { 
        prevaylerImpl0.takeSnapshot();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.PrevaylerImpl", e);
      }
  }

  @Test
  public void test03()  throws Throwable  {
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) null, (Journal) transientJournal0);
      JavaSerializer javaSerializer0 = new JavaSerializer((ClassLoader) null);
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) javaSerializer0);
      // Undeclared exception!
      try { 
        prevaylerImpl0.prevalentSystem();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.PrevaylerImpl", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      MachineClock machineClock0 = new MachineClock();
      PausableClock pausableClock0 = new PausableClock((Clock) machineClock0);
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) pausableClock0, (Journal) transientJournal0);
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) skaringaSerializer0);
      try { 
        prevaylerImpl0.execute((TransactionWithQuery) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.publishing.CentralPublisher", e);
      }
  }

  @Test
  public void test05()  throws Throwable  {
      MachineClock machineClock0 = new MachineClock();
      LiberalTransactionCensor liberalTransactionCensor0 = new LiberalTransactionCensor();
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) machineClock0, (TransactionCensor) liberalTransactionCensor0, (Journal) transientJournal0);
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) skaringaSerializer0);
      try { 
        prevaylerImpl0.execute((TransactionWithQuery) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Journal.update() has to be called at least once before Journal.journal().
         //
         assertThrownBy("org.prevayler.implementation.journal.TransientJournal", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      MachineClock machineClock0 = new MachineClock();
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) machineClock0, (Journal) transientJournal0);
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer("");
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) xStreamSerializer0);
      // Undeclared exception!
      try { 
        prevaylerImpl0.execute((TransactionWithQuery) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unable to serialize transaction
         //
         assertThrownBy("org.prevayler.implementation.Capsule", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond((-2597L));
      Date date0 = Date.from(instant0);
      BrokenClock brokenClock0 = new BrokenClock(date0);
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) brokenClock0, (Journal) transientJournal0);
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) skaringaSerializer0);
      // Undeclared exception!
      try { 
        prevaylerImpl0.execute((Transaction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.publishing.CentralPublisher", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Date date0 = new Date();
      BrokenClock brokenClock0 = new BrokenClock(date0);
      LiberalTransactionCensor liberalTransactionCensor0 = new LiberalTransactionCensor();
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) brokenClock0, (TransactionCensor) liberalTransactionCensor0, (Journal) transientJournal0);
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) skaringaSerializer0);
      // Undeclared exception!
      try { 
        prevaylerImpl0.execute((Transaction) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Journal.update() has to be called at least once before Journal.journal().
         //
         assertThrownBy("org.prevayler.implementation.journal.TransientJournal", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      BrokenClock brokenClock0 = new BrokenClock();
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) brokenClock0, (Journal) transientJournal0);
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) null);
      // Undeclared exception!
      try { 
        prevaylerImpl0.execute((Transaction) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unable to serialize transaction
         //
         assertThrownBy("org.prevayler.implementation.Capsule", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Date date0 = new Date((-1L));
      BrokenClock brokenClock0 = new BrokenClock(date0);
      LiberalTransactionCensor liberalTransactionCensor0 = new LiberalTransactionCensor();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) brokenClock0, (TransactionCensor) liberalTransactionCensor0, (Journal) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JavaSerializer javaSerializer0 = new JavaSerializer(classLoader0);
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) javaSerializer0);
      // Undeclared exception!
      try { 
        prevaylerImpl0.execute((SureTransactionWithQuery) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.publishing.CentralPublisher", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      MachineClock machineClock0 = new MachineClock();
      LiberalTransactionCensor liberalTransactionCensor0 = new LiberalTransactionCensor();
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) machineClock0, (TransactionCensor) liberalTransactionCensor0, (Journal) transientJournal0);
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) skaringaSerializer0);
      // Undeclared exception!
      try { 
        prevaylerImpl0.execute((SureTransactionWithQuery) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Journal.update() has to be called at least once before Journal.journal().
         //
         assertThrownBy("org.prevayler.implementation.journal.TransientJournal", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      BrokenClock brokenClock0 = new BrokenClock();
      PausableClock pausableClock0 = new PausableClock((Clock) brokenClock0);
      LiberalTransactionCensor liberalTransactionCensor0 = new LiberalTransactionCensor();
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) pausableClock0, (TransactionCensor) liberalTransactionCensor0, (Journal) transientJournal0);
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer("");
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) xStreamSerializer0);
      // Undeclared exception!
      try { 
        prevaylerImpl0.execute((SureTransactionWithQuery) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unable to serialize transaction
         //
         assertThrownBy("org.prevayler.implementation.Capsule", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(455L, 9L);
      Date date0 = Date.from(instant0);
      BrokenClock brokenClock0 = new BrokenClock(date0);
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) brokenClock0, (Journal) transientJournal0);
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer("W;Z0z=$ODefuq");
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) xStreamSerializer0);
      try { 
        prevaylerImpl0.execute((Query) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.PrevaylerImpl", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer("");
      BrokenClock brokenClock0 = new BrokenClock();
      LiberalTransactionCensor liberalTransactionCensor0 = new LiberalTransactionCensor();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) brokenClock0, (TransactionCensor) liberalTransactionCensor0, (Journal) null);
      PrevaylerImpl prevaylerImpl0 = new PrevaylerImpl((TransactionPublisher) centralPublisher0, (Serializer) xStreamSerializer0);
      // Undeclared exception!
      try { 
        prevaylerImpl0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.publishing.CentralPublisher", e);
      }
  }
}
