/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 06 22:50:31 KST 2017
 */

package org.prevayler.implementation;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.fail;

import java.io.InputStream;
import java.io.NotSerializableException;
import java.io.UnsupportedEncodingException;
import java.time.chrono.HijrahChronology;
import java.time.chrono.HijrahDate;
import java.time.chrono.JapaneseDate;
import java.time.chrono.ThaiBuddhistChronology;
import java.time.chrono.ThaiBuddhistDate;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.prevayler.Clock;
import org.prevayler.Query;
import org.prevayler.Transaction;
import org.prevayler.foundation.Chunk;
import org.prevayler.foundation.serialization.JavaSerializer;
import org.prevayler.foundation.serialization.Serializer;
import org.prevayler.foundation.serialization.SkaringaSerializer;
import org.prevayler.foundation.serialization.XStreamSerializer;
import org.prevayler.implementation.clock.BrokenClock;
import org.prevayler.implementation.clock.MachineClock;
import org.prevayler.implementation.clock.PausableClock;
import org.prevayler.implementation.journal.Journal;
import org.prevayler.implementation.journal.TransientJournal;
import org.prevayler.implementation.publishing.CentralPublisher;
import org.prevayler.implementation.publishing.TransactionPublisher;
import org.prevayler.implementation.snapshot.GenericSnapshotManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class PrevalentSystemGuard_ESTest5 extends PrevalentSystemGuard_ESTest_scaffolding5 {

  @Test
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer("Cwed|{;I8?owq");
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) integer0, (long) 0, (Serializer) xStreamSerializer0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JavaSerializer javaSerializer0 = new JavaSerializer(classLoader0);
      prevalentSystemGuard0.deepCopy(0, javaSerializer0);
  }

  @Test
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard(object0, 1L, (Serializer) skaringaSerializer0);
      BrokenClock brokenClock0 = new BrokenClock();
      PausableClock pausableClock0 = new PausableClock((Clock) brokenClock0);
      Date date0 = pausableClock0.time();
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) null, 1266L, date0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.receive(transactionTimestamp0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempted to apply transaction 1266 when prevalent system was only at 1
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String string0 = "";
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer("Cwed|{;I8?owq");
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) integer0, (long) 0, (Serializer) xStreamSerializer0);
      HashMap<HijrahDate, InputStream> hashMap0 = new HashMap<HijrahDate, InputStream>();
      HijrahChronology hijrahChronology0 = HijrahChronology.INSTANCE;
      java.time.Clock clock0 = java.time.Clock.systemUTC();
      HijrahDate hijrahDate0 = hijrahChronology0.dateNow(clock0);
      PrevaylerDirectory prevaylerDirectory0 = new PrevaylerDirectory(string0);
      GenericSnapshotManager genericSnapshotManager0 = null;
      try {
        genericSnapshotManager0 = new GenericSnapshotManager((Map) hashMap0, string0, (Object) hijrahDate0, prevaylerDirectory0, (Serializer) xStreamSerializer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Primary suffix '' does not appear in strategies map
         //
         assertThrownBy("org.prevayler.implementation.snapshot.GenericSnapshotManager", e);
      }
  }

  @Test
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard(object0, 3197L, (Serializer) javaSerializer0);
      byte[] byteArray0 = new byte[0];
      HashMap<HijrahDate, JapaneseDate> hashMap0 = new HashMap<HijrahDate, JapaneseDate>();
      Chunk chunk0 = new Chunk(byteArray0, (Map) hashMap0);
      // Undeclared exception!
      try { 
        TransactionTimestamp.fromChunk(chunk0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         assertThrownBy("java.lang.Long", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) integer0, (long) 0, (Serializer) skaringaSerializer0);
      BrokenClock brokenClock0 = new BrokenClock();
      TransientJournal transientJournal0 = new TransientJournal();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) brokenClock0, (Journal) transientJournal0);
      prevalentSystemGuard0.subscribeTo(centralPublisher0);
  }

  @Test
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard(object0, 3197L, (Serializer) javaSerializer0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.subscribeTo((TransactionPublisher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(6);
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer("4y0LEh&");
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) integer0, (long) 6, (Serializer) xStreamSerializer0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.receive((TransactionTimestamp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      JapaneseDate japaneseDate0 = JapaneseDate.now();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) japaneseDate0, (-179L), (Serializer) null);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.deepCopy((-179L), (Serializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.foundation.DeepCopier", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard(object0, 0L, (Serializer) javaSerializer0);
      try { 
        prevalentSystemGuard0.deepCopy(0L, javaSerializer0);
        fail("Expecting exception: NotSerializableException");
      
      } catch(NotSerializableException e) {
         //
         // java.lang.Object
         //
         assertThrownBy("java.io.ObjectOutputStream", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1);
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) integer0, 1545L, (Serializer) javaSerializer0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.deepCopy(1L, javaSerializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already at 1545; can't go back to 1
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) null, (-1L), (Serializer) skaringaSerializer0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.deepCopy(0L, skaringaSerializer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Prevayler is no longer accepting transactions due to an Error thrown from an earlier transaction.
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer("[");
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard(object0, 0L, (Serializer) xStreamSerializer0);
      try { 
        prevalentSystemGuard0.deepCopy(0L, xStreamSerializer0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // [
         //
         assertThrownBy("sun.nio.cs.StreamEncoder", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer("");
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) null, 0L, (Serializer) xStreamSerializer0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.takeSnapshot((GenericSnapshotManager) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Prevayler is no longer allowing snapshots due to an Error thrown from an earlier transaction.
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ThaiBuddhistChronology thaiBuddhistChronology0 = ThaiBuddhistChronology.INSTANCE;
      ThaiBuddhistDate thaiBuddhistDate0 = thaiBuddhistChronology0.dateNow();
      JavaSerializer javaSerializer0 = new JavaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) thaiBuddhistDate0, (-3735L), (Serializer) javaSerializer0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.takeSnapshot((GenericSnapshotManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JavaSerializer javaSerializer0 = new JavaSerializer(classLoader0);
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) null, 0L, (Serializer) javaSerializer0);
      MachineClock machineClock0 = new MachineClock();
      PausableClock pausableClock0 = new PausableClock((Clock) machineClock0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.executeQuery((Query) null, pausableClock0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Prevayler is no longer processing queries due to an Error thrown from an earlier transaction.
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(0);
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer("Cwed|{;I8?owq");
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) integer0, (long) 0, (Serializer) xStreamSerializer0);
      MachineClock machineClock0 = new MachineClock();
      try { 
        prevalentSystemGuard0.executeQuery((Query) null, machineClock0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard(object0, 0L, (Serializer) skaringaSerializer0);
      byte[] byteArray0 = new byte[1];
      TransactionWithQueryCapsule transactionWithQueryCapsule0 = new TransactionWithQueryCapsule(byteArray0);
      MachineClock machineClock0 = new MachineClock();
      PausableClock pausableClock0 = new PausableClock((Clock) machineClock0);
      Date date0 = pausableClock0.time();
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) transactionWithQueryCapsule0, 1L, date0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.receive(transactionTimestamp0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unable to deserialize transaction
         //
         assertThrownBy("org.prevayler.implementation.Capsule", e);
      }
  }

  @Test
  public void test17()  throws Throwable  {
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) null, (-3570L), (Serializer) skaringaSerializer0);
      TransactionCapsule transactionCapsule0 = new TransactionCapsule((Transaction) null, (Serializer) skaringaSerializer0);
      Date date0 = new Date((-3570L));
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) transactionCapsule0, (-3570L), date0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.receive(transactionTimestamp0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Prevayler is no longer processing transactions due to an Error thrown from an earlier transaction.
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer("");
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard(object0, 107L, (Serializer) xStreamSerializer0);
      byte[] byteArray0 = new byte[0];
      TransactionWithQueryCapsule transactionWithQueryCapsule0 = new TransactionWithQueryCapsule(byteArray0);
      Date date0 = new Date(0L);
      TransactionTimestamp transactionTimestamp0 = new TransactionTimestamp((Capsule) transactionWithQueryCapsule0, 107L, date0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.receive(transactionTimestamp0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempted to apply transaction 107 when prevalent system was only at 107
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test19()  throws Throwable  {
      XStreamSerializer xStreamSerializer0 = new XStreamSerializer("");
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) null, 0L, (Serializer) xStreamSerializer0);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.prevalentSystem();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Prevayler is no longer allowing access to the prevalent system due to an Error thrown from an earlier transaction.
         //
         assertThrownBy("org.prevayler.implementation.PrevalentSystemGuard", e);
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      SkaringaSerializer skaringaSerializer0 = new SkaringaSerializer();
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard(object0, 0L, (Serializer) skaringaSerializer0);
      Object object1 = prevalentSystemGuard0.prevalentSystem();
      assertSame(object0, object1);
  }

  @Test
  public void test21()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JavaSerializer javaSerializer0 = new JavaSerializer(classLoader0);
      PrevalentSystemGuard prevalentSystemGuard0 = new PrevalentSystemGuard((Object) null, 0L, (Serializer) javaSerializer0);
      MachineClock machineClock0 = new MachineClock();
      CentralPublisher centralPublisher0 = new CentralPublisher((Clock) machineClock0, (Journal) null);
      // Undeclared exception!
      try { 
        prevalentSystemGuard0.subscribeTo(centralPublisher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.prevayler.implementation.publishing.CentralPublisher", e);
      }
  }
}
