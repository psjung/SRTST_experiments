/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 12 16:19:44 KST 2018
 */

package cz.cacek.ebook;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.io.EOFException;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class Page_ESTest1 extends Page_ESTest_scaffolding1 {
@BeforeClass
public static void initEvoSuiteFramework() {
String a = "aa";
}
@AfterClass
public static void exitEvoSuiteFramework() {
String a = "aa";
}

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Page page0 = new Page(".");
      char char0 = page0.readPrev();
      assertEquals((-1), page0.getPosition());
      assertEquals('.', char0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Page page0 = new Page("7\u00058");
      page0.readNext();
      page0.readNext();
      char char0 = page0.readPrev();
      assertEquals(1, page0.getPosition());
      assertEquals('8', char0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Page page0 = new Page("G");
      char char0 = page0.readNext();
      assertEquals(1, page0.getPosition());
      assertEquals('G', char0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Page page0 = new Page("*");
      char char0 = page0.readCurr();
      assertEquals('*', char0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Page page0 = new Page("6");
      char char0 = page0.readCurr();
      assertEquals('6', char0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Page page0 = new Page(")[");
      page0.setPercPosition(100);
      int int0 = page0.getPosition();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Page page0 = new Page("m");
      page0.readPrev();
      int int0 = page0.getPosition();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Page page0 = new Page("");
      try { 
        page0.rollNext();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot roll next buffer
         //
         verifyException("cz.cacek.ebook.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Page page0 = new Page("");
      page0.size = (-1);
      try { 
        page0.readPrev();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot roll next buffer
         //
         verifyException("cz.cacek.ebook.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Page page0 = new Page("");
      page0.size = (int) 'f';
      page0.setPercPosition(1);
      try { 
        page0.readPrev();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("cz.cacek.ebook.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Page page0 = new Page("");
      page0.size = (int) '';
      page0.setPercPosition(1);
      try { 
        page0.readNext();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("cz.cacek.ebook.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Page page0 = new Page("");
      page0.size = 1;
      try { 
        page0.readCurr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot roll next buffer
         //
         verifyException("cz.cacek.ebook.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Page page0 = new Page("");
      page0.size = (int) '\t';
      page0.setPosition(1);
      try { 
        page0.readCurr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("cz.cacek.ebook.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Page page0 = new Page("");
      try { 
        page0.readCurr();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cz.cacek.ebook.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Page page0 = null;
      try {
        page0 = new Page((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cz.cacek.ebook.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Page page0 = new Page("d");
      page0.setPosition(0);
      assertEquals(0, page0.getPosition());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Page page0 = new Page("");
      int int0 = page0.getPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Page.PageHolder page_PageHolder0 = new Page.PageHolder("");
      char[] charArray0 = page_PageHolder0.getBuffer();
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Page page0 = new Page("");
      try { 
        page0.setPercPosition(101);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("cz.cacek.ebook.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Page page0 = new Page("");
      try { 
        page0.setPercPosition((-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("cz.cacek.ebook.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Page page0 = new Page("f");
      page0.setPercPosition(0);
      assertEquals(0, page0.getPosition());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Page page0 = new Page("");
      // Undeclared exception!
      try { 
        page0.setPosition((-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("cz.cacek.ebook.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Page page0 = new Page("");
      // Undeclared exception!
      try { 
        page0.setPosition('f');
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("cz.cacek.ebook.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Page page0 = new Page("f");
      page0.readPrev();
      try { 
        page0.readNext();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cz.cacek.ebook.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Page page0 = new Page("f");
      char char0 = page0.readCurr();
      assertEquals('f', char0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Page page0 = new Page("");
      try { 
        page0.rollPrev();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot roll previous buffer
         //
         verifyException("cz.cacek.ebook.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Page page0 = new Page("");
      page0.size = (-1);
      try { 
        page0.readNext();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot roll next buffer
         //
         verifyException("cz.cacek.ebook.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Page page0 = new Page("");
      String string0 = page0.toString();
      assertEquals("Page (size=0, position=0)", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Page page0 = new Page("");
      try { 
        page0.readPrev();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cz.cacek.ebook.Page", e);
      }
  }
}
