/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 12 16:55:59 KST 2018
 */

package com.substanceofcode.rssreader.businessentities;

import static org.junit.Assert.assertEquals;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Date;
import java.util.Vector;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class CompatibilityRssFeed3_ESTest2 extends CompatibilityRssFeed3_ESTest_scaffolding2 {
@BeforeClass
public static void initEvoSuiteFramework() {
String a = "aa";
}
@AfterClass
public static void exitEvoSuiteFramework() {
String a = "aa";
}

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      ZonedDateTime zonedDateTime0 = ZonedDateTime.now((ZoneId) zoneOffset0);
      OffsetDateTime offsetDateTime0 = zonedDateTime0.toOffsetDateTime();
      Instant instant0 = offsetDateTime0.toInstant();
      Date date0 = Date.from(instant0);
      compatibilityRssFeed3_0.m_upddate = date0;
      //  // Unstable assertion: assertEquals("Sun Aug 12 16:55:25 KST 2018", compatibilityRssFeed3_0.m_upddate.toString());
      
      compatibilityRssFeed3_0.getDate();
      //  // Unstable assertion: assertEquals("", compatibilityRssFeed3_0.getUsername());
      //  // Unstable assertion: assertEquals("", compatibilityRssFeed3_0.getName());
      //  // Unstable assertion: assertEquals("", compatibilityRssFeed3_0.getUrl());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(false, false, "");
      Instant instant0 = Instant.EPOCH;
      Date date0 = Date.from(instant0);
      compatibilityRssFeed3_0.m_upddate = date0;
      String string0 = compatibilityRssFeed3_0.toString();
      assertEquals("||||0||-1||", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      Date date0 = new Date();
      compatibilityRssFeed3_0.m_upddate = date0;
      compatibilityRssFeed3_0.setDate(compatibilityRssFeed3_0.m_upddate);
      String string0 = compatibilityRssFeed3_0.toString();
      //  // Unstable assertion: assertEquals("||||||-1|1652d21f69c|", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      Date date0 = new Date(0);
      compatibilityRssFeed3_0.setDate(date0);
      Date date1 = compatibilityRssFeed3_0.getUpddate();
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getName());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      assertEquals("", compatibilityRssFeed3_0.getUrl());
      assertNull(date1);
      assertEquals("", compatibilityRssFeed3_0.getUsername());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RssFeed rssFeed0 = new RssFeed(true, true, "");
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(rssFeed0);
      Date date0 = new Date();
      compatibilityRssFeed3_0.setUpddate(date0);
      assertEquals(8, CompatibilityRssFeed3.ITUNES_ITEMS);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      compatibilityRssFeed3_0.modifyItunes(true, "", "", "", "", "", "", (byte)0);
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3(false, false, "u");
      boolean boolean0 = compatibilityRssFeed3_0.equals(compatibilityRssFeed3_1);
      assertFalse(boolean0);
      assertEquals("u", compatibilityRssFeed3_1.getName());
      assertEquals("", compatibilityRssFeed3_1.getUrl());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RssFeed rssFeed0 = new RssFeed();
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(rssFeed0);
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3("", "t", "", "");
      compatibilityRssFeed3_0.m_itunes = true;
      boolean boolean0 = compatibilityRssFeed3_0.equals(compatibilityRssFeed3_1);
      assertEquals((-1), compatibilityRssFeed3_1.getCategory());
      assertEquals("t", compatibilityRssFeed3_1.getUrl());
      assertEquals("", compatibilityRssFeed3_1.getPassword());
      assertFalse(boolean0);
      assertEquals("", compatibilityRssFeed3_1.getName());
      assertEquals("", compatibilityRssFeed3_1.getUsername());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      
      Date date0 = new Date(0);
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3("", (String) null, "", "", date0, "", date0, 0);
      compatibilityRssFeed3_1.copyTo(compatibilityRssFeed3_0);
      assertEquals(0, compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getLink());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      Date date0 = new Date();
      compatibilityRssFeed3_0.m_date = date0;
      //  // Unstable assertion: assertEquals("Sun Aug 12 16:55:23 KST 2018", compatibilityRssFeed3_0.m_date.toString());
      
      compatibilityRssFeed3_0.copyTo(compatibilityRssFeed3_0);
      //  // Unstable assertion: assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      //  // Unstable assertion: assertEquals("", compatibilityRssFeed3_0.getUrl());
      //  // Unstable assertion: assertEquals("", compatibilityRssFeed3_0.getName());
      //  // Unstable assertion: assertEquals("", compatibilityRssFeed3_0.getPassword());
      //  // Unstable assertion: assertEquals("", compatibilityRssFeed3_0.getUsername());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      assertEquals("", compatibilityRssFeed3_0.getUrl());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      assertEquals("", compatibilityRssFeed3_0.getName());
      
      String[] stringArray0 = new String[6];
      stringArray0[2] = "";
      compatibilityRssFeed3_0.init(true, 0, true, true, true, stringArray0);
      assertEquals("", compatibilityRssFeed3_0.getUsername());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      compatibilityRssFeed3_0.modifyItunes(true, "", "", "", "", "", "", (byte)0);
      String[] stringArray0 = new String[2];
      compatibilityRssFeed3_0.init(true, 0, true, true, true, stringArray0);
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(false, false, (String) null);
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", (String) null, (String) null, "");
      String string0 = compatibilityRssFeed3_0.getUsername();
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      assertEquals("", compatibilityRssFeed3_0.getName());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "u", "");
      String string0 = compatibilityRssFeed3_0.getUsername();
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getUrl());
      assertEquals("", compatibilityRssFeed3_0.getName());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      assertEquals("u", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", (String) null, "", (String) null);
      String string0 = compatibilityRssFeed3_0.getUrl();
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertNull(string0);
      assertEquals("", compatibilityRssFeed3_0.getName());
      assertEquals("", compatibilityRssFeed3_0.getUsername());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(false, true, "");
      compatibilityRssFeed3_0.setUrl("R");
      compatibilityRssFeed3_0.getUrl();
      assertEquals("R", compatibilityRssFeed3_0.getUrl());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Date date0 = new Date();
      RssItunesFeed rssItunesFeed0 = new RssItunesFeed("", "", "", "", date0, "", date0, 0, false, "", "", "", "", "", "", (byte)0);
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(rssItunesFeed0);
      Date date1 = compatibilityRssFeed3_0.getUpddate();
      //  // Unstable assertion: assertEquals("Sun Aug 12 16:55:22 KST 2018", date1.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", (String) null);
      String string0 = compatibilityRssFeed3_0.getPassword();
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getName());
      assertEquals("", compatibilityRssFeed3_0.getUsername());
      assertNull(string0);
      assertEquals("", compatibilityRssFeed3_0.getUrl());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(false, true, "");
      compatibilityRssFeed3_0.m_password = "R";
      compatibilityRssFeed3_0.getPassword();
      assertEquals("R", compatibilityRssFeed3_0.getPassword());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Date date0 = new Date();
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3((String) null, (String) null, (String) null, (String) null, date0, "", date0, 0);
      String string0 = compatibilityRssFeed3_0.getName();
      assertEquals(0, compatibilityRssFeed3_0.getCategory());
      assertNull(string0);
      assertEquals("", compatibilityRssFeed3_0.getLink());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("T", "", "", "");
      String string0 = compatibilityRssFeed3_0.getName();
      assertEquals("", compatibilityRssFeed3_0.getUsername());
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getUrl());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      assertEquals("T", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", (String) null, "", "", date0, (String) null, date0, 0);
      String string0 = compatibilityRssFeed3_0.getLink();
      assertNull(string0);
      assertEquals(0, compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getUsername());
      assertEquals("", compatibilityRssFeed3_0.getName());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli(0L);
      Date date0 = Date.from(instant0);
      RssFeed rssFeed0 = new RssFeed((String) null, (String) null, (String) null, "", date0, "C", date0, 0);
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(rssFeed0);
      String string0 = compatibilityRssFeed3_0.getLink();
      assertEquals("C", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      Vector<Object> vector0 = new Vector<Object>();
      vector0.insertElementAt("", 0);
      compatibilityRssFeed3_0.setItems(vector0);
      Vector vector1 = compatibilityRssFeed3_0.getItems();
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getName());
      assertEquals("", compatibilityRssFeed3_0.getUrl());
      assertEquals("", compatibilityRssFeed3_0.getUsername());
      assertEquals(1, vector1.size());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RssItunesFeed rssItunesFeed0 = new RssItunesFeed("", "", "", "", (Date) null, "", (Date) null, 0, true, "", "", "", "", "", "", (byte)0);
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(rssItunesFeed0);
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.trimToSize();
      compatibilityRssFeed3_0.setItems(vector0);
      Vector vector1 = compatibilityRssFeed3_0.getItems();
      assertEquals(0, vector1.capacity());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Date date0 = new Date();
      RssItunesFeed rssItunesFeed0 = new RssItunesFeed("", "", "", "", date0, "", date0, 0, false, "", "", "", "", "", "", (byte)0);
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(rssItunesFeed0);
      Date date1 = compatibilityRssFeed3_0.getDate();
      //  // Unstable assertion: assertEquals("Sun Aug 12 16:55:21 KST 2018", date1.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      
      compatibilityRssFeed3_0.setCategory(0);
      int int0 = compatibilityRssFeed3_0.getCategory();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Date date0 = new Date(0L);
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "", date0, "", date0, 1);
      int int0 = compatibilityRssFeed3_0.getCategory();
      assertEquals("", compatibilityRssFeed3_0.getUsername());
      assertEquals(1, int0);
      assertEquals("", compatibilityRssFeed3_0.getUrl());
      assertEquals("", compatibilityRssFeed3_0.getLink());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      assertEquals("", compatibilityRssFeed3_0.getName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.add((Integer) 0);
      compatibilityRssFeed3_0.setItems(vector0);
      // Undeclared exception!
      try { 
        compatibilityRssFeed3_0.toString();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      // Undeclared exception!
      try { 
        compatibilityRssFeed3_0.setLink((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3((String) null, "", "", "");
      // Undeclared exception!
      try { 
        compatibilityRssFeed3_0.getStoreString(false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.substanceofcode.rssreader.businessentities.CompatibilityRssFeed3", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.add((Integer) 0);
      compatibilityRssFeed3_0.setItems(vector0);
      // Undeclared exception!
      try { 
        compatibilityRssFeed3_0.getStoreString(true, true);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      Date date0 = new Date(0);
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3("", (String) null, "", "", date0, "", date0, 0);
      // Undeclared exception!
      try { 
        compatibilityRssFeed3_0.equals(compatibilityRssFeed3_1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RssFeed rssFeed0 = new RssFeed();
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(rssFeed0);
      // Undeclared exception!
      try { 
        compatibilityRssFeed3_0.copyTo((CompatibilityRssFeed3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.substanceofcode.rssreader.businessentities.CompatibilityRssFeed3", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = null;
      try {
        compatibilityRssFeed3_0 = new CompatibilityRssFeed3((RssFeed) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.substanceofcode.rssreader.businessentities.CompatibilityRssFeed3", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "IK+/0F3+(@", "", (String) null);
      compatibilityRssFeed3_0.setLink("IK+/0F3+(@");
      assertEquals("", compatibilityRssFeed3_0.getUsername());
      assertEquals("", compatibilityRssFeed3_0.getLink());
      assertEquals("", compatibilityRssFeed3_0.getName());
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Date date0 = new Date(0L);
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "", date0, "", date0, 0);
      String string0 = compatibilityRssFeed3_0.toString();
      assertEquals("||||0||0|0|", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      Vector<CompatibilityRssItunesItem3> vector0 = new Vector<CompatibilityRssItunesItem3>(0, 0);
      vector0.add((CompatibilityRssItunesItem3) null);
      compatibilityRssFeed3_0.setItems(vector0);
      // Undeclared exception!
      try { 
        compatibilityRssFeed3_0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.substanceofcode.rssreader.businessentities.CompatibilityRssFeed3", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      compatibilityRssFeed3_0.m_category = (int) (byte)0;
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3(compatibilityRssFeed3_0);
      compatibilityRssFeed3_0.equals(compatibilityRssFeed3_1);
      //  // Unstable assertion: assertEquals((-1), compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      compatibilityRssFeed3_0.setLink("1");
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3();
      boolean boolean0 = compatibilityRssFeed3_0.equals(compatibilityRssFeed3_1);
      assertEquals("1", compatibilityRssFeed3_0.getLink());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      Date date0 = new Date();
      compatibilityRssFeed3_0.m_upddate = date0;
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3("", "", "", "", date0, "", date0, 0);
      assertEquals(0, compatibilityRssFeed3_1.getCategory());
      
      compatibilityRssFeed3_0.copyTo(compatibilityRssFeed3_1);
      compatibilityRssFeed3_0.setDate(compatibilityRssFeed3_0.m_upddate);
      compatibilityRssFeed3_1.equals(compatibilityRssFeed3_0);
      assertEquals((-1), compatibilityRssFeed3_1.getCategory());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Date date0 = new Date();
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "", date0, "", date0, 0);
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3();
      compatibilityRssFeed3_0.equals(compatibilityRssFeed3_1);
      assertEquals("", compatibilityRssFeed3_0.getUrl());
      assertEquals("", compatibilityRssFeed3_0.getUsername());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      assertEquals((-1), compatibilityRssFeed3_1.getCategory());
      assertEquals(0, compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Date date0 = new Date(0L);
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "", date0, "", date0, 0);
      boolean boolean0 = compatibilityRssFeed3_0.equals(compatibilityRssFeed3_0);
      assertEquals(0, compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getUsername());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      assertEquals("", compatibilityRssFeed3_0.getUrl());
      assertEquals("", compatibilityRssFeed3_0.getName());
      assertEquals("", compatibilityRssFeed3_0.getLink());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(false, true, "@+Rx");
      assertEquals("", compatibilityRssFeed3_0.getUrl());
      
      compatibilityRssFeed3_0.setUrl("@+Rx");
      compatibilityRssFeed3_0.m_password = "R";
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3("@+Rx", "@+Rx", "", "");
      boolean boolean0 = compatibilityRssFeed3_0.equals(compatibilityRssFeed3_1);
      assertEquals("@+Rx", compatibilityRssFeed3_0.getUrl());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3("", "", "D", "");
      boolean boolean0 = compatibilityRssFeed3_0.equals(compatibilityRssFeed3_1);
      assertEquals((-1), compatibilityRssFeed3_1.getCategory());
      assertEquals("", compatibilityRssFeed3_1.getName());
      assertEquals("", compatibilityRssFeed3_1.getUrl());
      assertEquals("D", compatibilityRssFeed3_1.getUsername());
      assertEquals("", compatibilityRssFeed3_1.getPassword());
      assertFalse(boolean0);
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(true, false, "");
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3(true, false, "");
      Vector<RssItunesItem> vector0 = new Vector<RssItunesItem>();
      CompatibilityRssItunesItem3 compatibilityRssItunesItem3_0 = new CompatibilityRssItunesItem3();
      CompatibilityRssItem3 compatibilityRssItem3_0 = new CompatibilityRssItem3((CompatibilityRssItem3) compatibilityRssItunesItem3_0);
      vector0.add((RssItunesItem) compatibilityRssItem3_0);
      compatibilityRssFeed3_1.m_items = vector0;
      // Undeclared exception!
      compatibilityRssFeed3_1.copyTo(compatibilityRssFeed3_0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(true, false, "");
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3(true, false, "");
      Vector<RssItunesItem> vector0 = new Vector<RssItunesItem>();
      CompatibilityRssItem3 compatibilityRssItem3_0 = CompatibilityRssItunesItem3.deserialize3("FIcXDLfYA");
      vector0.add((RssItunesItem) compatibilityRssItem3_0);
      compatibilityRssFeed3_1.m_items = vector0;
      compatibilityRssFeed3_1.copyTo(compatibilityRssFeed3_0);
      assertEquals("", compatibilityRssFeed3_0.getUsername());
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getLink());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      assertEquals("", compatibilityRssFeed3_1.getName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(true, false, "");
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3(true, false, "");
      Vector<RssItunesItem> vector0 = new Vector<RssItunesItem>();
      CompatibilityRssItunesItem3 compatibilityRssItunesItem3_0 = new CompatibilityRssItunesItem3();
      vector0.add((RssItunesItem) compatibilityRssItunesItem3_0);
      compatibilityRssFeed3_1.m_items = vector0;
      // Undeclared exception!
      compatibilityRssFeed3_1.copyTo(compatibilityRssFeed3_0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Date date0 = new Date(0L);
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "", date0, "", date0, 0);
      String string0 = compatibilityRssFeed3_0.getStoreString(true, false);
      assertEquals("||||0||0|0|", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      String string0 = compatibilityRssFeed3_0.getStoreString(true, true);
      assertEquals("||||||||", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      String[] stringArray0 = new String[7];
      stringArray0[6] = "F";
      compatibilityRssFeed3_0.init(false, 2, false, false, false, stringArray0);
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      assertEquals("", compatibilityRssFeed3_0.getUsername());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      assertEquals("", compatibilityRssFeed3_0.getName());
      assertEquals("", compatibilityRssFeed3_0.getUrl());
      
      String[] stringArray0 = new String[7];
      stringArray0[4] = "";
      compatibilityRssFeed3_0.init(false, 0, false, true, false, stringArray0);
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      assertEquals("", compatibilityRssFeed3_0.getUrl());
      
      String[] stringArray0 = new String[6];
      stringArray0[2] = "";
      stringArray0[3] = "";
      compatibilityRssFeed3_0.init(true, 0, true, true, true, stringArray0);
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      assertEquals("", compatibilityRssFeed3_0.getUsername());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      assertEquals("", compatibilityRssFeed3_0.getName());
      assertEquals("", compatibilityRssFeed3_0.getUrl());
      
      String[] stringArray0 = new String[6];
      stringArray0[2] = "";
      stringArray0[3] = "";
      compatibilityRssFeed3_0.init(true, 0, true, false, true, stringArray0);
      assertEquals("", compatibilityRssFeed3_0.getPassword());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      assertEquals("", compatibilityRssFeed3_0.getUsername());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      
      String[] stringArray0 = new String[7];
      compatibilityRssFeed3_0.init(true, 0, false, false, false, stringArray0);
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      String string0 = compatibilityRssFeed3_0.getPassword();
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      String string0 = compatibilityRssFeed3_0.getUrl();
      assertEquals("", string0);
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      String string0 = compatibilityRssFeed3_0.getUsername();
      assertEquals("", compatibilityRssFeed3_0.getName());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getUrl());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      String string0 = compatibilityRssFeed3_0.getName();
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      String string0 = compatibilityRssFeed3_0.getLink();
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      compatibilityRssFeed3_0.setName("");
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getName());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      int int0 = compatibilityRssFeed3_0.getCategory();
      assertEquals((-1), int0);
  }
}
