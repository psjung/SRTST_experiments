/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 12 14:41:36 KST 2018
 */

package com.substanceofcode.rssreader.businessentities;

import static org.junit.Assert.assertEquals;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.Vector;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class CompatibilityRssFeed3_ESTest1 extends CompatibilityRssFeed3_ESTest_scaffolding1 {
@BeforeClass
public static void initEvoSuiteFramework() {
String a = "aa";
}
@AfterClass
public static void exitEvoSuiteFramework() {
String a = "aa";
}

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      String string0 = compatibilityRssFeed3_0.toString();
      assertEquals("||||||-1||", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      Date date0 = new Date();
      compatibilityRssFeed3_0.setDate(date0);
      Date date1 = compatibilityRssFeed3_0.getUpddate();
      assertNull(date1);
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      boolean boolean0 = compatibilityRssFeed3_0.equals(compatibilityRssFeed3_0);
      assertEquals("", compatibilityRssFeed3_0.getUrl());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      assertEquals("", compatibilityRssFeed3_0.getName());
      assertTrue(boolean0);
      assertEquals("", compatibilityRssFeed3_0.getUsername());
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      Date date0 = new Date();
      compatibilityRssFeed3_0.setDate(date0);
      compatibilityRssFeed3_0.copyTo(compatibilityRssFeed3_0);
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getUrl());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      assertEquals("", compatibilityRssFeed3_0.getLink());
      assertEquals("", compatibilityRssFeed3_0.getName());
      assertEquals("", compatibilityRssFeed3_0.getUsername());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      String string0 = compatibilityRssFeed3_0.getStoreString(true, true);
      assertEquals("||||||||", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      String[] stringArray0 = new String[6];
      compatibilityRssFeed3_0.init(false, 0, false, true, false, stringArray0);
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      compatibilityRssFeed3_0.modifyItunes(true, "", "", "", "", "", "", (byte)0);
      String[] stringArray0 = new String[8];
      compatibilityRssFeed3_0.init(false, 0, false, false, true, stringArray0);
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      String[] stringArray0 = new String[7];
      stringArray0[5] = "";
      stringArray0[6] = "";
      compatibilityRssFeed3_0.init(true, 3, true, true, false, stringArray0);
      assertEquals("", compatibilityRssFeed3_0.getUsername());
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3((String) null, "", "\n", "");
      String string0 = compatibilityRssFeed3_0.getUsername();
      assertNotNull(string0);
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      assertEquals("", compatibilityRssFeed3_0.getUrl());
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RssFeed rssFeed0 = new RssFeed((String) null, (String) null, "", (String) null);
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(rssFeed0);
      String string0 = compatibilityRssFeed3_0.getUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "Q";
      compatibilityRssFeed3_0.init(true, 0, true, true, true, stringArray0);
      compatibilityRssFeed3_0.getUrl();
      assertEquals("Q", compatibilityRssFeed3_0.getUrl());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Date date0 = new Date(0L);
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "", date0, "", date0, 0);
      Date date1 = compatibilityRssFeed3_0.getUpddate();
      assertEquals("", compatibilityRssFeed3_0.getLink());
      assertEquals(0, compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getUrl());
      assertNotNull(date1);
      assertEquals("", compatibilityRssFeed3_0.getName());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      assertEquals("", compatibilityRssFeed3_0.getUsername());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Date date0 = new Date(0L);
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3((String) null, (String) null, (String) null, (String) null, date0, (String) null, date0, 0);
      String string0 = compatibilityRssFeed3_0.getPassword();
      assertNull(string0);
      assertEquals(0, compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "U");
      String string0 = compatibilityRssFeed3_0.getPassword();
      assertEquals("U", string0);
      assertEquals("", compatibilityRssFeed3_0.getUrl());
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getName());
      assertEquals("", compatibilityRssFeed3_0.getUsername());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Date date0 = new Date();
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3((String) null, (String) null, "", "", date0, "", date0, 0);
      String string0 = compatibilityRssFeed3_0.getName();
      assertEquals(0, compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      assertEquals("", compatibilityRssFeed3_0.getLink());
      assertEquals("", compatibilityRssFeed3_0.getUsername());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      compatibilityRssFeed3_0.setName("7");
      compatibilityRssFeed3_0.getName();
      assertEquals("7", compatibilityRssFeed3_0.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      compatibilityRssFeed3_0.setLink("u");
      compatibilityRssFeed3_0.getLink();
      assertEquals("u", compatibilityRssFeed3_0.getLink());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      Vector<Long> vector0 = new Vector<Long>();
      Long long0 = new Long(0);
      vector0.add(long0);
      compatibilityRssFeed3_0.setItems(vector0);
      Vector vector1 = compatibilityRssFeed3_0.getItems();
      assertFalse(vector1.isEmpty());
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(true, true, "");
      Vector<RssItem> vector0 = new Vector<RssItem>(0);
      compatibilityRssFeed3_0.setItems(vector0);
      Vector vector1 = compatibilityRssFeed3_0.getItems();
      assertEquals(0, vector1.capacity());
      assertEquals("", compatibilityRssFeed3_0.getName());
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      Date date0 = new Date();
      compatibilityRssFeed3_0.setDate(date0);
      Date date1 = compatibilityRssFeed3_0.getDate();
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertNotNull(date1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(false, false, "");
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      
      compatibilityRssFeed3_0.setCategory(0);
      int int0 = compatibilityRssFeed3_0.getCategory();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(true, false, "");
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      
      compatibilityRssFeed3_0.setCategory(1);
      int int0 = compatibilityRssFeed3_0.getCategory();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      // Undeclared exception!
      try { 
        compatibilityRssFeed3_0.setLink((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", (String) null);
      // Undeclared exception!
      try { 
        compatibilityRssFeed3_0.getStoreString(false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.substanceofcode.rssreader.businessentities.CompatibilityRssFeed3", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(false, false, (String) null);
      // Undeclared exception!
      try { 
        compatibilityRssFeed3_0.equals((CompatibilityRssFeed3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.substanceofcode.rssreader.businessentities.CompatibilityRssFeed3", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      // Undeclared exception!
      try { 
        compatibilityRssFeed3_0.copyTo((CompatibilityRssFeed3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.substanceofcode.rssreader.businessentities.CompatibilityRssFeed3", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      Vector<Long> vector0 = new Vector<Long>();
      Long long0 = new Long(0);
      vector0.add(long0);
      compatibilityRssFeed3_0.setItems(vector0);
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3(false, true, "");
      // Undeclared exception!
      try { 
        compatibilityRssFeed3_0.copyTo(compatibilityRssFeed3_1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to com.substanceofcode.rssreader.businessentities.RssItem
         //
         verifyException("com.substanceofcode.rssreader.businessentities.CompatibilityRssFeed3", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = null;
      try {
        compatibilityRssFeed3_0 = new CompatibilityRssFeed3((RssFeed) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.substanceofcode.rssreader.businessentities.CompatibilityRssFeed3", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "~c2v", "", "");
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3("", "~c2v", "X", "");
      boolean boolean0 = compatibilityRssFeed3_0.equals(compatibilityRssFeed3_1);
      assertEquals((-1), compatibilityRssFeed3_1.getCategory());
      assertEquals("", compatibilityRssFeed3_1.getName());
      assertEquals("~c2v", compatibilityRssFeed3_1.getUrl());
      assertEquals("", compatibilityRssFeed3_1.getPassword());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      assertEquals("", compatibilityRssFeed3_0.getUrl());
      assertEquals("", compatibilityRssFeed3_0.getUsername());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      
      String[] stringArray0 = new String[8];
      stringArray0[4] = "2";
      compatibilityRssFeed3_0.init(false, 0, false, false, false, stringArray0);
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "Q Crp8wv,iI";
      compatibilityRssFeed3_0.init(true, 0, true, true, true, stringArray0);
      compatibilityRssFeed3_0.setLink("Q Crp8wv,iI");
      assertEquals("Q Crp8wv,iI", compatibilityRssFeed3_0.getUrl());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      Date date0 = new Date();
      compatibilityRssFeed3_0.setDate(date0);
      String string0 = compatibilityRssFeed3_0.toString();
      //  // Unstable assertion: assertEquals("||||||-1|1652ca6f69e|", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(true, false, (String) null);
      Vector<CompatibilityRssItunesItem3> vector0 = new Vector<CompatibilityRssItunesItem3>();
      compatibilityRssFeed3_0.setItems(vector0);
      vector0.setSize(1);
      // Undeclared exception!
      try { 
        compatibilityRssFeed3_0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.substanceofcode.rssreader.businessentities.CompatibilityRssFeed3", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      Vector<String> vector0 = new Vector<String>();
      vector0.add("");
      compatibilityRssFeed3_0.setItems(vector0);
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3();
      compatibilityRssFeed3_0.equals(compatibilityRssFeed3_1);
      assertEquals((-1), compatibilityRssFeed3_1.getCategory());
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(true, false, "");
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3(compatibilityRssFeed3_0);
      compatibilityRssFeed3_0.setCategory(0);
      boolean boolean0 = compatibilityRssFeed3_0.equals(compatibilityRssFeed3_1);
      assertEquals(0, compatibilityRssFeed3_0.getCategory());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3(compatibilityRssFeed3_0);
      compatibilityRssFeed3_1.setLink("2");
      boolean boolean0 = compatibilityRssFeed3_0.equals(compatibilityRssFeed3_1);
      assertEquals("2", compatibilityRssFeed3_1.getLink());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      Date date0 = new Date();
      compatibilityRssFeed3_0.setDate(date0);
      compatibilityRssFeed3_0.setName("ZscJEK9ad0iJ&-l4<");
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3(false, true, "ZscJEK9ad0iJ&-l4<");
      boolean boolean0 = compatibilityRssFeed3_1.equals(compatibilityRssFeed3_0);
      assertEquals("ZscJEK9ad0iJ&-l4<", compatibilityRssFeed3_0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      Date date0 = new Date();
      compatibilityRssFeed3_0.setDate(date0);
      compatibilityRssFeed3_0.setName("ZscJEK9ad0iJ&-l4<");
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3(false, true, "ZscJEK9ad0iJ&-l4<");
      compatibilityRssFeed3_0.equals(compatibilityRssFeed3_1);
      assertEquals("ZscJEK9ad0iJ&-l4<", compatibilityRssFeed3_0.getName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      compatibilityRssFeed3_0.setName("8");
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3();
      boolean boolean0 = compatibilityRssFeed3_0.equals(compatibilityRssFeed3_1);
      assertEquals("8", compatibilityRssFeed3_0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "H", "", "");
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3(false, false, "");
      boolean boolean0 = compatibilityRssFeed3_0.equals(compatibilityRssFeed3_1);
      assertFalse(boolean0);
      assertEquals("", compatibilityRssFeed3_0.getUsername());
      assertEquals("H", compatibilityRssFeed3_0.getUrl());
      assertEquals((-1), compatibilityRssFeed3_1.getCategory());
      assertEquals("", compatibilityRssFeed3_1.getName());
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      assertEquals("", compatibilityRssFeed3_0.getName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(true, false, "");
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3(compatibilityRssFeed3_0);
      Vector<RssItem> vector0 = new Vector<RssItem>();
      compatibilityRssFeed3_1.m_items = vector0;
      Date date0 = new Date();
      CompatibilityRssItunesItem3 compatibilityRssItunesItem3_0 = new CompatibilityRssItunesItem3("", "", "", date0, "", false);
      vector0.add((RssItem) compatibilityRssItunesItem3_0);
      // Undeclared exception!
      compatibilityRssFeed3_1.copyTo(compatibilityRssFeed3_0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Date date0 = new Date(0L);
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3((String) null, (String) null, (String) null, (String) null, date0, (String) null, date0, 0);
      compatibilityRssFeed3_0.copyTo(compatibilityRssFeed3_0);
      assertEquals(0, compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(true, false, "");
      CompatibilityRssFeed3 compatibilityRssFeed3_1 = new CompatibilityRssFeed3(compatibilityRssFeed3_0);
      Vector<RssItem> vector0 = new Vector<RssItem>();
      compatibilityRssFeed3_1.m_items = vector0;
      Date date0 = new Date(0L);
      RssItunesItem rssItunesItem0 = new RssItunesItem("", "", "", date0, "", true, true, "", "", "", (byte)0, "");
      vector0.add((RssItem) rssItunesItem0);
      // Undeclared exception!
      compatibilityRssFeed3_1.copyTo(compatibilityRssFeed3_0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Date date0 = new Date(0L);
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "", date0, (String) null, date0, 0);
      String string0 = compatibilityRssFeed3_0.getStoreString(false, false);
      assertEquals("||||0|null|0|0|", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      String[] stringArray0 = new String[8];
      stringArray0[4] = "";
      compatibilityRssFeed3_0.init(false, 0, false, false, false, stringArray0);
      assertEquals(14, RssItunesFeed.IDATE_OFFSET);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(false, true, "");
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.addElement((Integer) compatibilityRssFeed3_0.ITUNES_ITEMS);
      compatibilityRssFeed3_0.setItems(vector0);
      // Undeclared exception!
      try { 
        compatibilityRssFeed3_0.getStoreString(true, false);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      String[] stringArray0 = new String[4];
      compatibilityRssFeed3_0.init(true, 0, true, true, true, stringArray0);
      String string0 = compatibilityRssFeed3_0.getUsername();
      assertNull(string0);
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Date date0 = new Date();
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "", date0, "", date0, 0);
      //  // Unstable assertion: assertEquals("", compatibilityRssFeed3_0.getUsername());
      
      String[] stringArray0 = new String[8];
      compatibilityRssFeed3_0.init(false, 0, true, true, true, stringArray0);
      //  // Unstable assertion: assertEquals(0, compatibilityRssFeed3_0.getCategory());
      //  // Unstable assertion: assertEquals("", compatibilityRssFeed3_0.getPassword());
      //  // Unstable assertion: assertEquals("Sun Aug 12 14:40:58 KST 2018", date0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      String string0 = compatibilityRssFeed3_0.getPassword();
      assertEquals("", string0);
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      Date date0 = new Date();
      compatibilityRssFeed3_0.setDate(date0);
      boolean boolean0 = compatibilityRssFeed3_0.equals(compatibilityRssFeed3_0);
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      String string0 = compatibilityRssFeed3_0.getUsername();
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      Date date0 = new Date();
      compatibilityRssFeed3_0.setUpddate(date0);
      String string0 = compatibilityRssFeed3_0.toString();
      //  // Unstable assertion: assertEquals("||||1652ca6deb1||-1||", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      compatibilityRssFeed3_0.setUrl("");
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      assertEquals("", compatibilityRssFeed3_0.getUsername());
      assertEquals("", compatibilityRssFeed3_0.getUrl());
      assertEquals("", compatibilityRssFeed3_0.getName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      String string0 = compatibilityRssFeed3_0.getUrl();
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      String string0 = compatibilityRssFeed3_0.getName();
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3("", "", "", "");
      compatibilityRssFeed3_0.getDate();
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
      assertEquals("", compatibilityRssFeed3_0.getPassword());
      assertEquals("", compatibilityRssFeed3_0.getName());
      assertEquals("", compatibilityRssFeed3_0.getUsername());
      assertEquals("", compatibilityRssFeed3_0.getUrl());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3();
      String string0 = compatibilityRssFeed3_0.getLink();
      assertEquals("", string0);
      assertEquals((-1), compatibilityRssFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CompatibilityRssFeed3 compatibilityRssFeed3_0 = new CompatibilityRssFeed3(true, false, "");
      int int0 = compatibilityRssFeed3_0.getCategory();
      assertEquals("", compatibilityRssFeed3_0.getName());
      assertEquals((-1), int0);
  }
}
