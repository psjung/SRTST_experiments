/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 20:52:41 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.EnvironmentConfig;
import com.sleepycat.je.cleaner.UtilizationTracker;
import com.sleepycat.je.dbi.CursorImpl;
import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.dbi.EnvironmentImpl;
import com.sleepycat.je.txn.LockResult;
import com.sleepycat.je.utilint.TestHook;

import bin.de.ovgu.cide.jakutil.ReturnBoolean;
import bin.de.ovgu.cide.jakutil.ReturnObject;
import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class Tree_ESTest1 extends Tree_ESTest_scaffolding1 {

  @Test
  public void test000()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook741((BIN) null);
  }

  @Test
  public void test001()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      tree0.getTreeStats();
      DIN dIN0 = new DIN();
      databaseImpl0.getLogSize();
      tree0.hook738(dIN0);
      // Undeclared exception!
      try { 
        tree0.validateINList(dIN0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test002()  throws Throwable  {
      Tree tree0 = new Tree();
      TreeLocation treeLocation0 = new TreeLocation();
      NameLN nameLN0 = new NameLN();
      nameLN0.makeDeleted();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)40;
      ChildReference childReference0 = new ChildReference((Node) nameLN0, byteArray0, (long) (byte)40, (byte) (-75));
      tree0.setRoot(childReference0, false);
      try { 
        tree0.getParentBINForChildLN(treeLocation0, (byte[]) null, (byte[]) null, nameLN0, false, true, true, true);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // 
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test003()  throws Throwable  {
      Tree tree0 = new Tree();
      DBIN dBIN0 = new DBIN();
      tree0.hook684(dBIN0);
  }

  @Test
  public void test004()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)12;
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, 10L, true);
      tree_Tree_searchSplitsAllowed0.execute();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)52;
      byteArray1[1] = (byte)52;
      byteArray1[2] = (byte) (-1);
      Tree.SearchType tree_SearchType0 = Tree.SearchType.RIGHT;
      BINBoundary bINBoundary0 = new BINBoundary();
      tree0.searchSubTree((IN) null, byteArray1, tree_SearchType0, 255L, bINBoundary0, false);
      TreeLocation treeLocation0 = new TreeLocation();
      NameLN nameLN0 = new NameLN();
      DBIN dBIN0 = new DBIN();
      treeLocation0.bin = (BIN) dBIN0;
      tree0.hook683(treeLocation0, (byte[]) null, (byte[]) null, nameLN0, true, true, true, false, true, false, nameLN0);
      IN iN0 = null;
      try {  
      iN0 = tree_Tree_searchSplitsAllowed0.insertTarget;
      } catch(NullPointerException e) {}
  }

  @Test
  public void test005()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, 1L, true);
      DBIN dBIN0 = new DBIN();
      StringWriter stringWriter0 = new StringWriter(2);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      dBIN0.dumpLog(stringBuffer0, true);
      tree_Tree_searchSplitsAllowed0.rootIN = (IN) dBIN0;
      // Undeclared exception!
      try { 
        tree0.hook686(true, true, byteArray0, tree_Tree_searchSplitsAllowed0.rootIN, tree_Tree_searchSplitsAllowed0.rootIN, tree_Tree_searchSplitsAllowed0.rootIN);
        fail("Expecting exception: ReturnObject");
      
      } catch(ReturnObject e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test006()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)79;
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (byte) (-114), true);
      boolean boolean0 = tree_Tree_searchSplitsAllowed0.rootLatchedExclusive;
      byte[] byteArray1 = new byte[5];
      byteArray0[2] = (byte)1;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)79;
      byteArray1[3] = (byte)113;
      byteArray1[4] = (byte)79;
      tree_Tree_searchSplitsAllowed0.key = byteArray1;
      DBIN dBIN0 = new DBIN();
      BIN bIN0 = tree0.getNextBin(dBIN0, true);
      assertNull(bIN0);
      
      tree0.getPrevBin(dBIN0, true);
  }

  @Test
  public void test007()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-43);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("");
      CharBuffer charBuffer0 = mS949_0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = mS949_0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        tree0.readFromLog(byteBuffer1, (byte)9);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test008()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      tree0.getParentINForChildIN((IN) dIN0, false, true);
      tree0.getLastNode();
      tree0.hook676((ArrayList) null);
      byte[] byteArray0 = new byte[0];
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (-79L), true);
      tree_Tree_searchSplitsAllowed0.execute();
      tree_Tree_searchSplitsAllowed0.hook716();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      DBIN dBIN0 = null;
      try {
        dBIN0 = new DBIN(databaseImpl0, byteArray0, 2135999778, byteArray0, 2135999778);
        fail("Expecting exception: OutOfMemoryError");
      
      } catch(OutOfMemoryError e) {
         //
         // Java heap space
         //
      }
  }

  @Test
  public void test009()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)79;
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (byte) (-114), true);
      boolean boolean0 = tree_Tree_searchSplitsAllowed0.rootLatchedExclusive;
      byte[] byteArray1 = new byte[5];
      byteArray0[2] = (byte)1;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)79;
      byteArray1[3] = (byte)113;
      byteArray1[4] = (byte)0;
      tree_Tree_searchSplitsAllowed0.key = byteArray1;
      DBIN dBIN0 = new DBIN();
      tree0.getNextBin(dBIN0, true);
      Tree.Tree_forceSplit tree_Tree_forceSplit0 = new Tree.Tree_forceSplit(tree0, (IN) null, byteArray0);
      tree_Tree_forceSplit0.success = true;
      tree_Tree_forceSplit0.index = (-1);
      long long0 = tree_Tree_forceSplit0.lastParentForSplit;
      tree0.hook673();
      assertEquals((-1L), tree0.getRootLsn());
  }

  @Test
  public void test010()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.getRootIN(true);
      tree0.hook735((IN) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-109);
      Tree.Tree_forceSplit tree_Tree_forceSplit0 = new Tree.Tree_forceSplit(tree0, (IN) null, byteArray0);
      IN iN0 = null;
      try {  
      iN0 = tree_Tree_forceSplit0.parent;
      } catch(NullPointerException e) {}
  }

  @Test
  public void test011()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      tree0.getParentINForChildIN((IN) dIN0, false, true);
      tree0.getLastNode();
      tree0.hook676((ArrayList) null);
      byte[] byteArray0 = new byte[0];
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (-79L), true);
      tree_Tree_searchSplitsAllowed0.execute();
      tree_Tree_searchSplitsAllowed0.hook716();
      Tree.Tree_forceSplit tree_Tree_forceSplit0 = new Tree.Tree_forceSplit(tree0, dIN0, byteArray0);
      tree_Tree_forceSplit0.hook724();
      IN iN0 = tree0.getFirstNode();
      assertNull(iN0);
  }

  @Test
  public void test012()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        tree0.getLastNode((DIN) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // getLastNode passed null root
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test013()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)79;
      DBIN dBIN0 = new DBIN();
      tree0.getNextBin(dBIN0, true);
      tree0.hook709(dBIN0);
      assertFalse(dBIN0.isRoot());
  }

  @Test
  public void test014()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.setCkptHook((TestHook) null);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("");
      // Undeclared exception!
      try { 
        tree0.writeToLog(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test015()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)88;
      ChildReference childReference0 = new ChildReference();
      DIN dIN0 = new DIN(databaseImpl0, byteArray0, (int) (byte)2, byteArray0, childReference0, 65536);
      DIN dIN1 = (DIN)dIN0.createNewInstance(byteArray0, (byte)2, 65536);
      Tree.Tree_forceSplit tree_Tree_forceSplit0 = new Tree.Tree_forceSplit(tree0, dIN1, byteArray0);
      tree_Tree_forceSplit0.isRootLatched = false;
      tree0.getLogSize();
      TreeLocation treeLocation0 = new TreeLocation();
      DupCountLN dupCountLN0 = new DupCountLN((int) (byte)2);
      dIN0.latchNoWait(false);
      try { 
        tree_Tree_forceSplit0.execute();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test016()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      tree0.getParentINForChildIN((IN) dIN0, false, true);
      tree0.getLastNode();
      tree0.hook676((ArrayList) null);
      byte[] byteArray0 = new byte[0];
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (-4L), true);
      tree_Tree_searchSplitsAllowed0.execute();
      // Undeclared exception!
      try { 
        tree0.hook701(false, (IN) null);
        fail("Expecting exception: ReturnObject");
      
      } catch(ReturnObject e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test017()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      tree0.getParentINForChildIN((IN) dIN0, false, true);
      tree0.getLastNode();
      tree0.hook676((ArrayList) null);
      byte[] byteArray0 = new byte[0];
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (-79L), true);
      tree_Tree_searchSplitsAllowed0.execute();
      tree_Tree_searchSplitsAllowed0.hook716();
      tree0.hook692((IN) null);
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test018()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook702();
      DBIN dBIN0 = new DBIN();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-24);
      Tree.Tree_forceSplit tree_Tree_forceSplit0 = new Tree.Tree_forceSplit(tree0, dBIN0, byteArray0);
      try { 
        tree_Tree_forceSplit0.execute();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test019()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)4;
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (-1L), false);
      tree_Tree_searchSplitsAllowed0.rootLatched = true;
      tree_Tree_searchSplitsAllowed0.nid = (-1L);
      byte[] byteArray1 = tree_Tree_searchSplitsAllowed0.key;
      tree_Tree_searchSplitsAllowed0.env = null;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      SearchResult searchResult0 = tree0.getParentINForChildIN((long) (byte)4, false, false, byteArray1, byteArray1, false, false, (int) (byte)4, (List) arrayList0, false);
      assertTrue(searchResult0.keepSearching);
  }

  @Test
  public void test020()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook752();
      assertEquals(0L, tree0.getTransactionId());
  }

  @Test
  public void test021()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)0;
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (byte) (-38), true);
      tree_Tree_searchSplitsAllowed0._this = tree0;
      DBIN dBIN0 = new DBIN();
      Tree.SearchType tree_SearchType0 = Tree.SearchType.NORMAL;
      BINBoundary bINBoundary0 = new BINBoundary();
      DBIN dBIN1 = (DBIN)tree_Tree_searchSplitsAllowed0._this.searchSubTree(dBIN0, byteArray0, tree_SearchType0, (byte)10, bINBoundary0, true);
      dBIN0.isEvictionProhibited();
      tree0.getParentINForChildIN((IN) dBIN1, false, true);
      // Undeclared exception!
      try { 
        tree_Tree_searchSplitsAllowed0._this.withRootLatchedShared((WithRootLatched) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test022()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.getLastNode();
      TreeLocation treeLocation0 = new TreeLocation();
      NameLN nameLN0 = new NameLN();
      nameLN0.makeDeleted();
      tree0.getParentBINForChildLN(treeLocation0, (byte[]) null, (byte[]) null, nameLN0, true, true, true, true);
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, (byte[]) null, (-1L), false);
      tree_Tree_searchSplitsAllowed0.insertTarget = (IN) null;
      long long0 = tree_Tree_searchSplitsAllowed0.nid;
      tree0.getLastNode();
      // Undeclared exception!
      try { 
        tree0.withRootLatchedShared((WithRootLatched) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)88;
      ChildReference childReference0 = new ChildReference();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      tree0.hook693((IN) null);
      //  // Unstable assertion: assertEquals(495L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test024()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)0;
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (byte) (-38), true);
      tree_Tree_searchSplitsAllowed0._this = tree0;
      DBIN dBIN0 = new DBIN();
      Tree.SearchType tree_SearchType0 = Tree.SearchType.NORMAL;
      BINBoundary bINBoundary0 = new BINBoundary();
      tree_Tree_searchSplitsAllowed0._this.searchSubTree(dBIN0, byteArray0, tree_SearchType0, (byte) (-4), bINBoundary0, true);
      dBIN0.isEvictionProhibited();
      // Undeclared exception!
      try { 
        tree0.getParentINForChildIN((IN) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // getParentNode passed null
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test025()  throws Throwable  {
      Tree tree0 = new Tree();
      TreeLocation treeLocation0 = new TreeLocation();
      // Undeclared exception!
      try { 
        tree0.getNextBin((BIN) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test026()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)88;
      ChildReference childReference0 = new ChildReference();
      DIN dIN0 = new DIN(databaseImpl0, byteArray0, (int) (byte)0, byteArray0, childReference0, 65536);
      tree0.hook750((BIN) null);
      //  // Unstable assertion: assertEquals(489L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DIN dIN0 = new DIN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      Tree.SearchType tree_SearchType0 = Tree.SearchType.RIGHT;
      BINBoundary bINBoundary0 = new BINBoundary();
      // Undeclared exception!
      try { 
        tree0.searchSubTree(dIN0, byteArray0, tree_SearchType0, 9223372036854775807L, bINBoundary0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // searchSubTree passed key and left/right search
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test028()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.dumpString(1);
      // Undeclared exception!
      try { 
        tree0.validateINList((IN) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test029()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      tree0.getParentINForChildIN((IN) dIN0, false, true);
      tree0.getLastNode();
      tree0.hook676((ArrayList) null);
      byte[] byteArray0 = new byte[0];
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (-79L), true);
      tree_Tree_searchSplitsAllowed0.execute();
      tree_Tree_searchSplitsAllowed0.hook716();
      tree0.hook740((IN) null);
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test030()  throws Throwable  {
      Tree tree0 = new Tree();
      DBIN dBIN0 = new DBIN();
      Tree.SearchType tree_SearchType0 = Tree.SearchType.NORMAL;
      BINBoundary bINBoundary0 = new BINBoundary();
      dBIN0.isEvictionProhibited();
      tree0.hook754(dBIN0);
      assertTrue(dBIN0.marshallOutsideWriteLatch());
  }

  @Test
  public void test031()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.getLastNode();
      tree0.setWaitHook((TestHook) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)27;
      DIN dIN0 = new DIN();
      dIN0.updateDupCountLNRef(0L);
      Tree.Tree_forceSplit tree_Tree_forceSplit0 = new Tree.Tree_forceSplit(tree0, dIN0, byteArray0);
      tree_Tree_forceSplit0.success = false;
      DIN dIN1 = new DIN();
      tree0.hook677(dIN1);
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (-970), true);
      boolean boolean0 = tree_Tree_searchSplitsAllowed0.rootLatchedExclusive;
      assertFalse(boolean0);
  }

  @Test
  public void test032()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      tree0.getParentINForChildIN((IN) dIN0, false, true);
      tree0.hook676((ArrayList) null);
      byte[] byteArray0 = new byte[0];
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (-79L), true);
      tree_Tree_searchSplitsAllowed0.execute();
      tree_Tree_searchSplitsAllowed0.hook716();
      SearchResult searchResult0 = tree0.getParentINForChildIN((IN) dIN0, false, false, 0, (List) null);
      assertTrue(searchResult0.keepSearching);
  }

  @Test
  public void test033()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      SearchResult searchResult0 = tree0.getParentINForChildIN((IN) dIN0, false, true);
      searchResult0.parent = (IN) dIN0;
      tree0.getLastNode();
      tree0.hook676((ArrayList) null);
      byte[] byteArray0 = new byte[0];
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (-79L), true);
      tree_Tree_searchSplitsAllowed0.execute();
      tree_Tree_searchSplitsAllowed0.hook716();
      // Undeclared exception!
      try { 
        tree0.hook698(dIN0, byteArray0, 1364L, false, (-2248), (IN) null);
        fail("Expecting exception: ReturnObject");
      
      } catch(ReturnObject e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test034()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      tree0.getParentINForChildIN((IN) dIN0, false, true);
      tree0.getLastNode();
      tree0.hook676((ArrayList) null);
      byte[] byteArray0 = new byte[0];
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (-79L), true);
      tree_Tree_searchSplitsAllowed0.execute();
      tree_Tree_searchSplitsAllowed0.hook716();
      // Undeclared exception!
      try { 
        tree0.hook698((IN) null, byteArray0, (-1L), true, 2135999778, (IN) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test035()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)2;
      byteArray0[1] = (byte)88;
      ChildReference childReference0 = new ChildReference();
      DIN dIN0 = new DIN(databaseImpl0, byteArray0, (int) (byte)0, byteArray0, childReference0, 65549);
      DIN dIN1 = (DIN)dIN0.createNewInstance(byteArray0, (byte)2, 65549);
      Tree tree0 = new Tree();
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (-643L), false);
      tree_Tree_searchSplitsAllowed0.hook718();
      Tree.Tree_forceSplit tree_Tree_forceSplit0 = new Tree.Tree_forceSplit(tree0, dIN1, byteArray0);
      tree_Tree_forceSplit0.origParent = (IN) dIN0;
      tree0.hook690(dIN0);
      //  // Unstable assertion: assertEquals(430L, dIN0.getLastId());
      //  // Unstable assertion: assertEquals(428L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test036()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.getRootIN(false);
      tree0.hook734((IN) null);
      tree0.hook680((IN) null);
      tree0.hook751();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)40;
  }

  @Test
  public void test037()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      byte[] byteArray0 = new byte[2];
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig();
      byteArray0[1] = (byte)75;
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (byte)75, false);
      tree_Tree_searchSplitsAllowed0.hook719();
      tree0.logEntryIsTransactional();
      TreeLocation treeLocation0 = new TreeLocation();
      assertEquals(0, treeLocation0.index);
  }

  @Test
  public void test038()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      byte[] byteArray0 = new byte[5];
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig();
      tree0.logEntryIsTransactional();
      TreeLocation treeLocation0 = new TreeLocation();
      assertEquals(0, treeLocation0.index);
  }

  @Test
  public void test039()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.validateINList((IN) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test040()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)79;
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (byte) (-114), false);
      boolean boolean0 = tree_Tree_searchSplitsAllowed0.rootLatchedExclusive;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)79;
      byteArray1[3] = (byte)113;
      byteArray1[4] = (byte)79;
      tree_Tree_searchSplitsAllowed0.key = byteArray1;
      DBIN dBIN0 = new DBIN();
      tree0.getNextBin(dBIN0, false);
  }

  @Test
  public void test041()  throws Throwable  {
      Tree tree0 = new Tree();
      long long0 = tree0.getTransactionId();
      assertEquals(0L, long0);
      
      DBIN dBIN0 = new DBIN();
      tree0.hook679(dBIN0);
      DIN dIN0 = new DIN();
      tree0.hook678(dIN0);
      long long1 = tree0.getRootLsn();
      assertEquals((-1L), long1);
  }

  @Test
  public void test042()  throws Throwable  {
      Tree tree0 = new Tree();
      DBIN dBIN0 = new DBIN();
      tree0.hook679(dBIN0);
      DIN dIN0 = new DIN();
      long long0 = tree0.getRootLsn();
      assertEquals((-1L), long0);
  }

  @Test
  public void test043()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)18;
      tree0.searchSplitsAllowed(byteArray0, (byte)18, true);
      Tree.Tree_forceSplit tree_Tree_forceSplit0 = new Tree.Tree_forceSplit(tree0, (IN) null, byteArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        tree0.getParentINForChildIN((IN) null, true, true, 409, (List) arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // getParentNode passed null
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test044()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[8];
      NameLN nameLN0 = new NameLN();
      tree0.makeRootChildReference(nameLN0, byteArray0, 0L);
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[7] = (byte)1;
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, 0L, true);
      tree_Tree_searchSplitsAllowed0.updateGeneration = true;
      tree_Tree_searchSplitsAllowed0.execute();
      tree0.hook699((IN) null);
      assertEquals(0L, tree0.getTransactionId());
  }

  @Test
  public void test045()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)88;
      ChildReference childReference0 = new ChildReference();
      DIN dIN0 = new DIN(databaseImpl0, byteArray0, (int) (byte)2, byteArray0, childReference0, 65536);
      dIN0.createNewInstance(byteArray0, (byte)2, 65536);
      Tree tree0 = new Tree();
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (-643L), false);
      tree_Tree_searchSplitsAllowed0.hook718();
  }

  @Test
  public void test046()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(1245);
      DatabaseConfig databaseConfig0 = DatabaseConfig.DEFAULT;
      databaseId0.getBytes();
      DIN dIN0 = new DIN();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      stringWriter1.getBuffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)0;
      Tree tree0 = new Tree();
      tree0.hook744(dIN0);
      assertEquals("<din>", dIN0.beginTag());
  }

  @Test
  public void test047()  throws Throwable  {
      Tree tree0 = new Tree();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)87;
      ChildReference childReference0 = new ChildReference();
      DIN dIN0 = new DIN(databaseImpl0, byteArray0, (int) (byte)0, byteArray0, childReference0, (int) (byte)0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)87;
      dIN0.adjustCursorsForInsert(2124878556);
      DIN dIN1 = (DIN)dIN0.createNewInstance(byteArray1, (byte)87, (byte)0);
      tree0.hook662(dIN1, (byte)87, (byte)0, dIN1);
      //  // Unstable assertion: assertEquals(358L, dIN1.getLastId());
      //  // Unstable assertion: assertEquals(356L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test048()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.getLastNode();
      tree0.hook695((IN) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, 1666, false);
      tree_Tree_searchSplitsAllowed0.hook720();
  }

  @Test
  public void test049()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      tree0.hook705(dIN0);
      assertEquals(0, dIN0.getLevel());
  }

  @Test
  public void test050()  throws Throwable  {
      Tree tree0 = new Tree();
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-54);
      tree0.setTreeStatsAccumulator((TreeWalkerStatsAccumulator) null);
      ChildReference childReference0 = new ChildReference((Node) fileSummaryLN0, byteArray0, (long) (byte) (-71), (byte)87);
      DIN dIN0 = new DIN(databaseImpl0, byteArray0, 1, byteArray0, childReference0, 5632);
      // Undeclared exception!
      try { 
        tree0.getFirstNode(dIN0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sleepycat.je.tree.DIN cannot be cast to com.sleepycat.je.tree.DBIN
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test051()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      tree0.getFirstNode();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)0;
      Tree.SearchType tree_SearchType0 = Tree.SearchType.NORMAL;
      tree0.searchSubTree((IN) null, byteArray0, tree_SearchType0, (byte)103, (BINBoundary) null, false);
      tree0.hook681((IN) null);
      tree0.hook679((IN) null);
      TreeLocation treeLocation0 = new TreeLocation();
      assertEquals(0, treeLocation0.index);
  }

  @Test
  public void test052()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.getDatabase();
      byte[] byteArray0 = new byte[0];
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, 0L, false);
      tree_Tree_searchSplitsAllowed0.updateGeneration = true;
      tree_Tree_searchSplitsAllowed0.nid = (-327L);
      tree_Tree_searchSplitsAllowed0.updateGeneration = true;
      EnvironmentImpl environmentImpl0 = null;
      try {  
      environmentImpl0 = tree_Tree_searchSplitsAllowed0.env;
      } catch(NullPointerException e) {}
  }

  @Test
  public void test053()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)123;
      Tree.Tree_forceSplit tree_Tree_forceSplit0 = new Tree.Tree_forceSplit(tree0, (IN) null, byteArray0);
      tree_Tree_forceSplit0.hook727();
  }

  @Test
  public void test054()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook746((CursorImpl) null);
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test055()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook732();
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)85;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)0;
      Tree.Tree_forceSplit tree_Tree_forceSplit0 = new Tree.Tree_forceSplit(tree0, dIN0, byteArray0);
      tree_Tree_forceSplit0.hook726();
  }

  @Test
  public void test056()  throws Throwable  {
      Tree tree0 = new Tree();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-52);
      ChildReference childReference0 = new ChildReference();
      DIN dIN0 = new DIN(databaseImpl0, byteArray0, 1979, byteArray0, childReference0, 0);
      DIN dIN1 = (DIN)dIN0.createNewInstance(byteArray0, 0, (-1282));
      dIN0.updateDupCountLN(dIN1);
      childReference0.setLsn(100L);
      tree0.makeRootChildReference(dIN1, byteArray0, 9223372036854775807L);
      // Undeclared exception!
      try { 
        tree0.dumpLog((StringBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test057()  throws Throwable  {
      Tree tree0 = new Tree();
      TreeLocation treeLocation0 = new TreeLocation();
      tree0.dump();
      tree0.hook731(treeLocation0);
      tree0.hook732();
      tree0.hook745((CursorImpl) null);
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)60;
      byteArray1[2] = (byte)60;
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte)60;
      byteArray1[5] = (byte)60;
      byteArray1[6] = (byte)60;
      byteArray1[7] = (byte)60;
      Tree.Tree_forceSplit tree_Tree_forceSplit0 = new Tree.Tree_forceSplit(tree0, dIN0, byteArray1);
      ArrayList arrayList0 = null;
      try {  
      arrayList0 = tree_Tree_forceSplit0.nodeLadder;
      } catch(NullPointerException e) {}
  }

  @Test
  public void test058()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.getPrevBin((BIN) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test059()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)0;
      LN lN0 = new LN(byteArray0);
      DBIN dBIN0 = new DBIN();
      lN0.postFetchInit(databaseImpl0, (byte) (-70));
      tree0.hook660(lN0, (byte)75, dBIN0, (byte)0);
      ChildReference childReference0 = new ChildReference();
      DIN dIN0 = null;
      try {
        dIN0 = new DIN(databaseImpl0, byteArray0, (int) (byte) (-70), byteArray0, childReference0, 2135999778);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test060()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.dumpString((-1569));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1569
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test061()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (byte)0, false);
      tree_Tree_searchSplitsAllowed0.hook721();
  }

  @Test
  public void test063()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[0];
      ChildReference childReference0 = new ChildReference();
      tree0.setRoot(childReference0, true);
      try { 
        tree0.searchSplitsAllowed(byteArray0, 2036L, false);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // fetchTarget of null lsn state=0 NULL_LSN without KnownDeleted
         //
         assertThrownBy("com.sleepycat.je.tree.ChildReference", e);
      }
  }

  @Test
  public void test064()  throws Throwable  {
      Tree tree0 = new Tree();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("[ (G");
      tree0.readFromLog(byteBuffer0, (byte)76);
      assertFalse(byteBuffer0.isDirect());
  }

  @Test
  public void test065()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.readFromLog((ByteBuffer) null, (byte)102);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test066()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.validateDelete(131072);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test067()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook661();
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test068()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      tree0.getRootIN(false);
      tree0.hook682((IN) null);
      TreeLocation treeLocation0 = new TreeLocation();
      tree0.hook683(treeLocation0, (byte[]) null, (byte[]) null, (LN) null, false, false, false, true, false, false, (Node) null);
      // Undeclared exception!
      try { 
        tree0.hook686(true, true, (byte[]) null, (IN) null, (IN) null, (IN) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test069()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.rebuildINList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test070()  throws Throwable  {
      Tree tree0 = new Tree();
      MapLN mapLN0 = new MapLN();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        tree0.insert(mapLN0, byteArray0, true, (CursorImpl) null, (LockResult) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test071()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.withRootLatchedExclusive((WithRootLatched) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test072()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      tree0.getParentINForChildIN((IN) dIN0, false, true);
      tree0.getLastNode();
      tree0.hook676((ArrayList) null);
      byte[] byteArray0 = new byte[0];
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (-79L), false);
      tree_Tree_searchSplitsAllowed0.execute();
      tree_Tree_searchSplitsAllowed0.hook716();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("`");
      tree0.writeToLog(byteBuffer0);
      assertEquals((-1L), tree0.getRootLsn());
  }

  @Test
  public void test073()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.getTreeStats();
      TreeLocation treeLocation0 = new TreeLocation();
      MapLN mapLN0 = new MapLN();
      Tree.SearchType tree_SearchType0 = Tree.SearchType.NORMAL;
      BINBoundary bINBoundary0 = new BINBoundary();
      IN iN0 = tree0.search((byte[]) null, tree_SearchType0, 0L, bINBoundary0, false);
      assertNull(iN0);
  }

  @Test
  public void test074()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.hook715((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test075()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)39;
      tree0.searchSplitsAllowed(byteArray0, (byte)39, false);
      tree0.hook736((IN) null);
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test076()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.getFirstNode((DIN) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // getFirstNode passed null root
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test077()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.setSearchHook((TestHook) null);
      // Undeclared exception!
      try { 
        tree0.hook670((WithRootLatched) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test078()  throws Throwable  {
      Tree tree0 = new Tree();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[0];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, (long) 5803, (byte)0);
      DIN dIN0 = new DIN(databaseImpl0, byteArray0, 5803, byteArray0, childReference0, (int) (byte)0);
      tree0.hook710(dIN0);
      //  // Unstable assertion: assertEquals(239L, dIN0.getLastId());
      //  // Unstable assertion: assertEquals(238L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test079()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.getLastNode();
      tree0.dump();
      tree0.hook689((IN) null);
      tree0.hook687();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      DBIN dBIN0 = new DBIN();
      //  // Unstable assertion: assertEquals(214L, dBIN0.getLastId());
  }

  @Test
  public void test080()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      tree0.hook733();
      //  // Unstable assertion: assertEquals(211L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test081()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (-131L), false);
      Tree.SearchType tree_SearchType0 = Tree.SearchType.LEFT;
      BINBoundary bINBoundary0 = new BINBoundary();
      tree0.searchSubTree((IN) null, byteArray0, tree_SearchType0, (-131L), bINBoundary0, true);
      tree_Tree_searchSplitsAllowed0.insertTarget = null;
  }

  @Test
  public void test082()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      DBIN dBIN0 = new DBIN();
      tree0.hook742(dBIN0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-1);
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (byte)0, false);
      //  // Unstable assertion: assertEquals(197L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test083()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[0];
      tree0.searchSplitsAllowed(byteArray0, 2036L, false);
      tree0.makeRootChildReference((Node) null, byteArray0, 2135999778);
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        tree0.getLastNode(dIN0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sleepycat.je.tree.DIN cannot be cast to com.sleepycat.je.tree.DBIN
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test084()  throws Throwable  {
      Tree tree0 = new Tree();
      // Undeclared exception!
      try { 
        tree0.hook671((WithRootLatched) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test085()  throws Throwable  {
      Tree tree0 = new Tree();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      tree0.dumpLog(stringBuffer0, false);
      //  // Unstable assertion: assertEquals(13, stringBuffer0.length());
      
      tree0.hook729();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-10);
      LN lN0 = new LN();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-10);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-10);
      ChildReference childReference0 = new ChildReference((Node) lN0, byteArray1, 868L);
      //  // Unstable assertion: assertEquals(182L, lN0.getLastId());
      
      DIN dIN0 = new DIN(databaseImpl0, byteArray0, 577, byteArray0, childReference0, 43);
      tree0.hook707(dIN0);
      //  // Unstable assertion: assertEquals(188L, dIN0.getLastId());
      //  // Unstable assertion: assertEquals(187L, databaseImpl0.getEofNodeId());
  }

  @Test
  public void test086()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      // Undeclared exception!
      try { 
        tree0.setDatabase(databaseImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test087()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)0;
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (byte)0, true);
      tree_Tree_searchSplitsAllowed0._this = tree0;
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      tree0.hook697(arrayList0);
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.getCursorBINToBeRemoved((CursorImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DBIN", e);
      }
  }

  @Test
  public void test088()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook728();
      tree0.setCkptHook((TestHook) null);
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test089()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        tree0.getFirstNode(dIN0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sleepycat.je.tree.DIN cannot be cast to com.sleepycat.je.tree.DBIN
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test090()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.hook748();
      byte[] byteArray0 = new byte[0];
      tree0.delete(byteArray0, (UtilizationTracker) null);
      tree0.hook753();
      assertFalse(tree0.logEntryIsTransactional());
  }

  @Test
  public void test091()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)100;
      UtilizationTracker utilizationTracker0 = null;
      TreeLocation treeLocation0 = new TreeLocation();
      DIN dIN0 = new DIN();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)58;
      LN lN0 = new LN(byteArray1);
      // Undeclared exception!
      try { 
        tree0.hook685(treeLocation0, byteArray0, dIN0, lN0, true, true, true, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test093()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = databaseImpl0.getTree();
      tree0.getRootIN(false);
      tree0.hook682((IN) null);
      TreeLocation treeLocation0 = new TreeLocation();
      tree0.hook683(treeLocation0, (byte[]) null, (byte[]) null, (LN) null, false, false, false, true, false, false, (Node) null);
      // Undeclared exception!
      try { 
        tree0.hook686(false, true, (byte[]) null, (IN) null, (IN) null, (IN) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // getParentNode passed null
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test095()  throws Throwable  {
      Tree tree0 = new Tree();
      DIN dIN0 = new DIN();
      tree0.getParentINForChildIN((IN) dIN0, false, true);
      tree0.getLastNode();
      tree0.hook676((ArrayList) null);
      byte[] byteArray0 = new byte[0];
      long long0 = (-79L);
      // Undeclared exception!
      try { 
        tree0.hook670((WithRootLatched) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test097()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)25;
      byteArray0[0] = (byte)25;
      byte byte1 = (byte)75;
      byteArray0[1] = (byte)75;
      byte byte2 = (byte)23;
      byteArray0[2] = (byte)23;
      boolean boolean0 = false;
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (byte)75, false);
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        tree0.getFirstNode(dIN0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sleepycat.je.tree.DIN cannot be cast to com.sleepycat.je.tree.DBIN
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test098()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, byteArray0, (byte) (-38), true);
      tree_Tree_searchSplitsAllowed0._this = tree0;
      DBIN dBIN0 = new DBIN();
      Tree.SearchType tree_SearchType0 = Tree.SearchType.NORMAL;
      BINBoundary bINBoundary0 = new BINBoundary();
      tree_Tree_searchSplitsAllowed0._this.searchSubTree(dBIN0, byteArray0, tree_SearchType0, (byte)0, bINBoundary0, true);
      dBIN0.isEvictionProhibited();
      // Undeclared exception!
      try { 
        tree0.getParentINForChildIN((IN) null, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // getParentNode passed null
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test099()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)88;
      ChildReference childReference0 = new ChildReference();
      DIN dIN0 = new DIN(databaseImpl0, byteArray0, (int) (byte)2, byteArray0, childReference0, 65536);
      DIN dIN1 = (DIN)dIN0.createNewInstance(byteArray0, (byte)2, 65536);
      Tree.Tree_forceSplit tree_Tree_forceSplit0 = new Tree.Tree_forceSplit(tree0, dIN1, byteArray0);
      tree_Tree_forceSplit0.isRootLatched = false;
      tree0.getLogSize();
      TreeLocation treeLocation0 = new TreeLocation();
      DupCountLN dupCountLN0 = new DupCountLN((int) (byte)2);
      // Undeclared exception!
      try { 
        tree0.hook683(treeLocation0, (byte[]) null, (byte[]) null, dupCountLN0, false, false, false, false, false, true, dIN1);
        fail("Expecting exception: ReturnBoolean");
      
      } catch(ReturnBoolean e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test100()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      Tree tree0 = null;
      try {
        tree0 = new Tree(databaseImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test101()  throws Throwable  {
      Tree tree0 = new Tree();
      byte[] byteArray0 = new byte[0];
      tree0.searchSplitsAllowed(byteArray0, 2036L, false);
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        tree0.getLastNode(dIN0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sleepycat.je.tree.DIN cannot be cast to com.sleepycat.je.tree.DBIN
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }

  @Test
  public void test102()  throws Throwable  {
      Tree tree0 = new Tree();
      tree0.getFirstNode();
      TreeLocation treeLocation0 = new TreeLocation();
      NameLN nameLN0 = new NameLN();
      nameLN0.makeDeleted();
      tree0.getParentBINForChildLN(treeLocation0, (byte[]) null, (byte[]) null, nameLN0, false, true, true, true);
      Tree.Tree_searchSplitsAllowed tree_Tree_searchSplitsAllowed0 = new Tree.Tree_searchSplitsAllowed(tree0, (byte[]) null, (-1L), false);
      tree_Tree_searchSplitsAllowed0.insertTarget = (IN) null;
      long long0 = tree_Tree_searchSplitsAllowed0.nid;
      tree_Tree_searchSplitsAllowed0.execute();
      // Undeclared exception!
      try { 
        tree0.withRootLatchedShared((WithRootLatched) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Tree", e);
      }
  }
}
