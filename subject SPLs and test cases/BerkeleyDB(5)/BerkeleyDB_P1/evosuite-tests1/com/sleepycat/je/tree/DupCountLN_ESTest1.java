/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 20:31:44 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class DupCountLN_ESTest1 extends DupCountLN_ESTest_scaffolding1 {

  @Test
  public void test00()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      int int0 = dupCountLN0.getDupCount();
      assertEquals(0, int0);
  }

  @Test
  public void test01()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(449);
      int int0 = dupCountLN0.getDupCount();
      assertEquals(449, int0);
  }

  @Test
  public void test02()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      dupCountLN0.incDupCount();
      assertEquals(1, dupCountLN0.getDupCount());
      
      int int0 = dupCountLN0.decDupCount();
      assertEquals(0, int0);
  }

  @Test
  public void test03()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN((-1));
      int int0 = dupCountLN0.incDupCount();
      assertEquals(0, dupCountLN0.getDupCount());
      assertEquals(0, int0);
  }

  @Test
  public void test04()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN((-1));
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      dupCountLN0.dumpLogAdditional(stringBuffer0, false);
      //  // Unstable assertion: assertEquals(15, stringBuffer0.length());
      //  // Unstable assertion: assertEquals(121L, dupCountLN0.getNodeId());
  }

  @Test
  public void test05()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("");
      // Undeclared exception!
      try { 
        dupCountLN0.writeToLog(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      // Undeclared exception!
      try { 
        dupCountLN0.writeToLog((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      DupCountLN dupCountLN0 = new DupCountLN((int) '{');
      ByteBuffer byteBuffer0 = mS949_0.encode("<dupCountLN>");
      // Undeclared exception!
      try { 
        dupCountLN0.readFromLog(byteBuffer0, (byte) (-19));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(0);
      // Undeclared exception!
      try { 
        dupCountLN0.readFromLog((ByteBuffer) null, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      // Undeclared exception!
      try { 
        dupCountLN0.getLogSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      String string0 = dupCountLN0.dumpString(16, true);
      assertEquals("                <dupCountLN>\n                  <count v=\"0\"/>\n                  <node>0</node>\n                </dupCountLN>", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN((-2263));
      // Undeclared exception!
      try { 
        dupCountLN0.dumpString((-2263), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2263
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      String string0 = dupCountLN0.beginTag();
      assertEquals(0, dupCountLN0.getDupCount());
      assertEquals("<dupCountLN>", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      boolean boolean0 = dupCountLN0.isDeleted();
      assertEquals(0, dupCountLN0.getDupCount());
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      String string0 = dupCountLN0.endTag();
      assertEquals("</dupCountLN>", string0);
      assertEquals(0, dupCountLN0.getDupCount());
  }

  @Test
  public void test15()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      String string0 = dupCountLN0.dumpString(2, false);
      assertEquals("    <count v=\"0\"/>\n    <node>0</node>\n", string0);
  }

  @Test
  public void test17()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(458);
      int int0 = dupCountLN0.decDupCount();
      assertEquals(457, dupCountLN0.getDupCount());
      assertEquals(457, int0);
  }

  @Test
  public void test19()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(458);
      int int0 = dupCountLN0.getLogSize();
      //  // Unstable assertion: assertEquals(24L, dupCountLN0.getNodeId());
      //  // Unstable assertion: assertEquals(17, int0);
  }

  @Test
  public void test20()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(458);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("d7#Q/?>)~MrNfs8|a\"");
      dupCountLN0.writeToLog(byteBuffer0);
      //  // Unstable assertion: assertEquals("java.nio.HeapByteBuffer[pos=17 lim=18 cap=36]", byteBuffer0.toString());
      //  // Unstable assertion: assertEquals(16L, dupCountLN0.getLastId());
  }

  @Test
  public void test21()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      dupCountLN0.getLogType();
      assertEquals(0, dupCountLN0.getDupCount());
  }

  @Test
  public void test22()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      dupCountLN0.getTransactionalLogType();
      assertEquals(0, dupCountLN0.getDupCount());
  }

  @Test
  public void test23()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(0);
      // Undeclared exception!
      try { 
        dupCountLN0.dumpLogAdditional((StringBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DupCountLN", e);
      }
  }

  @Test
  public void test24()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      boolean boolean0 = dupCountLN0.containsDuplicates();
      assertTrue(boolean0);
      assertEquals(0, dupCountLN0.getDupCount());
  }

  @Test
  public void test25()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      String string0 = dupCountLN0.toString();
      assertEquals("<dupCountLN>\n  <count v=\"0\"/>\n  <node>0</node>\n</dupCountLN>", string0);
  }

  @Test
  public void test26()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("`mOf|Ed\"=VXy ");
      dupCountLN0.readFromLog(byteBuffer0, (byte)0);
      assertFalse(dupCountLN0.logEntryIsTransactional());
  }

  @Test
  public void test27()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN((-3957));
      int int0 = dupCountLN0.getDupCount();
      assertEquals((-3957), int0);
  }
}
