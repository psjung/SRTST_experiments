/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 15:51:07 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.dbi.DatabaseImpl;

import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class ChildReference_ESTest4 extends ChildReference_ESTest_scaffolding4 {

  @Test
  public void test00()  throws Throwable  {
      LN lN0 = new LN();
      byte[] byteArray0 = new byte[0];
      ChildReference childReference0 = new ChildReference((Node) lN0, byteArray0, 261L);
      DupCountLN dupCountLN0 = new DupCountLN((-1557));
      childReference0.setTarget(dupCountLN0);
      DupCountLN dupCountLN1 = (DupCountLN)childReference0.getTarget();
      //  // Unstable assertion: assertEquals(385L, dupCountLN1.getLastId());
  }

  @Test
  public void test01()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      byte byte0 = childReference0.getState();
      assertEquals((byte)0, byte0);
      assertEquals((-1L), childReference0.getLsn());
  }

  @Test
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      LN lN0 = new LN(byteArray0);
      ChildReference childReference0 = new ChildReference((Node) lN0, byteArray0, (long) (byte) (-44), (byte) (-8));
      byte byte0 = childReference0.getState();
      //  // Unstable assertion: assertEquals(369L, lN0.getNodeId());
      //  // Unstable assertion: assertEquals((byte) (-6), byte0);
  }

  @Test
  public void test03()  throws Throwable  {
      LN lN0 = new LN();
      byte[] byteArray0 = new byte[0];
      ChildReference childReference0 = new ChildReference((Node) lN0, byteArray0, 261L);
      long long0 = childReference0.getLsn();
      assertFalse(childReference0.isKnownDeleted());
      assertEquals(261L, long0);
      assertFalse(childReference0.getMigrate());
  }

  @Test
  public void test04()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(1978);
      byte[] byteArray0 = new byte[4];
      ChildReference childReference0 = new ChildReference((Node) dupCountLN0, byteArray0, (long) (byte)85, (byte)2);
      childReference0.setKey((byte[]) null);
      childReference0.getKey();
      //  // Unstable assertion: assertEquals(347L, dupCountLN0.getLastId());
      //  // Unstable assertion: assertEquals(347L, dupCountLN0.getNodeId());
  }

  @Test
  public void test05()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      childReference0.getKey();
      assertFalse(childReference0.isKnownDeleted());
      assertEquals((-1L), childReference0.getLsn());
  }

  @Test
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      LN lN0 = new LN(byteArray0);
      ChildReference childReference0 = new ChildReference((Node) lN0, byteArray0, (-4369L));
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      BIN bIN0 = new BIN();
      LN lN1 = (LN)childReference0.fetchTarget(databaseImpl0, bIN0);
      //  // Unstable assertion: assertEquals(328L, lN1.getLastId());
  }

  @Test
  public void test07()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      childReference0.setMigrate(true);
      childReference0.setMigrate(true);
      assertTrue(childReference0.getMigrate());
      assertFalse(childReference0.isKnownDeleted());
  }

  @Test
  public void test08()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      byte[] byteArray0 = new byte[0];
      childReference0.setKey(byteArray0);
      childReference0.setLsn((-257L));
      assertEquals((-257L), childReference0.getLsn());
  }

  @Test
  public void test09()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      childReference0.dumpLog(stringBuffer0, true);
      assertEquals("<ref knownDeleted=\"false\" pendingDeleted=\"false\"><key v=\"\"/><DbLsn val=\"0xffffffff/0xffffffff\"/></ref>", stringBuffer0.toString());
      assertEquals("<ref knownDeleted=\"false\" pendingDeleted=\"false\"><key v=\"\"/><DbLsn val=\"0xffffffff/0xffffffff\"/></ref>", stringWriter0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, (-127L), (byte)88);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("p3?bO'}");
      // Undeclared exception!
      try { 
        childReference0.writeToLog(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.HeapByteBuffer", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      // Undeclared exception!
      try { 
        childReference0.writeToLog((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("W|SI[c+Inv[");
      // Undeclared exception!
      try { 
        childReference0.readFromLog(byteBuffer0, (byte) (-1));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.HeapByteBuffer", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      // Undeclared exception!
      try { 
        childReference0.dumpString(310, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 310
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      boolean boolean0 = childReference0.isKnownDeleted();
      assertFalse(boolean0);
      assertEquals((-1L), childReference0.getLsn());
  }

  @Test
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, (long) (byte)0, (byte)1);
      IN iN0 = new IN();
      childReference0.hook613(iN0);
      assertFalse(childReference0.getMigrate());
      assertTrue(childReference0.isKnownDeleted());
  }

  @Test
  public void test16()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      assertEquals((-1L), childReference0.getLsn());
      
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      childReference0.setLsn(0L);
      ByteBuffer byteBuffer0 = mS949_0.encode("Rn3,}r;zj3-Sh)~1");
      childReference0.writeToLog(byteBuffer0);
      assertFalse(childReference0.getMigrate());
  }

  @Test
  public void test18()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      childReference0.setMigrate(false);
      assertFalse(childReference0.isKnownDeleted());
      assertEquals((-1L), childReference0.getLsn());
      assertFalse(childReference0.getMigrate());
  }

  @Test
  public void test19()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(1978);
      byte[] byteArray0 = new byte[4];
      ChildReference childReference0 = new ChildReference((Node) dupCountLN0, byteArray0, (long) (byte)85, (byte)2);
      childReference0.setMigrate(true);
      boolean boolean0 = childReference0.getMigrate();
      //  // Unstable assertion: assertEquals(290L, dupCountLN0.getLastId());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, (-127L), (byte)88);
      boolean boolean0 = childReference0.getMigrate();
      assertEquals((-127L), childReference0.getLsn());
      assertFalse(boolean0);
      assertFalse(childReference0.isKnownDeleted());
  }

  @Test
  public void test21()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      String string0 = childReference0.dumpString(119, false);
      assertEquals("                                                                                                                       <lsn/>\n                                                                                                                       <key v=\"\"/>\n                                                                                                                       <target/>\n                                                                                                                       <knownDeleted val=\"false\"/><pendingDeleted val=\"false\"/><dirty val=\"false\"/>", string0);
  }

  @Test
  public void test22()  throws Throwable  {
      IN iN0 = new IN();
      byte[] byteArray0 = new byte[6];
      ChildReference childReference0 = new ChildReference((Node) iN0, byteArray0, (long) (byte) (-95), (byte) (-91));
      boolean boolean0 = childReference0.isKnownDeleted();
      assertEquals((-95L), childReference0.getLsn());
      assertTrue(boolean0);
      assertTrue(childReference0.getMigrate());
  }

  @Test
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, (-127L), (byte)88);
      String string0 = childReference0.toString();
      assertEquals("<DbLsn val=\"0xffffffff/0xffffff81\"/>\n<key v=\"0 0 0 0 \"/>\n<target/>\n<knownDeleted val=\"false\"/><pendingDeleted val=\"true\"/><dirty val=\"true\"/>", string0);
  }

  @Test
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, (long) (byte)0, (byte)1);
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      IN iN0 = new IN();
      try { 
        childReference0.fetchTarget(databaseImpl0, iN0);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // fetchTarget of 0x0/0x0 IN=0 state=3 java.lang.NullPointerException
         //
         assertThrownBy("com.sleepycat.je.tree.ChildReference", e);
      }
  }

  @Test
  public void test25()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      DBIN dBIN0 = new DBIN();
      try { 
        childReference0.fetchTarget((DatabaseImpl) null, dBIN0);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // fetchTarget of null lsn IN=0 state=0 NULL_LSN without KnownDeleted
         //
         assertThrownBy("com.sleepycat.je.tree.ChildReference", e);
      }
  }

  @Test
  public void test26()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[3];
      ChildReference childReference0 = new ChildReference((Node) dIN0, byteArray0, (long) 1000, (byte)0);
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      childReference0.fetchTarget(databaseImpl0, dIN0);
      //  // Unstable assertion: assertEquals(246L, databaseImpl0.getEofNodeId());
      //  // Unstable assertion: assertEquals(246L, dIN0.getLastId());
  }

  @Test
  public void test27()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(1978);
      byte[] byteArray0 = new byte[4];
      ChildReference childReference0 = new ChildReference((Node) dupCountLN0, byteArray0, (long) (byte)85, (byte)2);
      String string0 = childReference0.toString();
      //  // Unstable assertion: assertEquals(165L, dupCountLN0.getLastId());
      //  // Unstable assertion: assertEquals("<DbLsn val=\"0x0/0x55\"/>\n<key v=\"0 0 0 0 \"/>\n<dupCountLN>\n  <count v=\"1978\"/>\n  <node>165</node>\n  <data></data>\n</dupCountLN>\n<knownDeleted val=\"false\"/><pendingDeleted val=\"false\"/><dirty val=\"true\"/>", string0);
  }

  @Test
  public void test28()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(1978);
      byte[] byteArray0 = new byte[4];
      ChildReference childReference0 = new ChildReference((Node) dupCountLN0, byteArray0, (long) (byte)85, (byte)2);
      byte byte0 = childReference0.getState();
      //  // Unstable assertion: assertEquals(149L, dupCountLN0.getLastId());
      //  // Unstable assertion: assertEquals((byte)2, byte0);
  }

  @Test
  public void test29()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      childReference0.clearTarget();
      assertEquals((-1L), childReference0.getLsn());
      assertFalse(childReference0.isKnownDeleted());
  }

  @Test
  public void test30()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      int int0 = childReference0.getLogSize();
      assertFalse(childReference0.isKnownDeleted());
      assertEquals(13, int0);
      assertEquals((-1L), childReference0.getLsn());
  }

  @Test
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      LN lN0 = new LN(byteArray0);
      ChildReference childReference0 = new ChildReference((Node) lN0, byteArray0, (long) (byte) (-44), (byte) (-8));
      long long0 = childReference0.getLsn();
      //  // Unstable assertion: assertEquals(133L, lN0.getNodeId());
      //  // Unstable assertion: assertEquals((-44L), long0);
  }

  @Test
  public void test32()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      childReference0.hook613((IN) null);
      assertFalse(childReference0.isKnownDeleted());
      assertEquals((-1L), childReference0.getLsn());
  }

  @Test
  public void test33()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      // Undeclared exception!
      try { 
        childReference0.readFromLog((ByteBuffer) null, (byte)15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test34()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      childReference0.getTarget();
      assertFalse(childReference0.isKnownDeleted());
      assertEquals((-1L), childReference0.getLsn());
  }

  @Test
  public void test35()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LN lN0 = new LN(databaseEntry0);
      childReference0.setTarget(lN0);
      LN lN1 = (LN)childReference0.getTarget();
      //  // Unstable assertion: assertEquals(124L, lN1.getLastId());
  }

  @Test
  public void test36()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      boolean boolean0 = childReference0.logEntryIsTransactional();
      assertEquals((-1L), childReference0.getLsn());
      assertFalse(childReference0.isKnownDeleted());
      assertFalse(boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(1978);
      byte[] byteArray0 = new byte[4];
      ChildReference childReference0 = new ChildReference((Node) dupCountLN0, byteArray0, (long) (byte)85, (byte)2);
      childReference0.getKey();
      //  // Unstable assertion: assertEquals(109L, dupCountLN0.getNodeId());
      //  // Unstable assertion: assertEquals(109L, dupCountLN0.getLastId());
  }

  @Test
  public void test38()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(1978);
      byte[] byteArray0 = new byte[4];
      ChildReference childReference0 = new ChildReference((Node) dupCountLN0, byteArray0, (long) (byte)85, (byte)2);
      long long0 = childReference0.getTransactionId();
      //  // Unstable assertion: assertEquals(92L, dupCountLN0.getLastId());
      //  // Unstable assertion: assertEquals(0L, long0);
  }

  @Test
  public void test39()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      // Undeclared exception!
      try { 
        childReference0.dumpLog((StringBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.ChildReference", e);
      }
  }

  @Test
  public void test40()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      byte[] byteArray0 = new byte[0];
      ChildReference childReference0 = new ChildReference((Node) nameLN0, byteArray0, 0L);
      childReference0.getLsn();
      assertFalse(childReference0.getMigrate());
      assertFalse(childReference0.isKnownDeleted());
  }

  @Test
  public void test41()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(1978);
      byte[] byteArray0 = new byte[4];
      ChildReference childReference0 = new ChildReference((Node) dupCountLN0, byteArray0, (long) (byte)85, (byte)2);
      childReference0.setKey((byte[]) null);
      String string0 = childReference0.toString();
      //  // Unstable assertion: assertEquals(1L, dupCountLN0.getLastId());
      //  // Unstable assertion: assertEquals("<DbLsn val=\"0x0/0x55\"/>\n<key/>\n<dupCountLN>\n  <count v=\"1978\"/>\n  <node>1</node>\n  <data></data>\n</dupCountLN>\n<knownDeleted val=\"false\"/><pendingDeleted val=\"false\"/><dirty val=\"true\"/>", string0);
  }
}
