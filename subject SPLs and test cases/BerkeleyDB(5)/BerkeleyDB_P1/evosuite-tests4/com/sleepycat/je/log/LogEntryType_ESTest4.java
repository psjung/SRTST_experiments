/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 15:08:43 KST 2017
 */

package com.sleepycat.je.log;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.Set;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.log.entry.LNLogEntry;
import com.sleepycat.je.txn.TxnCommit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class LogEntryType_ESTest4 extends LogEntryType_ESTest_scaffolding4 {

  @Test
  public void test00()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_FILE_HEADER;
      byte byte0 = logEntryType0.getVersion();
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test01()  throws Throwable  {
      LogEntryType logEntryType0 = new LogEntryType((byte) (-41), (byte) (-41));
      byte byte0 = logEntryType0.getVersion();
      assertEquals((byte) (-41), byte0);
      assertTrue(logEntryType0.isNodeType());
  }

  @Test
  public void test02()  throws Throwable  {
      LogEntryType logEntryType0 = new LogEntryType((byte)0, (byte) (-77));
      byte byte0 = logEntryType0.getTypeNum();
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test03()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_FILESUMMARYLN;
      byte byte0 = logEntryType0.getTypeNum();
      assertEquals((byte)11, byte0);
  }

  @Test
  public void test04()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_FILESUMMARYLN;
      LNLogEntry lNLogEntry0 = (LNLogEntry)logEntryType0.getSharedLogEntry();
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
  }

  @Test
  public void test05()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.findType((byte)4, (byte) (-118));
      assertTrue(logEntryType0.isNodeType());
  }

  @Test
  public void test06()  throws Throwable  {
      byte byte0 = LogEntryType.clearProvisional((byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test07()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_FILESUMMARYLN;
      LogEntryType logEntryType1 = LogEntryType.LOG_TXN_ABORT;
      boolean boolean0 = logEntryType1.equals(logEntryType0);
      assertFalse(logEntryType0.equals((Object)logEntryType1));
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      TxnCommit txnCommit0 = new TxnCommit();
      LogEntryType logEntryType0 = txnCommit0.getLogType();
      boolean boolean0 = logEntryType0.equalsType((byte)22);
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_LN_TRANSACTIONAL;
      boolean boolean0 = logEntryType0.equalsType((byte)73, (byte)73);
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      boolean boolean0 = LogEntryType.isValidType((byte) (-120));
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      byte byte0 = LogEntryType.setProvisional((byte) (-113));
      assertEquals((byte) (-113), byte0);
  }

  @Test
  public void test12()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.findType((byte)26, (byte)26);
      assertNotNull(logEntryType0);
      assertFalse(logEntryType0.isNodeType());
  }

  @Test
  public void test13()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.findType((byte)0, (byte)0);
      assertNull(logEntryType0);
  }

  @Test
  public void test14()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DBIN;
      boolean boolean0 = logEntryType0.isNodeType();
      assertTrue(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      boolean boolean0 = LogEntryType.isNodeType((byte)15, (byte)15);
      assertTrue(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      LogEntryType logEntryType0 = new LogEntryType((byte)86, (byte)50);
      // Undeclared exception!
      try { 
        logEntryType0.getNewLogEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogEntryType", e);
      }
  }

  @Test
  public void test17()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_FILESUMMARYLN;
      logEntryType0.hashCode();
  }

  @Test
  public void test18()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_FILESUMMARYLN;
      Set set0 = LogEntryType.getAllTypes();
      boolean boolean0 = logEntryType0.equals(set0);
      assertFalse(boolean0);
      assertEquals(27, set0.size());
  }

  @Test
  public void test19()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_BIN_DELTA;
      boolean boolean0 = logEntryType0.equals(logEntryType0);
      assertTrue(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_FILESUMMARYLN;
      LogEntryType logEntryType1 = LogEntryType.LOG_TXN_ABORT;
      boolean boolean0 = logEntryType0.equals(logEntryType1);
      assertFalse(boolean0);
      assertFalse(logEntryType1.equals((Object)logEntryType0));
  }

  @Test
  public void test21()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DIN;
      boolean boolean0 = logEntryType0.equalsType((byte)14);
      assertTrue(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_FILESUMMARYLN;
      boolean boolean0 = logEntryType0.equalsType((byte)0);
      assertFalse(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      LogEntryType logEntryType0 = new LogEntryType((byte)88, (byte)88);
      boolean boolean0 = logEntryType0.equalsType((byte)88, (byte)88);
      assertTrue(boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_FILESUMMARYLN;
      boolean boolean0 = logEntryType0.equalsType((byte)0, (byte) (-128));
      assertFalse(boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      boolean boolean0 = LogEntryType.isValidType((byte)2);
      assertTrue(boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      boolean boolean0 = LogEntryType.isValidType((byte)81);
      assertFalse(boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      boolean boolean0 = LogEntryType.isValidType((byte)0);
      assertFalse(boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      boolean boolean0 = LogEntryType.isProvisional((byte) (-13));
      assertTrue(boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      boolean boolean0 = LogEntryType.isProvisional((byte)81);
      assertFalse(boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.findType((byte)27, (byte) (-24));
      assertFalse(logEntryType0.isNodeType());
      assertNotNull(logEntryType0);
  }

  @Test
  public void test31()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.findType((byte)86, (byte)121);
      assertNull(logEntryType0);
  }

  @Test
  public void test32()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.findType((byte) (-37), (byte)0);
      assertNull(logEntryType0);
  }

  @Test
  public void test33()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_FILESUMMARYLN;
      boolean boolean0 = logEntryType0.isNodeType();
      assertTrue(boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_IN_DELETE_INFO;
      boolean boolean0 = logEntryType0.isNodeType();
      assertFalse(boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      boolean boolean0 = LogEntryType.isNodeType((byte)2, (byte)2);
      assertTrue(boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      boolean boolean0 = LogEntryType.isNodeType((byte)19, (byte) (-113));
      assertFalse(boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      LogEntryType logEntryType0 = new LogEntryType((byte) (-113), (byte)1);
      byte byte0 = logEntryType0.getVersion();
      assertTrue(logEntryType0.isNodeType());
      assertEquals((byte)1, byte0);
  }

  @Test
  public void test38()  throws Throwable  {
      LogEntryType logEntryType0 = new LogEntryType((byte) (-113), (byte)1);
      String string0 = logEntryType0.toString();
      assertTrue(logEntryType0.isNodeType());
      assertEquals("null/1", string0);
  }

  @Test
  public void test39()  throws Throwable  {
      byte byte0 = LogEntryType.clearProvisional((byte) (-113));
      assertEquals((byte)15, byte0);
  }

  @Test
  public void test40()  throws Throwable  {
      LogEntryType logEntryType0 = new LogEntryType((byte) (-113), (byte)1);
      logEntryType0.getSharedLogEntry();
      assertTrue(logEntryType0.isNodeType());
  }

  @Test
  public void test41()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_FILESUMMARYLN;
      LNLogEntry lNLogEntry0 = (LNLogEntry)logEntryType0.getNewLogEntry();
      assertEquals(0L, lNLogEntry0.getNodeId());
  }

  @Test
  public void test42()  throws Throwable  {
      LogEntryType logEntryType0 = new LogEntryType((byte) (-113), (byte)1);
      byte byte0 = logEntryType0.getTypeNum();
      assertEquals((byte) (-113), byte0);
  }
}
