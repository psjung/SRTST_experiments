/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 23:16:54 KST 2017
 */

package com.sleepycat.bind.serial;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.fail;

import java.io.IOException;
import java.io.ObjectStreamClass;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class SerialOutput_ESTest2 extends SerialOutput_ESTest_scaffolding2 {

  @Test
  public void test0()  throws Throwable  {
      SerialOutput serialOutput0 = null;
      try {
        serialOutput0 = new SerialOutput((OutputStream) null, (ClassCatalog) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.io.ObjectOutputStream$BlockDataOutputStream", e);
      }
  }

  @Test
  public void test1()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      SerialOutput serialOutput0 = new SerialOutput((OutputStream) pipedOutputStream0, (ClassCatalog) null);
      // Undeclared exception!
      try { 
        serialOutput0.writeClassDescriptor((ObjectStreamClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.bind.serial.SerialOutput", e);
      }
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = SerialOutput.getStreamHeader();
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-19), (byte)0, (byte)5}, byteArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SerialOutput serialOutput0 = null;
      try {
        serialOutput0 = new SerialOutput((OutputStream) pipedOutputStream0, (ClassCatalog) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         assertThrownBy("java.io.PipedOutputStream", e);
      }
  }
}
