/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 10:44:19 KST 2017
 */

package com.sleepycat.je.txn;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.tree.DupCountLN;
import com.sleepycat.je.tree.LN;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class LockResult_ESTest3 extends LockResult_ESTest_scaffolding3 {

  @Test
  public void test00()  throws Throwable  {
      LockResult lockResult0 = new LockResult((LockGrantType) null, (WriteLockInfo) null);
      LockGrantType lockGrantType0 = lockResult0.getLockGrant();
      assertNull(lockGrantType0);
  }

  @Test
  public void test01()  throws Throwable  {
      LockGrantType lockGrantType0 = LockGrantType.WAIT_PROMOTION;
      WriteLockInfo writeLockInfo0 = WriteLockInfo.basicWriteLockInfo;
      LockResult lockResult0 = new LockResult(lockGrantType0, writeLockInfo0);
      DupCountLN dupCountLN0 = new DupCountLN();
      lockResult0.setLN(dupCountLN0);
      DupCountLN dupCountLN1 = (DupCountLN)lockResult0.getLN();
      assertEquals(0, dupCountLN1.getDupCount());
  }

  @Test
  public void test02()  throws Throwable  {
      LockGrantType lockGrantType0 = LockGrantType.WAIT_RESTART;
      WriteLockInfo writeLockInfo0 = new WriteLockInfo();
      LockResult lockResult0 = new LockResult(lockGrantType0, writeLockInfo0);
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LN lN0 = new LN(databaseEntry0);
      lockResult0.setLN(lN0);
      LN lN1 = lockResult0.getLN();
      assertEquals("</ln>", lN1.endTag());
  }

  @Test
  public void test03()  throws Throwable  {
      LockGrantType lockGrantType0 = LockGrantType.WAIT_RESTART;
      WriteLockInfo writeLockInfo0 = WriteLockInfo.basicWriteLockInfo;
      LockResult lockResult0 = new LockResult(lockGrantType0, writeLockInfo0);
      lockResult0.setAbortLsn((-1581L), false, false);
  }

  @Test
  public void test04()  throws Throwable  {
      LockGrantType lockGrantType0 = LockGrantType.NEW;
      WriteLockInfo writeLockInfo0 = new WriteLockInfo();
      LockResult lockResult0 = new LockResult(lockGrantType0, writeLockInfo0);
      lockResult0.setAbortLsn((-1L), true, true);
      assertEquals((-1L), writeLockInfo0.getAbortLsn());
  }

  @Test
  public void test05()  throws Throwable  {
      LockGrantType lockGrantType0 = LockGrantType.WAIT_RESTART;
      WriteLockInfo writeLockInfo0 = new WriteLockInfo();
      LockResult lockResult0 = new LockResult(lockGrantType0, writeLockInfo0);
      writeLockInfo0.neverLocked = false;
      lockResult0.setAbortLsn(98304L, true);
      assertEquals((-1L), writeLockInfo0.getAbortLsn());
  }

  @Test
  public void test06()  throws Throwable  {
      LockResult lockResult0 = new LockResult((LockGrantType) null, (WriteLockInfo) null);
      lockResult0.setAbortLsn(255L, false, true);
  }

  @Test
  public void test07()  throws Throwable  {
      LockGrantType lockGrantType0 = LockGrantType.WAIT_RESTART;
      WriteLockInfo writeLockInfo0 = new WriteLockInfo();
      LockResult lockResult0 = new LockResult(lockGrantType0, writeLockInfo0);
      lockResult0.setAbortLsn(1L, false, false);
      assertEquals(1L, writeLockInfo0.getAbortLsn());
      assertFalse(writeLockInfo0.getAbortKnownDeleted());
  }

  @Test
  public void test08()  throws Throwable  {
      LockGrantType lockGrantType0 = LockGrantType.WAIT_RESTART;
      WriteLockInfo writeLockInfo0 = new WriteLockInfo();
      LockResult lockResult0 = new LockResult(lockGrantType0, writeLockInfo0);
      lockResult0.setAbortLsn(98304L, true);
      assertEquals(98304L, writeLockInfo0.getAbortLsn());
  }

  @Test
  public void test09()  throws Throwable  {
      LockGrantType lockGrantType0 = LockGrantType.WAIT_RESTART;
      WriteLockInfo writeLockInfo0 = new WriteLockInfo();
      LockResult lockResult0 = new LockResult(lockGrantType0, writeLockInfo0);
      LockGrantType lockGrantType1 = lockResult0.getLockGrant();
      assertEquals("WAIT_RESTART", lockGrantType1.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      LockGrantType lockGrantType0 = LockGrantType.WAIT_RESTART;
      WriteLockInfo writeLockInfo0 = new WriteLockInfo();
      LockResult lockResult0 = new LockResult(lockGrantType0, writeLockInfo0);
      DupCountLN dupCountLN0 = (DupCountLN)lockResult0.getLN();
      assertNull(dupCountLN0);
  }
}
