/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 09:36:43 KST 2017
 */

package com.sleepycat.je.log.entry;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.fail;

import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.log.LogEntryType;
import com.sleepycat.je.tree.BIN;
import com.sleepycat.je.tree.DBIN;
import com.sleepycat.je.tree.DupCountLN;
import com.sleepycat.je.tree.FileSummaryLN;
import com.sleepycat.je.tree.LN;
import com.sleepycat.je.tree.NameLN;
import com.sleepycat.je.txn.Txn;

import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class DeletedDupLNLogEntry_ESTest3 extends DeletedDupLNLogEntry_ESTest_scaffolding3 {

  @Test
  public void test00()  throws Throwable  {
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(false);
      byte[] byteArray0 = deletedDupLNLogEntry0.getDupKey();
      assertNull(byteArray0);
  }

  @Test
  public void test01()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DBIN;
      DupCountLN dupCountLN0 = new DupCountLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[6];
      Txn txn0 = new Txn();
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, (LN) dupCountLN0, databaseId0, byteArray0, byteArray0, (-42L), true, txn0);
      byte[] byteArray1 = deletedDupLNLogEntry0.getDupKey();
      assertSame(byteArray1, byteArray0);
  }

  @Test
  public void test02()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DEL_DUPLN;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[9];
      Txn txn0 = new Txn();
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, byteArray1, (long) (byte)16, false, txn0);
      assertFalse(deletedDupLNLogEntry0.getAbortKnownDeleted());
  }

  @Test
  public void test03()  throws Throwable  {
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(true);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("\"C14JNbg<)%)");
      // Undeclared exception!
      try { 
        deletedDupLNLogEntry0.readEntry(byteBuffer0, (-2022), (byte) (-28), true);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(false);
      // Undeclared exception!
      try { 
        deletedDupLNLogEntry0.readEntry((ByteBuffer) null, (-1262), (byte) (-90), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test05()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      LogEntryType logEntryType0 = dBIN0.getLogType();
      byte[] byteArray0 = new byte[8];
      LN lN0 = new LN(byteArray0);
      DatabaseId databaseId0 = new DatabaseId((int) (byte)36);
      Txn txn0 = new Txn();
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, lN0, databaseId0, byteArray0, byteArray0, (long) (byte)0, true, txn0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode(" Read-Only\n");
      CharBuffer charBuffer0 = mS949_0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = mS949_0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        deletedDupLNLogEntry0.readEntry(byteBuffer1, 1359, (byte) (-33), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(false);
      // Undeclared exception!
      try { 
        deletedDupLNLogEntry0.getLogSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_MAPLN_TRANSACTIONAL;
      DatabaseId databaseId0 = new DatabaseId(0);
      byte[] byteArray0 = new byte[3];
      Txn txn0 = new Txn();
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = null;
      try {
        deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, (LN) null, databaseId0, byteArray0, byteArray0, 380L, true, txn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_TXN_COMMIT;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[0];
      BIN bIN0 = new BIN(databaseImpl0, byteArray0, 0, 0);
      DatabaseId databaseId0 = bIN0.getDatabaseId();
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, byteArray0, (long) 0, false, (Txn) null);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("B?`:2c4l+eXEGQuS");
      deletedDupLNLogEntry0.readEntry(byteBuffer0, 0, (byte) (-40), false);
      // Undeclared exception!
      try { 
        deletedDupLNLogEntry0.writeToLog(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_TXN_COMMIT;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[0];
      BIN bIN0 = new BIN(databaseImpl0, byteArray0, 0, 0);
      DatabaseId databaseId0 = bIN0.getDatabaseId();
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, byteArray0, (long) 0, false, (Txn) null);
      deletedDupLNLogEntry0.getDupKey();
      //  // Unstable assertion: assertEquals(26L, bIN0.getLastId());
      //  // Unstable assertion: assertEquals(26L, fileSummaryLN0.getLastId());
  }

  @Test
  public void test10()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_TXN_COMMIT;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[0];
      BIN bIN0 = new BIN(databaseImpl0, byteArray0, 0, 0);
      DatabaseId databaseId0 = bIN0.getDatabaseId();
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, byteArray0, (long) 0, false, (Txn) null);
      int int0 = deletedDupLNLogEntry0.getLogSize();
      //  // Unstable assertion: assertEquals(14L, bIN0.getNodeId());
      //  // Unstable assertion: assertEquals(21, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(false);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        deletedDupLNLogEntry0.dumpEntry(stringBuffer0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_IN;
      DupCountLN dupCountLN0 = new DupCountLN();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, (LN) dupCountLN0, (DatabaseId) null, byteArray0, byteArray0, 1L, false, txn0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("");
      // Undeclared exception!
      try { 
        deletedDupLNLogEntry0.writeToLog(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[5];
      DBIN dBIN0 = new DBIN(databaseImpl0, byteArray0, (int) (byte)0, byteArray0, 0);
      LogEntryType logEntryType0 = dBIN0.getLogType();
      NameLN nameLN0 = new NameLN();
      DatabaseId databaseId0 = new DatabaseId((int) (byte)0);
      Txn txn0 = new Txn();
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, byteArray0, (-1538L), true, txn0);
      StringWriter stringWriter0 = new StringWriter((int) (byte)0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      deletedDupLNLogEntry0.dumpEntry(stringBuffer0, false);
      //  // Unstable assertion: assertEquals(222, stringBuffer0.length());
      //  // Unstable assertion: assertEquals(1L, databaseImpl0.getEofNodeId());
  }
}
