/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 01:48:19 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.LinkedList;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.EnvironmentConfig;
import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.dbi.DbConfigManager;
import com.sleepycat.je.dbi.EnvironmentImpl;
import com.sleepycat.je.dbi.MemoryBudget;
import com.sleepycat.je.latch.LatchNotHeldException;
import com.sleepycat.je.log.LogManager;

import de.ovgu.cide.jakutil.ReturnBoolean;
import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class IN_ESTest2 extends IN_ESTest_scaffolding2 {

  @Test
  public void test000()  throws Throwable  {
      IN.isStatePendingDeleted((byte)0);
  }

  @Test
  public void test001()  throws Throwable  {
      IN.isStateKnownDeleted((byte) (-30));
  }

  @Test
  public void test002()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.latchNoWait();
      dIN0.isLatchOwner();
  }

  @Test
  public void test003()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.isCompressible();
  }

  @Test
  public void test004()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.canBeAncestor(true);
  }

  @Test
  public void test005()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[5];
      ChildReference childReference0 = new ChildReference((Node) dIN0, byteArray0, 2072L);
      DupCountLN dupCountLN0 = new DupCountLN();
      childReference0.setTarget(dupCountLN0);
      dIN0.updateMemorySize(childReference0, childReference0);
  }

  @Test
  public void test006()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_trackProvisionalObsolete iN_IN_trackProvisionalObsolete0 = new IN.IN_trackProvisionalObsolete(bIN0, bIN0, (-665), 2955002088054212286L);
      iN_IN_trackProvisionalObsolete0.childMemDelta = (-665);
      iN_IN_trackProvisionalObsolete0.hook651();
  }

  @Test
  public void test007()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_trackProvisionalObsolete iN_IN_trackProvisionalObsolete0 = new IN.IN_trackProvisionalObsolete(bIN0, bIN0, (-665), 2955002088054212286L);
      iN_IN_trackProvisionalObsolete0.obsoleteLsn1 = 2955002088054212286L;
      iN_IN_trackProvisionalObsolete0.execute();
  }

  @Test
  public void test008()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.isSoughtNode((-323L), false);
  }

  @Test
  public void test009()  throws Throwable  {
      DIN dIN0 = new DIN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      IN.IN_splitInternal iN_IN_splitInternal0 = new IN.IN_splitInternal(dIN0, dIN0, (-665), (-665), 10);
      byte[] byteArray0 = dIN0.getDupTreeKey();
      DBIN dBIN0 = null;
      try {
        dBIN0 = new DBIN(databaseImpl0, byteArray0, dIN0.ACCUMULATED_LIMIT, byteArray0, dIN0.ACCUMULATED_LIMIT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test010()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_isValidForDelete iN_IN_isValidForDelete0 = new IN.IN_isValidForDelete(bIN0);
      // Undeclared exception!
      try { 
        bIN0.hook610(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test011()  throws Throwable  {
      IN iN0 = new IN();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        stringBuffer0.delete((-1557), (-1557));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1557
         //
         assertThrownBy("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test
  public void test012()  throws Throwable  {
      DIN dIN0 = new DIN();
      IN.IN_splitInternal iN_IN_splitInternal0 = new IN.IN_splitInternal(dIN0, dIN0, (-665), (-665), 10);
      iN_IN_splitInternal0._this.getEvictionType();
  }

  @Test
  public void test013()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.getDupKey();
  }

  @Test
  public void test014()  throws Throwable  {
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig();
      DbConfigManager dbConfigManager0 = new DbConfigManager(environmentConfig0);
      IN.computeOverhead(dbConfigManager0);
  }

  @Test
  public void test015()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.validateSubtreeBeforeDelete((-1218));
  }

  @Test
  public void test016()  throws Throwable  {
      IN iN0 = new IN();
      iN0.updateMemorySize(0L, 3503L);
  }

  @Test
  public void test017()  throws Throwable  {
      IN iN0 = new IN();
      byte[] byteArray0 = new byte[9];
      iN0.isKeyInBounds(byteArray0);
      DBIN dBIN0 = new DBIN();
      IN.IN_splitInternal iN_IN_splitInternal0 = new IN.IN_splitInternal(iN0, dBIN0, byteArray0[1], byteArray0[7], byteArray0[4]);
      LogManager logManager0 = null;
      try {  
      logManager0 = iN_IN_splitInternal0.logManager;
      } catch(NullPointerException e) {}
  }

  @Test
  public void test018()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.isValidForDelete();
  }

  @Test
  public void test019()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.isDbRoot();
  }

  @Test
  public void test020()  throws Throwable  {
      IN iN0 = new IN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[6];
      iN0.init(databaseImpl0, byteArray0, (byte)56, 1000);
  }

  @Test
  public void test021()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.getLogSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test022()  throws Throwable  {
      DIN dIN0 = new DIN();
      IN.IN_splitInternal iN_IN_splitInternal0 = new IN.IN_splitInternal(dIN0, dIN0, dIN0.ACCUMULATED_LIMIT, dIN0.ACCUMULATED_LIMIT, dIN0.ACCUMULATED_LIMIT);
      EnvironmentImpl environmentImpl0 = null;
      try {  
      environmentImpl0 = iN_IN_splitInternal0.env;
      } catch(NullPointerException e) {}
  }

  @Test
  public void test023()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_trackProvisionalObsolete iN_IN_trackProvisionalObsolete0 = new IN.IN_trackProvisionalObsolete(bIN0, bIN0, (-665), 2955002088054212286L);
      iN_IN_trackProvisionalObsolete0._this.endTag();
  }

  @Test
  public void test024()  throws Throwable  {
      IN iN0 = new IN();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      iN0.dumpLogAdditional(stringBuffer0);
  }

  @Test
  public void test025()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.canBeAncestor(false);
  }

  @Test
  public void test026()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_trackProvisionalObsolete iN_IN_trackProvisionalObsolete0 = new IN.IN_trackProvisionalObsolete(bIN0, bIN0, 409L, (-665));
      // Undeclared exception!
      try { 
        iN_IN_trackProvisionalObsolete0.hook652();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_trackProvisionalObsolete", e);
      }
  }

  @Test
  public void test027()  throws Throwable  {
      IN iN0 = new IN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("qxo.{S]34;=P&Gg");
      // Undeclared exception!
      try { 
        iN0.writeToLog(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test028()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.writeToLog((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test029()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.verifyMemorySize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test030()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        dIN0.splitSpecial(dIN0, (-665), (-885), byteArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DIN", e);
      }
  }

  @Test
  public void test031()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.splitInternal((IN) null, 100, (-3893), (-3893));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test032()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.setLsnElement((-2146412582), (-2146412582));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4284264
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test033()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.setKnownDeleted(255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test034()  throws Throwable  {
      IN iN0 = new IN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode(">");
      // Undeclared exception!
      try { 
        iN0.readFromLog(byteBuffer0, (byte) (-48));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test035()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.isEntryKnownDeleted(1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1000
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test036()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.isDirty((-665));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -665
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test037()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.insertEntry1((ChildReference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test038()  throws Throwable  {
      IN iN0 = new IN();
      byte[] byteArray0 = new byte[5];
      ChildReference childReference0 = new ChildReference((Node) iN0, byteArray0, 524288L, (byte)10);
      try { 
        iN0.insertEntry(childReference0);
        fail("Expecting exception: InconsistentNodeException");
      
      } catch(InconsistentNodeException e) {
         //
         // Node 0 should have been split before calling insertEntry
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_insertEntry1", e);
      }
  }

  @Test
  public void test039()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.initEntryLsn((-832));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test040()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      try { 
        dBIN0.hook624();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // DBIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test041()  throws Throwable  {
      BIN bIN0 = new BIN();
      try { 
        bIN0.hook621();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // BIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test042()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.hook619(true);
        fail("Expecting exception: ReturnBoolean");
      
      } catch(ReturnBoolean e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test043()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.getMigrate((byte)7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test044()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.getMemoryOverhead((MemoryBudget) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DBIN", e);
      }
  }

  @Test
  public void test045()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.getChildEvictionType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test046()  throws Throwable  {
      BIN bIN0 = new BIN();
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        bIN0.findEntry(byteArray0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test047()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.fetchTarget(101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 101
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test048()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.dumpLog((StringBuffer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test049()  throws Throwable  {
      IN iN0 = new IN();
      SearchResult searchResult0 = new SearchResult();
      // Undeclared exception!
      try { 
        iN0.descendOnParentSearch(searchResult0, false, false, 1176L, (Node) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test050()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.computeMemorySize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test051()  throws Throwable  {
      DbConfigManager dbConfigManager0 = new DbConfigManager((EnvironmentConfig) null);
      // Undeclared exception!
      try { 
        IN.computeArraysOverhead(dbConfigManager0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.dbi.DbConfigManager", e);
      }
  }

  @Test
  public void test052()  throws Throwable  {
      IN iN0 = new IN();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        iN0.compareTo(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to com.sleepycat.je.tree.IN
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test053()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[6];
      IN iN0 = null;
      try {
        iN0 = new IN(databaseImpl0, byteArray0, (int) (byte)24, (-3424));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test054()  throws Throwable  {
      IN iN0 = new IN();
      iN0.compress((BINReference) null, true);
  }

  @Test
  public void test055()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.setDirty(true);
  }

  @Test
  public void test056()  throws Throwable  {
      DIN dIN0 = new DIN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      dIN0.setDatabase(databaseImpl0);
  }

  @Test
  public void test057()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.releaseLatchIfOwner();
  }

  @Test
  public void test058()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.getTarget((-1738));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1738
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test059()  throws Throwable  {
      IN iN0 = new IN();
      iN0.isLatchOwner();
  }

  @Test
  public void test060()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_flushProvisionalObsolete iN_IN_flushProvisionalObsolete0 = new IN.IN_flushProvisionalObsolete(bIN0, (LogManager) null);
  }

  @Test
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        IN.computeOverhead((DbConfigManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test062()  throws Throwable  {
      IN iN0 = new IN();
      iN0.latchNoWait(true);
  }

  @Test
  public void test063()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.setGeneration();
  }

  @Test
  public void test064()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.setLsn(127, 127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 508
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test065()  throws Throwable  {
      IN iN0 = new IN();
      iN0.shortClassName();
  }

  @Test
  public void test066()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      try { 
        dBIN0.releaseLatch();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // DBIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test067()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.getNEntries();
  }

  @Test
  public void test068()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.latch();
  }

  @Test
  public void test069()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.getDatabase();
  }

  @Test
  public void test070()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[0];
      IN iN0 = null;
      try {
        iN0 = new IN(databaseImpl0, byteArray0, (-2), 6);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test071()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.getChildEvictionType();
  }

  @Test
  public void test072()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.getEvictionType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test073()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.updateMemorySize(dIN0, dIN0);
  }

  @Test
  public void test074()  throws Throwable  {
      BIN bIN0 = new BIN();
      ChildReference childReference0 = new ChildReference();
      childReference0.hook613(bIN0);
  }

  @Test
  public void test075()  throws Throwable  {
      BIN bIN0 = new BIN();
      ChildReference childReference0 = new ChildReference();
      bIN0.updateMemorySize(childReference0, childReference0);
  }

  @Test
  public void test076()  throws Throwable  {
      DIN dIN0 = new DIN();
      IN.IN_trackProvisionalObsolete iN_IN_trackProvisionalObsolete0 = new IN.IN_trackProvisionalObsolete(dIN0, dIN0, (-665), 248L);
      iN_IN_trackProvisionalObsolete0.execute();
  }

  @Test
  public void test077()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_isValidForDelete iN_IN_isValidForDelete0 = new IN.IN_isValidForDelete(bIN0);
      iN_IN_isValidForDelete0.hook635();
  }

  @Test
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      IN.IN_verify iN_IN_verify0 = new IN.IN_verify((IN) null, byteArray0);
      // Undeclared exception!
      try { 
        iN_IN_verify0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_verify", e);
      }
  }

  @Test
  public void test079()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      byte[] byteArray0 = new byte[9];
      IN.IN_verify iN_IN_verify0 = new IN.IN_verify(dBIN0, byteArray0);
      iN_IN_verify0.hook632();
      iN_IN_verify0.hook632();
  }

  @Test
  public void test080()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_validateSubtreeBeforeDelete iN_IN_validateSubtreeBeforeDelete0 = new IN.IN_validateSubtreeBeforeDelete(bIN0, (-665));
      iN_IN_validateSubtreeBeforeDelete0.hook629();
  }

  @Test
  public void test081()  throws Throwable  {
      IN iN0 = new IN();
      iN0.dumpString(5, false);
  }

  @Test
  public void test082()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.dumpKeys();
  }

  @Test
  public void test083()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.getLogSize();
  }

  @Test
  public void test085()  throws Throwable  {
      IN iN0 = new IN();
      iN0.needsSplitting();
  }

  @Test
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      DIN dIN0 = new DIN();
      dIN0.deleteEntry(byteArray0, true);
  }

  @Test
  public void test087()  throws Throwable  {
      DIN dIN0 = new DIN();
      try { 
        dIN0.getDupCountLN();
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // fetchTarget of null lsn IN=0 state=0 NULL_LSN without KnownDeleted
         //
         assertThrownBy("com.sleepycat.je.tree.ChildReference", e);
      }
  }

  @Test
  public void test088()  throws Throwable  {
      IN.makeFetchErrorMsg("Xc`'Th$Z*T", (IN) null, 67108864L, (byte) (-101));
  }

  @Test
  public void test089()  throws Throwable  {
      IN.isStatePendingDeleted((byte) (-113));
  }

  @Test
  public void test090()  throws Throwable  {
      IN.isStateKnownDeleted((byte) (-41));
  }

  @Test
  public void test091()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.setMigrate(1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test092()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.setKnownDeletedLeaveTarget((-2715));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2715
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test093()  throws Throwable  {
      IN iN0 = new IN();
      iN0.equals((Object) null);
  }

  @Test
  public void test094()  throws Throwable  {
      IN iN0 = new IN();
      iN0.equals(iN0);
  }

  @Test
  public void test095()  throws Throwable  {
      IN iN0 = new IN();
      byte[] byteArray0 = new byte[5];
      IN.IN_updateEntry3 iN_IN_updateEntry3_0 = new IN.IN_updateEntry3(iN0, (-665), iN0, (-665), byteArray0);
      // Undeclared exception!
      try { 
        iN_IN_updateEntry3_0.hook643();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -665
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test096()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      ChildReference childReference0 = new ChildReference();
      IN.IN_insertEntry1 iN_IN_insertEntry1_0 = new IN.IN_insertEntry1(dBIN0, childReference0);
      // Undeclared exception!
      try { 
        iN_IN_insertEntry1_0.hook645();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test097()  throws Throwable  {
      IN iN0 = new IN();
      byte[] byteArray0 = new byte[3];
      ChildReference childReference0 = new ChildReference((Node) iN0, byteArray0, (long) (byte)10, (byte) (-103));
      IN.IN_insertEntry1 iN_IN_insertEntry1_0 = new IN.IN_insertEntry1(iN0, childReference0);
      iN_IN_insertEntry1_0.hook646();
  }

  @Test
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, (-463L), (byte) (-3));
      IN.IN_insertEntry1 iN_IN_insertEntry1_0 = new IN.IN_insertEntry1((IN) null, childReference0);
      // Undeclared exception!
      try { 
        iN_IN_insertEntry1_0.hook647();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test099()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      IN.IN_updateEntry2 iN_IN_updateEntry2_0 = new IN.IN_updateEntry2(dBIN0, (-665), dBIN0, (-665));
      // Undeclared exception!
      try { 
        iN_IN_updateEntry2_0.hook642();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -665
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      IN.IN_updateEntryCompareKey iN_IN_updateEntryCompareKey0 = new IN.IN_updateEntryCompareKey((IN) null, 10, (Node) null, 15, byteArray0);
      // Undeclared exception!
      try { 
        iN_IN_updateEntryCompareKey0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test101()  throws Throwable  {
      IN iN0 = new IN();
      byte[] byteArray0 = new byte[6];
      IN.IN_updateEntryCompareKey iN_IN_updateEntryCompareKey0 = new IN.IN_updateEntryCompareKey(iN0, (byte) (-119), iN0, 8391513779257779538L, byteArray0);
      // Undeclared exception!
      try { 
        iN_IN_updateEntryCompareKey0.hook644();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -119
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test102()  throws Throwable  {
      IN.IN_validateSubtreeBeforeDelete iN_IN_validateSubtreeBeforeDelete0 = new IN.IN_validateSubtreeBeforeDelete((IN) null, 4203);
      // Undeclared exception!
      try { 
        iN_IN_validateSubtreeBeforeDelete0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_validateSubtreeBeforeDelete", e);
      }
  }

  @Test
  public void test103()  throws Throwable  {
      BIN bIN0 = new BIN();
      byte[] byteArray0 = new byte[9];
      IN.IN_setEntry iN_IN_setEntry0 = new IN.IN_setEntry(bIN0, (-665), bIN0, byteArray0, 0L, (byte)7);
      // Undeclared exception!
      try { 
        iN_IN_setEntry0.hook640();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -665
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test104()  throws Throwable  {
      BIN bIN0 = new BIN();
      byte[] byteArray0 = new byte[7];
      IN.IN_setEntry iN_IN_setEntry0 = new IN.IN_setEntry(bIN0, (-1586), bIN0, byteArray0, (-66L), (byte) (-86));
      iN_IN_setEntry0.hook641();
  }

  @Test
  public void test105()  throws Throwable  {
      DIN dIN0 = new DIN();
      IN.IN_isValidForDelete iN_IN_isValidForDelete0 = new IN.IN_isValidForDelete(dIN0);
      iN_IN_isValidForDelete0.execute();
  }

  @Test
  public void test106()  throws Throwable  {
      DIN dIN0 = new DIN();
      IN.IN_splitInternal iN_IN_splitInternal0 = new IN.IN_splitInternal(dIN0, dIN0, (-270), (-2146412582), (-270));
      // Undeclared exception!
      try { 
        iN_IN_splitInternal0.hook631();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_splitInternal", e);
      }
  }

  @Test
  public void test107()  throws Throwable  {
      DIN dIN0 = new DIN();
      IN.IN_splitInternal iN_IN_splitInternal0 = new IN.IN_splitInternal(dIN0, dIN0, (-665), (-665), 10);
      // Undeclared exception!
      try { 
        iN_IN_splitInternal0.hook630();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_splitInternal", e);
      }
  }

  @Test
  public void test109()  throws Throwable  {
      IN iN0 = new IN();
      IN.IN_splitInternal iN_IN_splitInternal0 = new IN.IN_splitInternal(iN0, iN0, (-665), (-665), (-665));
      // Undeclared exception!
      try { 
        iN_IN_splitInternal0.hook650();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test110()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.getAccumulatedDelta();
  }

  @Test
  public void test111()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.readFromLog((ByteBuffer) null, (byte) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test112()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.adjustCursors(dIN0, (-821), (-665));
  }

  @Test
  public void test113()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.getDirty();
  }

  @Test
  public void test114()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.setInListResident(false);
  }

  @Test
  public void test115()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.getEntryLsnLongArray();
      assertEquals(0L, dBIN0.getGeneration());
      assertFalse(dBIN0.getDirty());
      assertEquals(0, dBIN0.getAccumulatedDelta());
      assertTrue(dBIN0.needsSplitting());
      assertFalse(dBIN0.isRoot());
      assertEquals(0, dBIN0.getLevel());
      assertEquals((-1L), dBIN0.getLastFullVersion());
  }

  @Test
  public void test116()  throws Throwable  {
      IN iN0 = new IN();
      try { 
        iN0.hook626();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // IN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test117()  throws Throwable  {
      DIN dIN0 = new DIN();
      boolean boolean0 = dIN0.entryZeroKeyComparesLow();
      assertFalse(dIN0.getDirty());
      assertEquals(0, dIN0.getAccumulatedDelta());
      assertTrue(dIN0.needsSplitting());
      assertEquals(0L, dIN0.getGeneration());
      assertEquals(0, dIN0.getLevel());
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertTrue(boolean0);
      assertFalse(dIN0.isRoot());
  }

  @Test
  public void test118()  throws Throwable  {
      BIN bIN0 = new BIN();
      boolean boolean0 = bIN0.logEntryIsTransactional();
      assertEquals(0, bIN0.getLevel());
      assertFalse(boolean0);
      assertEquals((-1L), bIN0.getLastFullVersion());
      assertEquals(0L, bIN0.getGeneration());
      assertEquals(0, bIN0.getAccumulatedDelta());
      assertTrue(bIN0.needsSplitting());
  }

  @Test
  public void test119()  throws Throwable  {
      IN iN0 = new IN();
      try { 
        iN0.getDupKey();
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // IN.getDupKey() called
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test120()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.hook637();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test121()  throws Throwable  {
      IN iN0 = new IN();
      iN0.getLogType();
      assertEquals((-1L), iN0.getLastFullVersion());
      assertEquals(0, iN0.getLevel());
      assertEquals("IN", iN0.shortClassName());
      assertTrue(iN0.needsSplitting());
      assertFalse(iN0.isDbRoot());
      assertEquals(0L, iN0.getGeneration());
      assertFalse(iN0.getDirty());
  }

  @Test
  public void test122()  throws Throwable  {
      IN iN0 = new IN();
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        iN0.updateEntry((-313), (Node) bIN0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -313
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test123()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.getState(131072);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 131072
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test124()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.hook625((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test125()  throws Throwable  {
      BIN bIN0 = new BIN();
      assertEquals((-1L), bIN0.getLastFullVersion());
      
      bIN0.setLastFullLsn(383L);
      assertEquals(0, bIN0.getLevel());
  }

  @Test
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      DIN dIN0 = new DIN();
      DupCountLN dupCountLN0 = new DupCountLN();
      // Undeclared exception!
      try { 
        dIN0.updateEntry((int) (byte) (-49), (Node) dupCountLN0, (-1L), byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -49
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test127()  throws Throwable  {
      DIN dIN0 = new DIN();
      assertEquals(0L, dIN0.getGeneration());
      
      dIN0.setGeneration(1L);
      assertTrue(dIN0.needsSplitting());
  }

  @Test
  public void test128()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      assertFalse(dBIN0.getDirty());
      
      byte[] byteArray0 = new byte[0];
      dBIN0.setIdentifierKey(byteArray0);
      assertTrue(dBIN0.getDirty());
  }

  @Test
  public void test129()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_trackProvisionalObsolete iN_IN_trackProvisionalObsolete0 = new IN.IN_trackProvisionalObsolete(bIN0, bIN0, (-665), 2955002088054212286L);
      // Undeclared exception!
      try { 
        iN_IN_trackProvisionalObsolete0._this.setTarget((-665), bIN0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -665
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test130()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      try { 
        dBIN0.hook627();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // DBIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test131()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      dBIN0.hook638(fileSummaryLN0);
      long long0 = dBIN0.getInMemorySize();
      assertEquals(32L, long0);
  }

  @Test
  public void test132()  throws Throwable  {
      IN iN0 = new IN();
      byte[] byteArray0 = new byte[4];
      DatabaseId databaseId0 = new DatabaseId(528);
      NameLN nameLN0 = new NameLN(databaseId0);
      // Undeclared exception!
      try { 
        iN0.setEntry(528, nameLN0, byteArray0, 528, (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 528
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test133()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.updateEntry(9, (long) 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 36
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test134()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.clearKnownDeleted((-2147483645));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483645
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test135()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.initMemorySize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test136()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.hashCode();
      assertEquals(0L, dBIN0.getGeneration());
      assertFalse(dBIN0.getDirty());
      assertEquals((-1L), dBIN0.getLastFullVersion());
      assertTrue(dBIN0.needsSplitting());
      assertFalse(dBIN0.isDbRoot());
      assertEquals(0, dBIN0.getAccumulatedDelta());
      assertEquals(0, dBIN0.getLevel());
  }

  @Test
  public void test137()  throws Throwable  {
      IN iN0 = new IN();
      iN0.adjustCursorsForInsert((-1557));
      assertFalse(iN0.isRoot());
      assertEquals(0, iN0.getLevel());
      assertEquals(0, iN0.getAccumulatedDelta());
      assertTrue(iN0.needsSplitting());
      assertFalse(iN0.getDirty());
      assertEquals((-1L), iN0.getLastFullVersion());
      assertEquals(0L, iN0.getGeneration());
      assertEquals("IN", iN0.shortClassName());
  }

  @Test
  public void test138()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.getLsn(1506);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6025
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test139()  throws Throwable  {
      IN iN0 = new IN();
      try { 
        iN0.hook622();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // IN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test140()  throws Throwable  {
      DIN dIN0 = new DIN();
      boolean boolean0 = dIN0.isCompressible();
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertFalse(dIN0.getDirty());
      assertEquals(0L, dIN0.getGeneration());
      assertEquals(0, dIN0.getLevel());
      assertFalse(boolean0);
      assertTrue(dIN0.needsSplitting());
      assertEquals(0, dIN0.getAccumulatedDelta());
  }

  @Test
  public void test141()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.updateEntry(782, 2110L, 2110L, (-2329L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3128
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test142()  throws Throwable  {
      IN iN0 = new IN();
      String string0 = iN0.toString();
      assertEquals("<in>\n  <node>0</node>\n  <idkey><key v=\"\"/></idkey>\n  <dirty val=\"false\"/>\n  <generation val=\"0\"/>\n  <level val=\"0\"/>\n  <isRoot val=\"false\"/>\n  <entries nEntries=\"0\">\n  </entries>\n</in>", string0);
      assertTrue(iN0.needsSplitting());
      assertEquals((-1L), iN0.getLastFullVersion());
      assertEquals("IN", iN0.shortClassName());
  }

  @Test
  public void test143()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = dIN0.getEntryLsnByteArray();
      dIN0.isKeyInBounds(byteArray0);
      assertFalse(dIN0.isRoot());
      assertTrue(dIN0.needsSplitting());
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertEquals(0, dIN0.getLevel());
      assertEquals(0, dIN0.getAccumulatedDelta());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test
  public void test144()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.getDatabaseId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test145()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      int int0 = dBIN0.getMaxEntries();
      assertEquals(0L, dBIN0.getGeneration());
      assertEquals(0, dBIN0.getAccumulatedDelta());
      assertEquals(0, dBIN0.getLevel());
      assertFalse(dBIN0.isRoot());
      assertEquals(0, int0);
      assertEquals((-1L), dBIN0.getLastFullVersion());
  }

  @Test
  public void test146()  throws Throwable  {
      IN iN0 = new IN();
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        iN0.createNewInstance(byteArray0, (-3), 683);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test147()  throws Throwable  {
      IN iN0 = new IN();
      boolean boolean0 = iN0.isSoughtNode(2004L, false);
      assertFalse(boolean0);
      
      iN0.hook624();
      assertFalse(iN0.getDirty());
      assertEquals((-1L), iN0.getLastFullVersion());
      assertEquals(0, iN0.getAccumulatedDelta());
      assertEquals(0, iN0.getLevel());
      assertTrue(iN0.needsSplitting());
      assertFalse(iN0.isRoot());
      assertEquals(0L, iN0.getGeneration());
      assertEquals("IN", iN0.shortClassName());
  }

  @Test
  public void test148()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_trackProvisionalObsolete iN_IN_trackProvisionalObsolete0 = new IN.IN_trackProvisionalObsolete(bIN0, bIN0, (-665), 2955002088054212286L);
      iN_IN_trackProvisionalObsolete0._this.trackProvisionalObsolete(bIN0, (-1527L), (-1527L));
      assertEquals(64L, bIN0.getInMemorySize());
  }

  @Test
  public void test150()  throws Throwable  {
      DIN dIN0 = new DIN();
      assertEquals(0, dIN0.getNEntries());
      
      boolean boolean0 = dIN0.isEvictable();
      assertEquals(0L, dIN0.getGeneration());
      assertEquals(0, dIN0.getAccumulatedDelta());
      assertTrue(dIN0.needsSplitting());
      assertEquals(0, dIN0.getLevel());
      assertTrue(boolean0);
      assertEquals((-1L), dIN0.getLastFullVersion());
  }

  @Test
  public void test151()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[1];
      ChildReference childReference0 = new ChildReference((Node) dIN0, byteArray0, 1723L, (byte)0);
      try { 
        dIN0.insertEntry1(childReference0);
        fail("Expecting exception: InconsistentNodeException");
      
      } catch(InconsistentNodeException e) {
         //
         // Node 0 should have been split before calling insertEntry
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_insertEntry1", e);
      }
  }

  @Test
  public void test152()  throws Throwable  {
      BIN bIN0 = new BIN();
      int int0 = bIN0.compareTo(bIN0);
      assertEquals(0, bIN0.getLevel());
      assertFalse(bIN0.isRoot());
      assertTrue(bIN0.needsSplitting());
      assertEquals(0, int0);
      assertEquals(0, bIN0.getNEntries());
      assertFalse(bIN0.getDirty());
      assertEquals(0L, bIN0.getGeneration());
  }

  @Test
  public void test153()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.initEntryLsn((byte)104);
      assertFalse(dBIN0.isRoot());
      assertEquals(0, dBIN0.getLevel());
      assertEquals(0, dBIN0.getAccumulatedDelta());
      assertTrue(dBIN0.needsSplitting());
      assertFalse(dBIN0.getDirty());
      assertEquals((-1L), dBIN0.getLastFullVersion());
      assertEquals(0, dBIN0.getNEntries());
      assertEquals(0L, dBIN0.getGeneration());
  }

  @Test
  public void test154()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.log((LogManager) null, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test155()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      int int0 = dBIN0.getLevel();
      assertEquals((-1L), dBIN0.getLastFullVersion());
      assertFalse(dBIN0.getDirty());
      assertEquals(0L, dBIN0.getGeneration());
      assertEquals(0, int0);
      assertFalse(dBIN0.isDbRoot());
      assertTrue(dBIN0.needsSplitting());
  }

  @Test
  public void test156()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.getDupTreeKey();
      assertFalse(bIN0.getDirty());
      assertEquals(0L, bIN0.getGeneration());
      assertEquals(0, bIN0.getAccumulatedDelta());
      assertTrue(bIN0.needsSplitting());
      assertFalse(bIN0.isRoot());
      assertEquals(0, bIN0.getLevel());
      assertEquals(0, bIN0.getNEntries());
      assertEquals((-1L), bIN0.getLastFullVersion());
  }

  @Test
  public void test157()  throws Throwable  {
      IN iN0 = new IN();
      try { 
        iN0.hook620();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // IN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test158()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.getInMemorySize();
      assertEquals((-1L), dBIN0.getLastFullVersion());
      assertEquals(0L, dBIN0.getGeneration());
      assertFalse(dBIN0.getDirty());
      assertEquals(0, dBIN0.getNEntries());
      assertEquals(0, dBIN0.getLevel());
      assertEquals(0, dBIN0.getAccumulatedDelta());
      assertFalse(dBIN0.isDbRoot());
      assertTrue(dBIN0.needsSplitting());
  }

  @Test
  public void test159()  throws Throwable  {
      BIN bIN0 = new BIN();
      byte[] byteArray0 = new byte[8];
      ChildReference childReference0 = new ChildReference((Node) bIN0, byteArray0, 1360L);
      // Undeclared exception!
      try { 
        bIN0.insertEntry(childReference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test160()  throws Throwable  {
      BIN bIN0 = new BIN();
      boolean boolean0 = bIN0.deleteEntry((byte) (-29), false);
      assertFalse(boolean0);
      assertEquals(0, bIN0.getAccumulatedDelta());
      assertTrue(bIN0.needsSplitting());
      assertEquals((-1L), bIN0.getLastFullVersion());
      assertEquals(0L, bIN0.getGeneration());
      assertEquals(0, bIN0.getLevel());
  }

  @Test
  public void test161()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.setIsRoot(false);
      assertTrue(dBIN0.getDirty());
  }

  @Test
  public void test162()  throws Throwable  {
      IN iN0 = new IN();
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        iN0.split(dIN0, 1, (-665));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test163()  throws Throwable  {
      IN iN0 = new IN();
      iN0.setProhibitNextDelta();
      assertEquals(0, iN0.getLevel());
      assertEquals(0, iN0.getNEntries());
      assertEquals("IN", iN0.shortClassName());
      assertEquals(0L, iN0.getGeneration());
      assertFalse(iN0.getDirty());
      assertEquals((-1L), iN0.getLastFullVersion());
      assertTrue(iN0.needsSplitting());
      assertEquals(0, iN0.getAccumulatedDelta());
  }

  @Test
  public void test164()  throws Throwable  {
      BIN bIN0 = new BIN();
      try { 
        bIN0.hook623();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // BIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test165()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.latchNoWait();
      bIN0.hook621();
      //  // Unstable assertion: assertEquals(172L, bIN0.getGeneration());
  }

  @Test
  public void test166()  throws Throwable  {
      BIN bIN0 = new BIN();
      byte[] byteArray0 = new byte[6];
      bIN0.verify(byteArray0);
      //  // Unstable assertion: assertEquals(87L, bIN0.getGeneration());
  }

  @Test
  public void test167()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      IN.IN_updateEntry2 iN_IN_updateEntry2_0 = new IN.IN_updateEntry2(dBIN0, (-2120), dBIN0, (-2120));
      // Undeclared exception!
      try { 
        iN_IN_updateEntry2_0._this.updateEntry((-2459), (Node) dBIN0, (long) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2459
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test168()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      IN.dumpDeletedState(stringBuffer0, (byte) (-80));
      assertEquals("<knownDeleted val=\"false\"/><pendingDeleted val=\"false\"/>", stringBuffer0.toString());
      assertEquals("<knownDeleted val=\"false\"/><pendingDeleted val=\"false\"/>", stringWriter0.toString());
  }

  @Test
  public void test169()  throws Throwable  {
      BIN bIN0 = new BIN();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      bIN0.dumpLog(stringBuffer0, false);
      assertEquals(142, stringBuffer0.capacity());
      assertEquals("<bin><node>0</node><key v=\"\"/><isRoot val=\"false\"/><level val=\"0\"/><entries numEntries=\"0\" length=\"0\" baseFileNumber=\"-1\"></entries></bin>", stringWriter0.toString());
  }

  @Test
  public void test170()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.clearPendingDeleted(120);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 120
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test171()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      IN.IN_validateSubtreeBeforeDelete iN_IN_validateSubtreeBeforeDelete0 = new IN.IN_validateSubtreeBeforeDelete(dBIN0, (-665));
      // Undeclared exception!
      try { 
        iN_IN_validateSubtreeBeforeDelete0.hook628();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -665
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test172()  throws Throwable  {
      IN iN0 = new IN();
      iN0.isEvictionProhibited();
      assertEquals(0L, iN0.getGeneration());
      assertEquals((-1L), iN0.getLastFullVersion());
      assertEquals(0, iN0.getAccumulatedDelta());
      assertEquals(0, iN0.getLevel());
      assertEquals(0, iN0.getNEntries());
      assertTrue(iN0.needsSplitting());
      assertFalse(iN0.getDirty());
  }

  @Test
  public void test173()  throws Throwable  {
      IN.IN_deleteEntry iN_IN_deleteEntry0 = new IN.IN_deleteEntry((IN) null, 0, true);
      iN_IN_deleteEntry0.hook616();
  }

  @Test
  public void test174()  throws Throwable  {
      IN iN0 = new IN();
      IN.IN_deleteEntry iN_IN_deleteEntry0 = new IN.IN_deleteEntry(iN0, (-665), true);
      // Undeclared exception!
      try { 
        iN_IN_deleteEntry0.hook649();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -665
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test175()  throws Throwable  {
      IN iN0 = new IN();
      IN.IN_deleteEntry iN_IN_deleteEntry0 = new IN.IN_deleteEntry(iN0, (-665), true);
      iN_IN_deleteEntry0.hook648();
      assertEquals(24L, iN0.getInMemorySize());
      assertFalse(iN0.getDirty());
  }

  @Test
  public void test176()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_setLsn iN_IN_setLsn0 = new IN.IN_setLsn(bIN0, (-665), (-665));
      iN_IN_setLsn0.hook639();
      assertEquals(24L, bIN0.getInMemorySize());
      assertTrue(bIN0.needsSplitting());
  }

  @Test
  public void test177()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.updateEntry((int) (byte)32, (long) (byte)32, (byte)74);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 128
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }
}
