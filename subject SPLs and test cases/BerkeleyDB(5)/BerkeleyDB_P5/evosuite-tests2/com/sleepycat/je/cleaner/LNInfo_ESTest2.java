/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 22:18:12 KST 2017
 */

package com.sleepycat.je.cleaner;

import org.junit.Test;
import static org.junit.Assert.*;
import com.sleepycat.je.cleaner.LNInfo;
import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.tree.LN;
import com.sleepycat.je.tree.MapLN;
import com.sleepycat.je.tree.NameLN;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class LNInfo_ESTest2 extends LNInfo_ESTest_scaffolding2 {

  @Test
  public void test00()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[0];
      LNInfo lNInfo0 = new LNInfo((LN) nameLN0, databaseId0, byteArray0, byteArray0);
      NameLN nameLN1 = (NameLN)lNInfo0.getLN();
      //  // Unstable assertion: assertEquals(13L, nameLN1.getNodeId());
  }

  @Test
  public void test01()  throws Throwable  {
      LN lN0 = new LN();
      LNInfo lNInfo0 = new LNInfo(lN0, (DatabaseId) null, (byte[]) null, (byte[]) null);
      LN lN1 = lNInfo0.getLN();
      assertFalse(lN1.containsDuplicates());
  }

  @Test
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      LNInfo lNInfo0 = new LNInfo((LN) null, (DatabaseId) null, byteArray0, byteArray0);
      byte[] byteArray1 = lNInfo0.getKey();
      assertSame(byteArray1, byteArray0);
  }

  @Test
  public void test03()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[0];
      LNInfo lNInfo0 = new LNInfo((LN) nameLN0, databaseId0, byteArray0, byteArray0);
      lNInfo0.getKey();
      //  // Unstable assertion: assertEquals(10L, nameLN0.getNodeId());
      //  // Unstable assertion: assertEquals(10L, nameLN0.getLastId());
  }

  @Test
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      LNInfo lNInfo0 = new LNInfo((LN) null, (DatabaseId) null, byteArray0, byteArray0);
      byte[] byteArray1 = lNInfo0.getDupKey();
      assertSame(byteArray1, byteArray0);
  }

  @Test
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      LN lN0 = new LN(byteArray0);
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray1 = new byte[5];
      LNInfo lNInfo0 = new LNInfo(lN0, databaseId0, byteArray1, byteArray0);
      byte[] byteArray2 = lNInfo0.getDupKey();
      //  // Unstable assertion: assertEquals(7L, lN0.getNodeId());
      //  // Unstable assertion: assertSame(byteArray0, byteArray2);
  }

  @Test
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      LNInfo lNInfo0 = new LNInfo((LN) null, (DatabaseId) null, byteArray0, (byte[]) null);
      DatabaseId databaseId0 = lNInfo0.getDbId();
      assertNull(databaseId0);
  }

  @Test
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      LN lN0 = new LN(byteArray0);
      DatabaseId databaseId0 = new DatabaseId();
      LNInfo lNInfo0 = new LNInfo(lN0, databaseId0, byteArray0, byteArray0);
      lNInfo0.getDbId();
      //  // Unstable assertion: assertEquals(4L, lN0.getNodeId());
      //  // Unstable assertion: assertEquals(4L, lN0.getLastId());
  }

  @Test
  public void test08()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      DatabaseId databaseId0 = new DatabaseId((-1917));
      byte[] byteArray0 = new byte[2];
      LNInfo lNInfo0 = new LNInfo((LN) mapLN0, databaseId0, byteArray0, byteArray0);
      lNInfo0.getDbId();
      //  // Unstable assertion: assertEquals(1L, mapLN0.getLastId());
  }

  @Test
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      LNInfo lNInfo0 = new LNInfo((LN) null, (DatabaseId) null, byteArray0, byteArray0);
      int int0 = lNInfo0.getMemorySize();
      assertEquals(128, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      LN lN0 = new LN();
      LNInfo lNInfo0 = new LNInfo(lN0, (DatabaseId) null, (byte[]) null, (byte[]) null);
      int int0 = lNInfo0.getMemorySize();
      assertEquals(80, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      DatabaseId databaseId0 = new DatabaseId();
      LNInfo lNInfo0 = new LNInfo((LN) null, databaseId0, (byte[]) null, byteArray0);
      byte[] byteArray1 = lNInfo0.getKey();
      assertNull(byteArray1);
  }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      LNInfo lNInfo0 = new LNInfo((LN) null, (DatabaseId) null, byteArray0, (byte[]) null);
      LN lN0 = lNInfo0.getLN();
      assertNull(lN0);
  }

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      DatabaseId databaseId0 = new DatabaseId((int) (byte)23);
      LNInfo lNInfo0 = new LNInfo((LN) null, databaseId0, byteArray0, (byte[]) null);
      byte[] byteArray1 = lNInfo0.getDupKey();
      assertNull(byteArray1);
  }

  @Test
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      DatabaseId databaseId0 = new DatabaseId((int) (byte)23);
      LNInfo lNInfo0 = new LNInfo((LN) null, databaseId0, byteArray0, (byte[]) null);
      DatabaseId databaseId1 = lNInfo0.getDbId();
      assertSame(databaseId0, databaseId1);
  }
}
