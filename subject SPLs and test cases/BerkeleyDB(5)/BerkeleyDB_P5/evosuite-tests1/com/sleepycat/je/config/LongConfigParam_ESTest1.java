/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 19:16:41 KST 2017
 */

package com.sleepycat.je.config;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class LongConfigParam_ESTest1 extends LongConfigParam_ESTest_scaffolding1 {

  @Test
  public void test0()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = new Long((-121L));
      LongConfigParam longConfigParam0 = new LongConfigParam("# The minimum age of a file (number of files between it and the\n# active file) to qualify it for cleaning under any conditions.\n# The default is set to 2.", (Long) null, long0, long1, false, "# The minimum age of a file (number of files between it and the\n# active file) to qualify it for cleaning under any conditions.\n# The default is set to 2.");
      longConfigParam0.validate();
      assertFalse(longConfigParam0.isMutable());
  }

  @Test
  public void test1()  throws Throwable  {
      String string0 = "";
      Long long0 = new Long((-1906L));
      LongConfigParam longConfigParam0 = new LongConfigParam("o,{bDK9~ +S\"B/*", long0, long0, long0, true, "o,{bDK9~ +S\"B/*");
      try { 
        longConfigParam0.validateValue("36");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.sleepycat.je.config.LongConfigParam: param o,{bDK9~ +S\"B/* doesn't validate, 36 is greater than max  of -1906
         //
         assertThrownBy("com.sleepycat.je.config.LongConfigParam", e);
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Long long0 = Long.getLong("# The minimum age of a file (number of files between it and the\n# active file) to qualify it for cleaning under any conditions.\n# The default is set to 2.");
      Long long1 = new Long((-121L));
      LongConfigParam longConfigParam0 = new LongConfigParam("# The minimum age of a file (number of files between it and the\n# active file) to qualify it for cleaning under any conditions.\n# The default is set to 2.", (Long) null, long0, long1, false, "# The minimum age of a file (number of files between it and the\n# active file) to qualify it for cleaning under any conditions.\n# The default is set to 2.");
      try { 
        longConfigParam0.validateValue("# maximum = 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.sleepycat.je.config.LongConfigParam: # maximum = 0 not valid value for # The minimum age of a file (number of files between it and the
         // # active file) to qualify it for cleaning under any conditions.
         // # The default is set to 2.
         //
         assertThrownBy("com.sleepycat.je.config.LongConfigParam", e);
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Long long0 = new Long((-1L));
      LongConfigParam longConfigParam0 = null;
      try {
        longConfigParam0 = new LongConfigParam("", long0, long0, long0, false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  A configuration parameter name can't be null or 0 length
         //
         assertThrownBy("com.sleepycat.je.config.ConfigParam", e);
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Long long0 = new Long(0L);
      LongConfigParam longConfigParam0 = new LongConfigParam("# The minimum age of a file (number of files between it and the\n# active file) to qualify it for cleaning under any conditions.\n# The default is set to 2.", (Long) null, long0, long0, false, "# The minimum age of a file (number of files between it and the\n# active file) to qualify it for cleaning under any conditions.\n# The default is set to 2.");
      String string0 = longConfigParam0.getExtraDescription();
      assertEquals("# maximum = 0", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      Long long0 = new Long(2822L);
      LongConfigParam longConfigParam0 = new LongConfigParam("# The minimum age of a file (number of files between it and the\n# active file) to qualify it for cleaning under any conditions.\n# The default is set to 2.", long0, long0, long0, false, "# The minimum age of a file (number of files between it and the\n# active file) to qualify it for cleaning under any conditions.\n# The default is set to 2.");
      String string0 = longConfigParam0.getExtraDescription();
      assertEquals("# minimum = 2822\n# maximum = 2822", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      Long long0 = new Long(2822L);
      Long long1 = new Long((-130L));
      LongConfigParam longConfigParam0 = new LongConfigParam("# The minimum age of a file (number of files between it and the\n# active file) to qualify it for cleaning under any conditions.\n# The default is set to 2.", long0, long0, long1, false, "# The minimum age of a file (number of files between it and the\n# active file) to qualify it for cleaning under any conditions.\n# The default is set to 2.");
      try { 
        longConfigParam0.validate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.sleepycat.je.config.LongConfigParam: param # The minimum age of a file (number of files between it and the
         // # active file) to qualify it for cleaning under any conditions.
         // # The default is set to 2. doesn't validate, -130 is less than min of 2822
         //
         assertThrownBy("com.sleepycat.je.config.LongConfigParam", e);
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Long long0 = new Long(0L);
      LongConfigParam longConfigParam0 = new LongConfigParam("# The minimum age of a file (number of files between it and the\n# active file) to qualify it for cleaning under any conditions.\n# The default is set to 2.", long0, long0, long0, false, "# The minimum age of a file (number of files between it and the\n# active file) to qualify it for cleaning under any conditions.\n# The default is set to 2.");
      longConfigParam0.validate();
      assertEquals("# The minimum age of a file (number of files between it and the\n# active file) to qualify it for cleaning under any conditions.\n# The default is set to 2.", longConfigParam0.getDescription());
  }

  @Test
  public void test8()  throws Throwable  {
      Long long0 = Long.getLong("# The minimum age of a file (number of files between it and the\n# active file) to qualify it for cleaning under any conditions.\n# The default is set to 2.");
      Long long1 = new Long((-121L));
      LongConfigParam longConfigParam0 = new LongConfigParam("# The minimum age of a file (number of files between it and the\n# active file) to qualify it for cleaning under any conditions.\n# The default is set to 2.", (Long) null, long0, long1, false, "# The minimum age of a file (number of files between it and the\n# active file) to qualify it for cleaning under any conditions.\n# The default is set to 2.");
      String string0 = longConfigParam0.getExtraDescription();
      assertEquals("", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      Long long0 = Long.getLong("# The minimum age of a file (number of files between it and the\n# active file) to qualify it for cleaning under any conditions.\n# The default is set to 2.");
      LongConfigParam longConfigParam0 = null;
      try {
        longConfigParam0 = new LongConfigParam("# The minimum age of a file (number of files between it and the\n# active file) to qualify it for cleaning under any conditions.\n# The default is set to 2.", (Long) null, long0, long0, false, "# The minimum age of a file (number of files between it and the\n# active file) to qualify it for cleaning under any conditions.\n# The default is set to 2.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.config.LongConfigParam", e);
      }
  }
}
