/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 11:46:45 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.EnvironmentConfig;
import com.sleepycat.je.config.BooleanConfigParam;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.dbi.DbConfigManager;

import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class Node_ESTest5 extends Node_ESTest_scaffolding5 {

  @Test
  public void test00()  throws Throwable  {
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      fileSummaryLN0.marshallOutsideWriteLatch();
      //  // Unstable assertion: assertEquals(2147466242L, fileSummaryLN0.getLastId());
  }

  @Test
  public void test01()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      Node.getNextNodeId();
      mapLN0.dumpString(0, false);
      Node.setLastNodeId(2147466234L);
      mapLN0.beginTag();
      BIN bIN0 = new BIN();
      bIN0.getCursorSet();
      NameLN nameLN0 = new NameLN();
      nameLN0.endTag();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      bIN0.dumpLog(stringBuffer0, false);
      DbConfigManager dbConfigManager0 = new DbConfigManager((EnvironmentConfig) null);
      // Undeclared exception!
      try { 
        dbConfigManager0.getBoolean((BooleanConfigParam) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.dbi.DbConfigManager", e);
      }
  }

  @Test
  public void test02()  throws Throwable  {
      DIN dIN0 = new DIN();
      TreeLocation treeLocation0 = new TreeLocation();
      dIN0.matchLNByNodeId(treeLocation0, 0);
      //  // Unstable assertion: assertEquals(2L, dIN0.getLastId());
  }

  @Test
  public void test03()  throws Throwable  {
      LN lN0 = new LN();
      lN0.isValidForDelete();
      //  // Unstable assertion: assertEquals(1L, lN0.getLastId());
  }

  @Test
  public void test04()  throws Throwable  {
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      int int0 = fileSummaryLN0.getLogSize();
      //  // Unstable assertion: assertEquals(9, int0);
      //  // Unstable assertion: assertEquals(0L, fileSummaryLN0.getLastId());
  }

  @Test
  public void test05()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LN lN0 = new LN(databaseEntry0);
      lN0.countAsObsoleteWhenLogged();
      //  // Unstable assertion: assertEquals((-3L), lN0.getLastId());
  }

  @Test
  public void test06()  throws Throwable  {
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      fileSummaryLN0.canBeAncestor(true);
      //  // Unstable assertion: assertEquals((-5L), fileSummaryLN0.getLastId());
  }

  @Test
  public void test07()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("com.sleepycat.je.tree.MapLN");
      // Undeclared exception!
      try { 
        mapLN0.writeToLog(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("");
      // Undeclared exception!
      try { 
        fileSummaryLN0.readFromLog(byteBuffer0, (byte) (-6));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      // Undeclared exception!
      try { 
        mapLN0.dump((-586));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -586
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      mapLN0.getType();
      //  // Unstable assertion: assertEquals(1L, mapLN0.getLastId());
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte)0, (int) (byte)69);
      databaseEntry0.setData(byteArray0);
      LN lN0 = new LN(databaseEntry0);
      long long0 = lN0.getNodeId();
      //  // Unstable assertion: assertEquals(2L, long0);
  }

  @Test
  public void test12()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode(" id=\"");
      // Undeclared exception!
      try { 
        dBIN0.writeToLog(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte)0, (int) (byte)14);
      databaseEntry0.setSize((byte)0);
      LN lN0 = new LN(databaseEntry0);
      String string0 = lN0.toString();
      //  // Unstable assertion: assertEquals("<ln>\n  <node>2</node>\n  <data></data>\n</ln>", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN((-1));
      byte[] byteArray0 = new byte[9];
      dupCountLN0.verify(byteArray0);
      //  // Unstable assertion: assertEquals(3L, dupCountLN0.getNodeId());
  }

  @Test
  public void test15()  throws Throwable  {
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      fileSummaryLN0.dump(0);
      //  // Unstable assertion: assertEquals(1L, fileSummaryLN0.getLastId());
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = Node.getLastId();
      //  // Unstable assertion: assertEquals(1L, long0);
  }

  @Test
  public void test17()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN((-1));
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("  <count v=\"-1\"/>\n  <node>2147466236</node>\n  <data></data>\n");
      dupCountLN0.readFromLog(byteBuffer0, (byte)8);
      //  // Unstable assertion: assertEquals(7L, dupCountLN0.getLastId());
  }

  @Test
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      LN lN0 = new LN(byteArray0);
      lN0.postLogWork((byte)12);
      //  // Unstable assertion: assertEquals(0L, lN0.getLastId());
  }

  @Test
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      LN lN0 = new LN(byteArray0);
      boolean boolean0 = lN0.marshallOutsideWriteLatch();
      //  // Unstable assertion: assertEquals(3L, lN0.getNodeId());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      nameLN0.setNodeId(2147466226L);
      assertEquals(2147466226L, nameLN0.getNodeId());
  }

  @Test
  public void test21()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      nameLN0.postFetchInit((DatabaseImpl) null, 3323L);
      //  // Unstable assertion: assertEquals(0L, nameLN0.getLastId());
  }

  @Test
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte)0, (int) (byte)14);
      databaseEntry0.setSize((byte)0);
      LN lN0 = new LN(databaseEntry0);
      TreeLocation treeLocation0 = new TreeLocation();
      try { 
        lN0.matchLNByNodeId(treeLocation0, (byte)0);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // matchLNByNodeId called on non DIN/DBIN
         //
         assertThrownBy("com.sleepycat.je.tree.Node", e);
      }
  }

  @Test
  public void test23()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      long long0 = dBIN0.getMemorySizeIncludedByParent();
      //  // Unstable assertion: assertEquals(3L, dBIN0.getLastId());
      //  // Unstable assertion: assertEquals(0L, long0);
  }

  @Test
  public void test24()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN((-1));
      String string0 = dupCountLN0.shortDescription();
      //  // Unstable assertion: assertEquals("<com.sleepycat.je.tree.DupCountLN/1", string0);
  }
}
