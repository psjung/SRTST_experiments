/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 16:07:48 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.Comparator;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseEntry;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class Key_ESTest4 extends Key_ESTest_scaffolding4 {

  @Test
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Key key0 = new Key(byteArray0);
      byte[] byteArray1 = key0.getKey();
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Key key0 = new Key(byteArray0);
      byte[] byteArray1 = key0.getKey();
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Key key0 = new Key(byteArray0);
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      byte[] byteArray1 = Key.makeKey(databaseEntry0);
      Key key1 = new Key(byteArray1);
      int int0 = key0.compareTo(key1);
      assertEquals(7, int0);
      assertFalse(key1.equals((Object)key0));
  }

  @Test
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Key key0 = new Key(byteArray0);
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      byte[] byteArray1 = Key.makeKey(databaseEntry0);
      Key key1 = new Key(byteArray1);
      int int0 = key1.compareTo(key0);
      assertEquals((-7), int0);
      assertFalse(key0.equals((Object)key1));
  }

  @Test
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)0;
      Key key0 = new Key(byteArray0);
      Key.getNoFormatString(byteArray0);
      key0.hashCode();
      Key.DUMP_BINARY = true;
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      key0.DUMP_INT_BINDING = true;
      databaseEntry0.setPartialOffset(0);
      databaseEntry0.setSize((byte)0);
      byte[] byteArray1 = Key.makeKey(databaseEntry0);
      Key.getNoFormatString(byteArray0);
      String string0 = Key.getNoFormatString(byteArray1);
      assertEquals("key=<key v=\"\"/>", string0);
      
      boolean boolean0 = key0.equals("");
      assertFalse(boolean0);
      
      String string1 = Key.getNoFormatString(byteArray0);
      assertEquals("key=<key v=\"54 0 \"/>", string1);
  }

  @Test
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = new byte[6];
      int int0 = Key.compareKeys(byteArray0, byteArray1, (Comparator) null);
      assertEquals(1, int0);
  }

  @Test
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Key key0 = new Key(byteArray0);
      byte[] byteArray1 = new byte[4];
      Key key1 = new Key(byteArray1);
      boolean boolean0 = key0.equals(key1);
      assertFalse(key1.equals((Object)key0));
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      byte[] byteArray1 = Key.makeKey(databaseEntry0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Key.makeKey((DatabaseEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Key", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      databaseEntry0.setSize((byte) (-1));
      // Undeclared exception!
      try { 
        Key.makeKey(databaseEntry0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Key", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Key.dumpString((byte[]) null, (-1372));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1372
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Key key0 = new Key((byte[]) null);
      // Undeclared exception!
      try { 
        key0.compareTo(key0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Key", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Key key0 = new Key(byteArray0);
      // Undeclared exception!
      try { 
        key0.compareTo(byteArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [B cannot be cast to com.sleepycat.je.tree.Key
         //
         assertThrownBy("com.sleepycat.je.tree.Key", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Key.compareKeys(byteArray0, (byte[]) null, (Comparator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Key", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = Key.dumpString((byte[]) null, 1);
      assertEquals(" <key v=\"<null>\"/>", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Key key0 = new Key(byteArray0);
      int int0 = key0.compareTo(key0);
      assertEquals(0, int0);
  }

  @Test
  public void test16()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      byte[] byteArray0 = Key.makeKey(databaseEntry0);
      String string0 = Key.dumpString(byteArray0, 1);
      assertEquals(" <key v=\"\"/>", string0);
  }

  @Test
  public void test17()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      byte[] byteArray0 = Key.makeKey(databaseEntry0);
      databaseEntry0.setOffset(1093);
      databaseEntry0.setPartialLength((-334));
      Key.compareKeys(byteArray0, byteArray0, (Comparator) null);
      databaseEntry0.setPartial((-334), (-1900), true);
      Key.dumpString(byteArray0, 1);
      byte[] byteArray1 = new byte[0];
      Key key0 = new Key(byteArray1);
      Key.DUMP_INT_BINDING = true;
  }

  @Test
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)27;
      int int0 = Key.compareKeys(byteArray0, byteArray1, (Comparator) null);
      assertEquals((-27), int0);
  }

  @Test
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Key key0 = new Key(byteArray0);
      boolean boolean0 = key0.equals(key0);
      assertTrue(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Key key0 = new Key(byteArray0);
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      byte[] byteArray1 = Key.makeKey(databaseEntry0);
      Key key1 = new Key(byteArray1);
      boolean boolean0 = key1.equals(key0);
      assertFalse(key0.equals((Object)key1));
      assertFalse(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Key key0 = new Key(byteArray0);
      // Undeclared exception!
      try { 
        key0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Key", e);
      }
  }

  @Test
  public void test22()  throws Throwable  {
      Key key0 = new Key((byte[]) null);
      // Undeclared exception!
      try { 
        key0.equals(key0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Key", e);
      }
  }

  @Test
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, 2, 97);
      // Undeclared exception!
      try { 
        Key.makeKey(databaseEntry0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.lang.System", e);
      }
  }

  @Test
  public void test24()  throws Throwable  {
      Key key0 = new Key((byte[]) null);
      byte[] byteArray0 = key0.getKey();
      assertNull(byteArray0);
  }

  @Test
  public void test25()  throws Throwable  {
      Key.getNoFormatString((byte[]) null);
      Key key0 = new Key((byte[]) null);
      Key.dumpString((byte[]) null, 1);
      // Undeclared exception!
      try { 
        key0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.Key", e);
      }
  }
}
