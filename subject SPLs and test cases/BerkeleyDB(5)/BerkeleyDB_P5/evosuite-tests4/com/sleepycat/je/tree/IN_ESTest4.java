/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 16:03:59 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.File;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.LinkedList;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.EnvironmentConfig;
import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.dbi.DbConfigManager;
import com.sleepycat.je.dbi.EnvironmentImpl;
import com.sleepycat.je.dbi.INList;
import com.sleepycat.je.latch.LatchException;
import com.sleepycat.je.latch.LatchNotHeldException;
import com.sleepycat.je.log.LogManager;

import de.ovgu.cide.jakutil.ReturnBoolean;
import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class IN_ESTest4 extends IN_ESTest_scaffolding4 {

  @Test
  public void test000()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.latchNoWait();
      bIN0.isLatchOwner();
  }

  @Test
  public void test001()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.isCompressible();
  }

  @Test
  public void test002()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.canBeAncestor(true);
  }

  @Test
  public void test003()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.updateMemorySize(dBIN0, dBIN0);
  }

  @Test
  public void test004()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_trackProvisionalObsolete iN_IN_trackProvisionalObsolete0 = new IN.IN_trackProvisionalObsolete(bIN0, bIN0, 16, 2423);
      iN_IN_trackProvisionalObsolete0.obsoleteLsn2 = (-1360L);
      iN_IN_trackProvisionalObsolete0.execute();
  }

  @Test
  public void test005()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_trackProvisionalObsolete iN_IN_trackProvisionalObsolete0 = new IN.IN_trackProvisionalObsolete(bIN0, bIN0, 16, 2423);
      iN_IN_trackProvisionalObsolete0.execute();
  }

  @Test
  public void test006()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.isSoughtNode(8922441053644185821L, true);
  }

  @Test
  public void test007()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[5];
      BIN bIN0 = null;
      try {
        bIN0 = new BIN(databaseImpl0, byteArray0, (int) (byte)0, (int) (byte) (-3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test008()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.validateSubtreeBeforeDelete(65535);
  }

  @Test
  public void test009()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        dIN0.updateEntry((-2), 2852L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -8
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test010()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        dIN0.splitInternal((IN) null, (byte)0, 6169, 6169);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DIN", e);
      }
  }

  @Test
  public void test011()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_trackProvisionalObsolete iN_IN_trackProvisionalObsolete0 = new IN.IN_trackProvisionalObsolete(bIN0, bIN0, (-7034L), 2423);
      DBIN dBIN0 = new DBIN();
      DupCountLN dupCountLN0 = new DupCountLN();
      // Undeclared exception!
      try { 
        dBIN0.updateEntry(2423, (Node) dupCountLN0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2423
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test012()  throws Throwable  {
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig();
      DbConfigManager dbConfigManager0 = new DbConfigManager(environmentConfig0);
      IN.computeArraysOverhead(dbConfigManager0);
  }

  @Test
  public void test013()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.updateMemorySize(1L, 2360);
  }

  @Test
  public void test014()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.setLastFullLsn(0L);
  }

  @Test
  public void test017()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.endTag();
  }

  @Test
  public void test018()  throws Throwable  {
      IN iN0 = new IN();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      iN0.dumpLogAdditional(stringBuffer0);
  }

  @Test
  public void test019()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[3];
      DBIN dBIN0 = null;
      try {
        dBIN0 = new DBIN(databaseImpl0, byteArray0, 2885, byteArray0, 3620);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test020()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.canBeAncestor(false);
  }

  @Test
  public void test021()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_validateSubtreeBeforeDelete iN_IN_validateSubtreeBeforeDelete0 = new IN.IN_validateSubtreeBeforeDelete(bIN0, 16);
      iN_IN_validateSubtreeBeforeDelete0.execute();
  }

  @Test
  public void test022()  throws Throwable  {
      DIN dIN0 = new DIN();
      IN.IN_isValidForDelete iN_IN_isValidForDelete0 = new IN.IN_isValidForDelete(dIN0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("Split:");
      // Undeclared exception!
      try { 
        iN_IN_isValidForDelete0._this.writeToLog(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test023()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.verifyMemorySize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test024()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        dIN0.splitSpecial((IN) null, 0, 0, byteArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DIN", e);
      }
  }

  @Test
  public void test025()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.setLsnElement((byte)65, (byte) (-93));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 260
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test026()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.setLsn(1572, 0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6288
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test027()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.latchNoWait();
      try { 
        bIN0.latch();
        fail("Expecting exception: LatchException");
      
      } catch(LatchException e) {
         //
         // BIN0 already held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test028()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.isEntryPendingDeleted((-2147483647));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483647
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test029()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      byte[] byteArray0 = new byte[5];
      IN.IN_updateEntryCompareKey iN_IN_updateEntryCompareKey0 = new IN.IN_updateEntryCompareKey(dBIN0, 15, dBIN0, 67108864L, byteArray0);
      // Undeclared exception!
      try { 
        iN_IN_updateEntryCompareKey0._this.isDirty(4177);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4177
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test030()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      byte[] byteArray0 = new byte[4];
      ChildReference childReference0 = new ChildReference((Node) dBIN0, byteArray0, (long) (byte)90, (byte)34);
      // Undeclared exception!
      try { 
        dBIN0.insertEntry1(childReference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test031()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.insertEntry((ChildReference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test032()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.initMemorySize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test033()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.initEntryLsn((-719));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test034()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.hook637();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test035()  throws Throwable  {
      DIN dIN0 = new DIN();
      try { 
        dIN0.hook627();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // DIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test036()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.hook625((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test037()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[7];
      IN.IN_setEntry iN_IN_setEntry0 = new IN.IN_setEntry(dIN0, 2360, dIN0, byteArray0, (-2486L), (byte)112);
      try { 
        dIN0.hook625(iN_IN_setEntry0.target);
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // DIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test038()  throws Throwable  {
      BIN bIN0 = new BIN();
      try { 
        bIN0.hook622();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // BIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test039()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.hook619(false);
        fail("Expecting exception: ReturnBoolean");
      
      } catch(ReturnBoolean e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test040()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.getMigrate(64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test041()  throws Throwable  {
      DIN dIN0 = new DIN();
      NameLN nameLN0 = new NameLN((DatabaseId) null);
      IN.IN_updateEntry iN_IN_updateEntry0 = new IN.IN_updateEntry(dIN0, 16, nameLN0);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        iN_IN_updateEntry0._this.findEntry(byteArray0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DIN", e);
      }
  }

  @Test
  public void test042()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.fetchTarget(1486);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1486
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test043()  throws Throwable  {
      DIN dIN0 = new DIN();
      SearchResult searchResult0 = new SearchResult();
      // Undeclared exception!
      try { 
        dIN0.descendOnParentSearch(searchResult0, false, false, (-1L), (Node) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test044()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.computeMemorySize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test045()  throws Throwable  {
      DbConfigManager dbConfigManager0 = new DbConfigManager((EnvironmentConfig) null);
      // Undeclared exception!
      try { 
        IN.computeArraysOverhead(dbConfigManager0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.dbi.DbConfigManager", e);
      }
  }

  @Test
  public void test046()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[8];
      IN iN0 = null;
      try {
        iN0 = new IN(databaseImpl0, byteArray0, (-260), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test047()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.dumpString((-2527), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2527
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test048()  throws Throwable  {
      IN iN0 = new IN();
      iN0.getLogSize();
  }

  @Test
  public void test049()  throws Throwable  {
      IN iN0 = new IN();
      iN0.latch(true);
  }

  @Test
  public void test050()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.setDirty(true);
  }

  @Test
  public void test051()  throws Throwable  {
      IN iN0 = new IN();
      iN0.beginTag();
  }

  @Test
  public void test052()  throws Throwable  {
      BIN bIN0 = new BIN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      bIN0.setDatabase(databaseImpl0);
  }

  @Test
  public void test053()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.releaseLatchIfOwner();
  }

  @Test
  public void test054()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.isLatchOwner();
  }

  @Test
  public void test055()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.setGeneration();
  }

  @Test
  public void test056()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.getLevel();
  }

  @Test
  public void test057()  throws Throwable  {
      DIN dIN0 = new DIN();
      try { 
        dIN0.releaseLatch();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // DIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test058()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.getNEntries();
  }

  @Test
  public void test059()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.latch();
  }

  @Test
  public void test060()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.getKeyComparator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test061()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.getIdentifierKey();
  }

  @Test
  public void test062()  throws Throwable  {
      IN iN0 = new IN();
      try { 
        iN0.insertEntry1((ChildReference) null);
        fail("Expecting exception: InconsistentNodeException");
      
      } catch(InconsistentNodeException e) {
         //
         // Node 0 should have been split before calling insertEntry
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_insertEntry1", e);
      }
  }

  @Test
  public void test063()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.getChildEvictionType();
  }

  @Test
  public void test064()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.getEvictionType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test065()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.isEvictable();
  }

  @Test
  public void test066()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      NameLN nameLN0 = new NameLN();
      dBIN0.updateMemorySize(nameLN0, nameLN0);
  }

  @Test
  public void test067()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.updateMemorySize((ChildReference) null, (ChildReference) null);
  }

  @Test
  public void test068()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.updateDupCountLNRefAndNullTarget((-1374L));
  }

  @Test
  public void test069()  throws Throwable  {
      BIN bIN0 = new BIN();
      byte[] byteArray0 = new byte[1];
      ChildReference childReference0 = new ChildReference((Node) bIN0, byteArray0, 2L);
      bIN0.updateMemorySize(childReference0, childReference0);
  }

  @Test
  public void test070()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.isSoughtNode((-2293L), false);
      dIN0.isValidForDelete();
  }

  @Test
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      IN.IN_verify iN_IN_verify0 = new IN.IN_verify((IN) null, byteArray0);
      // Undeclared exception!
      try { 
        iN_IN_verify0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_verify", e);
      }
  }

  @Test
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      BIN bIN0 = new BIN();
      bIN0.latchNoWait();
      IN.IN_verify iN_IN_verify0 = new IN.IN_verify(bIN0, byteArray0);
      iN_IN_verify0.hook632();
  }

  @Test
  public void test073()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.verify((byte[]) null);
  }

  @Test
  public void test074()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_splitInternal iN_IN_splitInternal0 = new IN.IN_splitInternal(bIN0, bIN0, (byte)118, (byte)118, 255);
      iN_IN_splitInternal0.low = (-2628);
      // Undeclared exception!
      try { 
        iN_IN_splitInternal0.hook630();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_splitInternal", e);
      }
  }

  @Test
  public void test075()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_validateSubtreeBeforeDelete iN_IN_validateSubtreeBeforeDelete0 = new IN.IN_validateSubtreeBeforeDelete(bIN0, 0);
      iN_IN_validateSubtreeBeforeDelete0.hook629();
  }

  @Test
  public void test076()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.toString();
  }

  @Test
  public void test077()  throws Throwable  {
      DIN dIN0 = new DIN();
      IN.IN_isValidForDelete iN_IN_isValidForDelete0 = new IN.IN_isValidForDelete(dIN0);
      iN_IN_isValidForDelete0._this.dumpKeys();
  }

  @Test
  public void test078()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.getLogSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test080()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.latchNoWait(false);
      Tree.SearchType tree_SearchType0 = Tree.SearchType.NORMAL;
      byte[] byteArray0 = new byte[6];
      LinkedList<BIN> linkedList0 = new LinkedList<BIN>();
      // Undeclared exception!
      try { 
        dIN0.findParent(tree_SearchType0, (-1617L), false, false, byteArray0, byteArray0, (SearchResult) null, true, true, (byte)89, linkedList0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test081()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.needsSplitting();
  }

  @Test
  public void test082()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      byte[] byteArray0 = new byte[7];
      dBIN0.deleteEntry(byteArray0, true);
  }

  @Test
  public void test083()  throws Throwable  {
      BIN bIN0 = new BIN();
      byte[] byteArray0 = new byte[5];
      bIN0.isKeyInBounds(byteArray0);
  }

  @Test
  public void test084()  throws Throwable  {
      IN.makeFetchErrorMsg("<knownDeleted val=\"", (IN) null, (-773L), (byte) (-94));
  }

  @Test
  public void test085()  throws Throwable  {
      DIN dIN0 = new DIN();
      try { 
        dIN0.getDupCountLN();
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // fetchTarget of null lsn IN=0 state=0 NULL_LSN without KnownDeleted
         //
         assertThrownBy("com.sleepycat.je.tree.ChildReference", e);
      }
  }

  @Test
  public void test086()  throws Throwable  {
      DIN dIN0 = new DIN();
      IN.makeFetchErrorMsg("w{;X=at", dIN0, 16, (byte)1);
  }

  @Test
  public void test087()  throws Throwable  {
      IN.isStatePendingDeleted((byte) (-35));
  }

  @Test
  public void test088()  throws Throwable  {
      IN.isStatePendingDeleted((byte) (-52));
  }

  @Test
  public void test089()  throws Throwable  {
      IN.isStateKnownDeleted((byte)23);
  }

  @Test
  public void test090()  throws Throwable  {
      IN.isStateKnownDeleted((byte) (-44));
  }

  @Test
  public void test091()  throws Throwable  {
      BIN bIN0 = new BIN();
      DatabaseId databaseId0 = new DatabaseId(16);
      bIN0.generateLevel(databaseId0, 4669);
  }

  @Test
  public void test092()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        dIN0.compareTo(byteArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [B cannot be cast to com.sleepycat.je.tree.IN
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test093()  throws Throwable  {
      IN iN0 = new IN();
      iN0.equals(16);
  }

  @Test
  public void test094()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[1];
      IN iN0 = null;
      try {
        iN0 = new IN(databaseImpl0, byteArray0, 0, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      IN.IN_updateEntry3 iN_IN_updateEntry3_0 = new IN.IN_updateEntry3((IN) null, (-2310), (Node) null, (-2275L), byteArray0);
      // Undeclared exception!
      try { 
        iN_IN_updateEntry3_0.hook643();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, (long) (byte) (-51));
      IN.IN_insertEntry1 iN_IN_insertEntry1_0 = new IN.IN_insertEntry1((IN) null, childReference0);
      // Undeclared exception!
      try { 
        iN_IN_insertEntry1_0.hook645();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test097()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[0];
      ChildReference childReference0 = new ChildReference((Node) dIN0, byteArray0, (-4467L));
      IN.IN_insertEntry1 iN_IN_insertEntry1_0 = new IN.IN_insertEntry1(dIN0, childReference0);
      iN_IN_insertEntry1_0.hook646();
      assertEquals(24L, dIN0.getInMemorySize());
  }

  @Test
  public void test098()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[0];
      ChildReference childReference0 = new ChildReference((Node) dIN0, byteArray0, (-4467L));
      IN.IN_insertEntry1 iN_IN_insertEntry1_0 = new IN.IN_insertEntry1(dIN0, childReference0);
      iN_IN_insertEntry1_0.hook647();
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertFalse(dIN0.getDirty());
      assertEquals(0, dIN0.getAccumulatedDelta());
      assertEquals(0, dIN0.getLevel());
      assertTrue(dIN0.needsSplitting());
      assertFalse(dIN0.isRoot());
      assertEquals(0L, dIN0.getGeneration());
  }

  @Test
  public void test099()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_trackProvisionalObsolete iN_IN_trackProvisionalObsolete0 = new IN.IN_trackProvisionalObsolete(bIN0, bIN0, (-7034L), 2423);
      iN_IN_trackProvisionalObsolete0.execute();
      iN_IN_trackProvisionalObsolete0.execute();
      assertEquals(128L, bIN0.getInMemorySize());
  }

  @Test
  public void test100()  throws Throwable  {
      BIN bIN0 = new BIN();
      byte[] byteArray0 = new byte[6];
      IN.IN_updateEntryCompareKey iN_IN_updateEntryCompareKey0 = new IN.IN_updateEntryCompareKey(bIN0, 2070, bIN0, 2070, byteArray0);
      // Undeclared exception!
      try { 
        iN_IN_updateEntryCompareKey0.execute();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2070
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      IN.IN_updateEntryCompareKey iN_IN_updateEntryCompareKey0 = new IN.IN_updateEntryCompareKey((IN) null, (-2212), (Node) null, (-2212), byteArray0);
      // Undeclared exception!
      try { 
        iN_IN_updateEntryCompareKey0.hook644();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test102()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[7];
      IN.IN_setEntry iN_IN_setEntry0 = new IN.IN_setEntry(dIN0, 2360, dIN0, byteArray0, (-2486L), (byte)112);
      // Undeclared exception!
      try { 
        iN_IN_setEntry0.hook640();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2360
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      IN.IN_setEntry iN_IN_setEntry0 = new IN.IN_setEntry((IN) null, (byte)119, (Node) null, byteArray0, 57L, (byte)53);
      iN_IN_setEntry0.hook641();
  }

  @Test
  public void test104()  throws Throwable  {
      IN.IN_splitInternal iN_IN_splitInternal0 = new IN.IN_splitInternal((IN) null, (IN) null, (-2536), (-2536), (-2536));
      // Undeclared exception!
      try { 
        iN_IN_splitInternal0.hook631();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_splitInternal", e);
      }
  }

  @Test
  public void test105()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_splitInternal iN_IN_splitInternal0 = new IN.IN_splitInternal(bIN0, bIN0, (byte)118, (byte)118, 255);
      // Undeclared exception!
      try { 
        iN_IN_splitInternal0.hook630();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_splitInternal", e);
      }
  }

  @Test
  public void test106()  throws Throwable  {
      IN.IN_splitInternal iN_IN_splitInternal0 = new IN.IN_splitInternal((IN) null, (IN) null, 54, 0, 54);
      // Undeclared exception!
      try { 
        iN_IN_splitInternal0.hook650();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_splitInternal", e);
      }
  }

  @Test
  public void test107()  throws Throwable  {
      DIN dIN0 = new DIN();
      int int0 = dIN0.getAccumulatedDelta();
      assertEquals(0, dIN0.getLevel());
      assertTrue(dIN0.needsSplitting());
      assertEquals(0, int0);
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertFalse(dIN0.getDirty());
  }

  @Test
  public void test108()  throws Throwable  {
      BIN bIN0 = new BIN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("wR");
      // Undeclared exception!
      try { 
        bIN0.readFromLog(byteBuffer0, (byte)102);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test109()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.adjustCursors((IN) null, (byte)0, 2252);
      assertTrue(dIN0.needsSplitting());
      assertEquals(0, dIN0.getLevel());
      assertFalse(dIN0.isRoot());
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertEquals(0L, dIN0.getGeneration());
      assertFalse(dIN0.getDirty());
  }

  @Test
  public void test110()  throws Throwable  {
      IN iN0 = new IN();
      long long0 = iN0.getGeneration();
      assertFalse(iN0.getDirty());
      assertTrue(iN0.needsSplitting());
      assertEquals(0L, long0);
      assertEquals(0, iN0.getLevel());
      assertFalse(iN0.isRoot());
      assertEquals("IN", iN0.shortClassName());
      assertEquals((-1L), iN0.getLastFullVersion());
  }

  @Test
  public void test111()  throws Throwable  {
      IN iN0 = new IN();
      iN0.setInListResident(true);
      assertEquals(0, iN0.getLevel());
      assertTrue(iN0.needsSplitting());
      assertFalse(iN0.isDbRoot());
      assertEquals(0, iN0.getAccumulatedDelta());
      assertEquals(0L, iN0.getGeneration());
      assertFalse(iN0.getDirty());
      assertEquals((-1L), iN0.getLastFullVersion());
      assertEquals("IN", iN0.shortClassName());
  }

  @Test
  public void test112()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.validateSubtreeBeforeDelete((byte) (-44));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -44
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test113()  throws Throwable  {
      BIN bIN0 = new BIN();
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.split(bIN0, (-5), 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DBIN", e);
      }
  }

  @Test
  public void test114()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.getEntryLsnLongArray();
      assertEquals(0, bIN0.getLevel());
      assertTrue(bIN0.needsSplitting());
      assertEquals(0L, bIN0.getGeneration());
      assertFalse(bIN0.getDirty());
      assertEquals((-1L), bIN0.getLastFullVersion());
      assertFalse(bIN0.isRoot());
  }

  @Test
  public void test115()  throws Throwable  {
      DIN dIN0 = new DIN();
      try { 
        dIN0.hook626();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // DIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test116()  throws Throwable  {
      BIN bIN0 = new BIN();
      try { 
        bIN0.getChildKey(bIN0);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // BIN.getDupKey() called
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test117()  throws Throwable  {
      DIN dIN0 = new DIN();
      try { 
        dIN0.hook621();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // DIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test118()  throws Throwable  {
      IN iN0 = new IN();
      iN0.getLogType();
      assertEquals((-1L), iN0.getLastFullVersion());
      assertEquals("IN", iN0.shortClassName());
      assertEquals(0, iN0.getLevel());
      assertTrue(iN0.needsSplitting());
      assertFalse(iN0.getDirty());
      assertEquals(0L, iN0.getGeneration());
  }

  @Test
  public void test119()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      DupCountLN dupCountLN0 = new DupCountLN();
      // Undeclared exception!
      try { 
        dBIN0.updateEntry(2423, (Node) dupCountLN0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2423
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test120()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.getState(2129587950);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2129587950
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test121()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.getMainTreeKey();
      assertEquals(0L, bIN0.getGeneration());
      assertEquals((-1L), bIN0.getLastFullVersion());
      assertTrue(bIN0.needsSplitting());
      assertFalse(bIN0.isDbRoot());
      assertEquals(0, bIN0.getAccumulatedDelta());
      assertEquals(0, bIN0.getLevel());
  }

  @Test
  public void test122()  throws Throwable  {
      IN iN0 = new IN();
      try { 
        iN0.hook624();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // IN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test123()  throws Throwable  {
      BIN bIN0 = new BIN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      // Undeclared exception!
      try { 
        bIN0.postFetchInit(databaseImpl0, 2272995512179969376L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test124()  throws Throwable  {
      DbConfigManager dbConfigManager0 = new DbConfigManager((EnvironmentConfig) null);
      // Undeclared exception!
      try { 
        IN.computeOverhead(dbConfigManager0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.dbi.DbConfigManager", e);
      }
  }

  @Test
  public void test125()  throws Throwable  {
      BIN bIN0 = new BIN();
      byte[] byteArray0 = new byte[2];
      LN lN0 = new LN();
      // Undeclared exception!
      try { 
        bIN0.updateEntry((int) (byte) (-120), (Node) lN0, (-1269L), byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -120
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test126()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.setGeneration((-3069L));
      assertEquals((-3069L), dIN0.getGeneration());
  }

  @Test
  public void test127()  throws Throwable  {
      IN iN0 = new IN();
      assertFalse(iN0.getDirty());
      
      byte[] byteArray0 = new byte[0];
      iN0.setIdentifierKey(byteArray0);
      assertEquals(0L, iN0.getGeneration());
  }

  @Test
  public void test128()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.hook638((Node) null);
      assertEquals(0L, dIN0.getGeneration());
      assertFalse(dIN0.getDirty());
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertTrue(dIN0.needsSplitting());
      assertEquals(0L, dIN0.getInMemorySize());
      assertFalse(dIN0.isRoot());
      assertEquals(0, dIN0.getAccumulatedDelta());
      assertEquals(0, dIN0.getLevel());
  }

  @Test
  public void test129()  throws Throwable  {
      DIN dIN0 = new DIN();
      IN.IN_isValidForDelete iN_IN_isValidForDelete0 = new IN.IN_isValidForDelete(dIN0);
      iN_IN_isValidForDelete0._this.isEvictionProhibited();
      assertEquals(0, dIN0.getAccumulatedDelta());
      assertTrue(dIN0.needsSplitting());
      assertEquals(0L, dIN0.getGeneration());
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertEquals(0, dIN0.getLevel());
  }

  @Test
  public void test130()  throws Throwable  {
      DIN dIN0 = new DIN();
      boolean boolean0 = dIN0.isSoughtNode((-2309L), false);
      assertFalse(boolean0);
      
      dIN0.hook627();
      assertFalse(dIN0.isRoot());
      assertTrue(dIN0.needsSplitting());
      assertEquals(0L, dIN0.getGeneration());
      assertEquals(0, dIN0.getLevel());
      assertEquals((-1L), dIN0.getLastFullVersion());
  }

  @Test
  public void test131()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[14];
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LN lN0 = new LN(databaseEntry0);
      // Undeclared exception!
      try { 
        dIN0.setEntry(2398, lN0, byteArray0, (byte)0, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2398
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test132()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.clearKnownDeleted(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test133()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.getChildKey((IN) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test134()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.adjustCursorsForInsert(188);
      assertEquals(0L, dIN0.getGeneration());
      assertEquals(0, dIN0.getLevel());
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertEquals(0, dIN0.getAccumulatedDelta());
      assertTrue(dIN0.needsSplitting());
  }

  @Test
  public void test135()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.getLsn(2320);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9281
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test136()  throws Throwable  {
      IN iN0 = new IN();
      iN0.isCompressible();
      assertEquals(0L, iN0.getGeneration());
      assertFalse(iN0.getDirty());
      assertTrue(iN0.needsSplitting());
      assertEquals("IN", iN0.shortClassName());
      assertEquals(0, iN0.getLevel());
      assertEquals(0, iN0.getAccumulatedDelta());
      assertEquals((-1L), iN0.getLastFullVersion());
  }

  @Test
  public void test137()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.updateEntry((-2025), (-4467L), (-4467L), (-985L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -8100
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      BIN bIN0 = new BIN();
      bIN0.latchNoWait();
      IN.IN_setEntry iN_IN_setEntry0 = new IN.IN_setEntry(bIN0, (byte)0, bIN0, byteArray0, 4804463560747704871L, (byte)118);
      bIN0.hook625(iN_IN_setEntry0.target);
      //  // Unstable assertion: assertEquals(343L, bIN0.getGeneration());
  }

  @Test
  public void test139()  throws Throwable  {
      DIN dIN0 = new DIN();
      boolean boolean0 = dIN0.isValidForDelete();
      //  // Unstable assertion: assertEquals(257L, dIN0.getGeneration());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test
  public void test140()  throws Throwable  {
      IN iN0 = new IN();
      String string0 = iN0.toString();
      assertEquals((-1L), iN0.getLastFullVersion());
      assertEquals("IN", iN0.shortClassName());
      assertTrue(iN0.needsSplitting());
      assertEquals("<in>\n  <node>0</node>\n  <idkey><key v=\"\"/></idkey>\n  <dirty val=\"false\"/>\n  <generation val=\"0\"/>\n  <level val=\"0\"/>\n  <isRoot val=\"false\"/>\n  <entries nEntries=\"0\">\n  </entries>\n</in>", string0);
  }

  @Test
  public void test141()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.rebuildINList((INList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test142()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.getDatabaseId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test143()  throws Throwable  {
      DIN dIN0 = new DIN();
      int int0 = dIN0.getMaxEntries();
      assertEquals(0, int0);
      assertEquals(0L, dIN0.getGeneration());
      assertFalse(dIN0.getDirty());
      assertEquals(0, dIN0.getLevel());
      assertEquals(0, dIN0.getAccumulatedDelta());
      assertEquals((-1L), dIN0.getLastFullVersion());
  }

  @Test
  public void test144()  throws Throwable  {
      IN iN0 = new IN();
      byte[] byteArray0 = new byte[19];
      // Undeclared exception!
      try { 
        iN0.createNewInstance(byteArray0, (-9), (byte) (-96));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test145()  throws Throwable  {
      DIN dIN0 = new DIN();
      boolean boolean0 = dIN0.hasNonLNChildren();
      assertFalse(dIN0.getDirty());
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertFalse(boolean0);
      assertEquals(0L, dIN0.getGeneration());
      assertEquals(0, dIN0.getLevel());
      assertEquals(0, dIN0.getNEntries());
      assertTrue(dIN0.needsSplitting());
      assertFalse(dIN0.isRoot());
  }

  @Test
  public void test146()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      boolean boolean0 = dBIN0.equals(dBIN0);
      assertTrue(boolean0);
      assertEquals((-1L), dBIN0.getLastFullVersion());
      assertEquals(0, dBIN0.getNEntries());
      assertEquals(0, dBIN0.getLevel());
      assertFalse(dBIN0.isRoot());
      assertTrue(dBIN0.needsSplitting());
      assertEquals(0, dBIN0.getAccumulatedDelta());
      assertEquals(0L, dBIN0.getGeneration());
  }

  @Test
  public void test147()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.initEntryLsn(210);
      assertEquals(0, dBIN0.getNEntries());
      assertFalse(dBIN0.isDbRoot());
      assertEquals(0L, dBIN0.getGeneration());
      assertEquals((-1L), dBIN0.getLastFullVersion());
      assertTrue(dBIN0.needsSplitting());
      assertEquals(0, dBIN0.getLevel());
  }

  @Test
  public void test148()  throws Throwable  {
      IN iN0 = new IN();
      iN0.flushProvisionalObsolete((LogManager) null);
      assertTrue(iN0.needsSplitting());
      assertEquals("IN", iN0.shortClassName());
      assertEquals(0, iN0.getLevel());
      assertFalse(iN0.getDirty());
      assertEquals((-1L), iN0.getLastFullVersion());
      assertEquals(0, iN0.getNEntries());
  }

  @Test
  public void test149()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      long long0 = dBIN0.getLastFullVersion();
      assertFalse(dBIN0.getDirty());
      assertTrue(dBIN0.needsSplitting());
      assertEquals(0, dBIN0.getLevel());
      assertEquals((-1L), long0);
      assertEquals(0, dBIN0.getNEntries());
      assertFalse(dBIN0.isDbRoot());
      assertEquals(0L, dBIN0.getGeneration());
  }

  @Test
  public void test150()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.hook610(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test151()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      try { 
        dBIN0.hook620();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // DBIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test152()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.accumulateStats((TreeWalkerStatsAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test153()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.getInMemorySize();
      assertEquals(0, bIN0.getAccumulatedDelta());
      assertEquals((-1L), bIN0.getLastFullVersion());
      assertFalse(bIN0.isRoot());
      assertEquals(0, bIN0.getLevel());
      assertTrue(bIN0.needsSplitting());
      assertEquals(0L, bIN0.getGeneration());
      assertFalse(bIN0.getDirty());
  }

  @Test
  public void test154()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[2];
      ChildReference childReference0 = new ChildReference((Node) null, byteArray0, (long) 6169, (byte) (-26));
      try { 
        dIN0.insertEntry(childReference0);
        fail("Expecting exception: InconsistentNodeException");
      
      } catch(InconsistentNodeException e) {
         //
         // Node 0 should have been split before calling insertEntry
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_insertEntry1", e);
      }
  }

  @Test
  public void test155()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.deleteEntry(16777214, false);
      assertFalse(bIN0.getDirty());
      assertTrue(bIN0.needsSplitting());
      assertEquals(0L, bIN0.getGeneration());
      assertEquals((-1L), bIN0.getLastFullVersion());
      assertEquals(0, bIN0.getNEntries());
      assertEquals(0, bIN0.getLevel());
  }

  @Test
  public void test156()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.setIsRoot(true);
      assertTrue(dBIN0.isDbRoot());
      assertTrue(dBIN0.getDirty());
  }

  @Test
  public void test157()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.setProhibitNextDelta();
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertEquals(0L, dIN0.getGeneration());
      assertFalse(dIN0.getDirty());
      assertEquals(0, dIN0.getLevel());
      assertTrue(dIN0.needsSplitting());
      assertEquals(0, dIN0.getAccumulatedDelta());
  }

  @Test
  public void test158()  throws Throwable  {
      BIN bIN0 = new BIN();
      try { 
        bIN0.hook623();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // BIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test159()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.setKnownDeleted((-1427));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1427
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test160()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.latchNoWait();
      bIN0.hook622();
      //  // Unstable assertion: assertEquals(171L, bIN0.getGeneration());
  }

  @Test
  public void test161()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[0];
      dIN0.verify(byteArray0);
      //  // Unstable assertion: assertEquals(86L, dIN0.getGeneration());
  }

  @Test
  public void test162()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.updateEntry((-2025), (Node) null, 32767L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2025
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test163()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      dBIN0.dumpLog(stringBuffer0, false);
      assertEquals(286, stringBuffer0.capacity());
      assertEquals(0, dBIN0.getLevel());
  }

  @Test
  public void test164()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.clearPendingDeleted(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test165()  throws Throwable  {
      DIN dIN0 = new DIN();
      IN.IN_isValidForDelete iN_IN_isValidForDelete0 = new IN.IN_isValidForDelete(dIN0);
      // Undeclared exception!
      try { 
        iN_IN_isValidForDelete0._this.getKey(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test166()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_validateSubtreeBeforeDelete iN_IN_validateSubtreeBeforeDelete0 = new IN.IN_validateSubtreeBeforeDelete(bIN0, 0);
      // Undeclared exception!
      try { 
        iN_IN_validateSubtreeBeforeDelete0.hook628();
        fail("Expecting exception: ReturnBoolean");
      
      } catch(ReturnBoolean e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_validateSubtreeBeforeDelete", e);
      }
  }

  @Test
  public void test167()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.isDbRoot();
      assertEquals(0L, dBIN0.getGeneration());
      assertFalse(dBIN0.getDirty());
      assertEquals(0, dBIN0.getAccumulatedDelta());
      assertTrue(dBIN0.needsSplitting());
      assertEquals(0, dBIN0.getLevel());
      assertEquals(0, dBIN0.getNEntries());
      assertEquals((-1L), dBIN0.getLastFullVersion());
  }

  @Test
  public void test169()  throws Throwable  {
      DIN dIN0 = new DIN();
      IN.IN_deleteEntry iN_IN_deleteEntry0 = new IN.IN_deleteEntry(dIN0, 16, false);
      // Undeclared exception!
      try { 
        iN_IN_deleteEntry0.hook649();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test170()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_deleteEntry iN_IN_deleteEntry0 = new IN.IN_deleteEntry(bIN0, 2, true);
      iN_IN_deleteEntry0.hook648();
      assertEquals(24L, bIN0.getInMemorySize());
  }

  @Test
  public void test171()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_flushProvisionalObsolete iN_IN_flushProvisionalObsolete0 = new IN.IN_flushProvisionalObsolete(bIN0, (LogManager) null);
      // Undeclared exception!
      try { 
        iN_IN_flushProvisionalObsolete0.hook656();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_flushProvisionalObsolete", e);
      }
  }

  @Test
  public void test172()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.updateEntry((-2849), (long) (-2849), (byte) (-102));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -11396
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }
}
