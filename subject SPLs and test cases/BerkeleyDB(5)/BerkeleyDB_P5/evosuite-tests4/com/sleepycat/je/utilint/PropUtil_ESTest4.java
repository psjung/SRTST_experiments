/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 17:02:00 KST 2017
 */

package com.sleepycat.je.utilint;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.LinkedHashSet;
import java.util.Properties;
import java.util.Set;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class PropUtil_ESTest4 extends PropUtil_ESTest_scaffolding4 {

  @Test
  public void test00()  throws Throwable  {
      long long0 = PropUtil.microsToMillis(11L);
      assertEquals(1L, long0);
  }

  @Test
  public void test01()  throws Throwable  {
      long long0 = PropUtil.microsToMillis((-2313L));
      assertEquals((-1L), long0);
  }

  @Test
  public void test02()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Properties properties0 = PropUtil.validateProps((Properties) null, linkedHashSet0, "");
      Integer integer0 = new Integer((-3298));
      properties0.put(integer0, properties0);
      // Undeclared exception!
      try { 
        PropUtil.validateProps(properties0, linkedHashSet0, (String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         assertThrownBy("java.util.Properties", e);
      }
  }

  @Test
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropUtil.validateProp((String) null, (Set) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropUtil.getBoolean((Properties) null, "iR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.utilint.PropUtil", e);
      }
  }

  @Test
  public void test05()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedHashSet linkedHashSet1 = (LinkedHashSet)linkedHashSet0.clone();
      try { 
        PropUtil.validateProp("zUr^", linkedHashSet1, "EU]F2TE[");
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // zUr^ is not a valid property for EU]F2TE[
         //
         assertThrownBy("com.sleepycat.je.utilint.PropUtil", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(".");
      PropUtil.validateProp(".", linkedHashSet0, ".");
      assertEquals(1, linkedHashSet0.size());
  }

  @Test
  public void test07()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Properties properties0 = PropUtil.validateProps((Properties) null, linkedHashSet0, "");
      properties0.putIfAbsent("", linkedHashSet0);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      try { 
        PropUtil.validateProps(properties0, linkedHashSet1, "UzOKbU");
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         //  is not a valid property for UzOKbU
         //
         assertThrownBy("com.sleepycat.je.utilint.PropUtil", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      Properties properties0 = PropUtil.validateProps((Properties) null, linkedHashSet0, "");
      Object object0 = new Object();
      properties0.put("", object0);
      Properties properties1 = PropUtil.validateProps(properties0, linkedHashSet0, "");
      assertFalse(properties1.isEmpty());
  }

  @Test
  public void test09()  throws Throwable  {
      Properties properties0 = PropUtil.validateProps((Properties) null, (Set) null, "mbMT|x{UMA-e]hjVjA");
      properties0.put("mbMT|x{UMA-e]hjVjA", "mbMT|x{UMA-e]hjVjA");
      // Undeclared exception!
      try { 
        PropUtil.validateProps(properties0, (Set) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Properties properties0 = PropUtil.validateProps((Properties) null, (Set) null, "mbMT|x{UMA-e]hjVjA");
      Properties properties1 = PropUtil.validateProps(properties0, (Set) null, (String) null);
      assertTrue(properties1.isEmpty());
  }

  @Test
  public void test11()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Properties properties0 = PropUtil.validateProps((Properties) null, linkedHashSet0, "ZC");
      properties0.put("ZC", "true");
      boolean boolean0 = PropUtil.getBoolean(properties0, "ZC");
      assertTrue(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Properties properties0 = PropUtil.validateProps((Properties) null, (Set) null, "mbMT|x{UMA-e]hjVjA");
      properties0.put("mbMT|x{UMA-e]hjVjA", "mbMT|x{UMA-e]hjVjA");
      boolean boolean0 = PropUtil.getBoolean(properties0, "mbMT|x{UMA-e]hjVjA");
      assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Properties properties0 = PropUtil.validateProps((Properties) null, linkedHashSet0, "");
      boolean boolean0 = PropUtil.getBoolean(properties0, "");
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      PropUtil propUtil0 = new PropUtil();
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = PropUtil.microsToMillis((-1L));
      assertEquals(0L, long0);
  }
}
