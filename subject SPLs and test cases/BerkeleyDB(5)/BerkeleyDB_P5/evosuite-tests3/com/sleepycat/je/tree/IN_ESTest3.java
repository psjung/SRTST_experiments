/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 10:13:21 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.LinkedList;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.dbi.CursorImpl;
import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.latch.LatchNotHeldException;
import com.sleepycat.je.log.LogManager;

import de.ovgu.cide.jakutil.ReturnBoolean;
import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class IN_ESTest3 extends IN_ESTest_scaffolding3 {

  @Test
  public void test000()  throws Throwable  {
      IN.isStatePendingDeleted((byte) (-1));
  }

  @Test
  public void test001()  throws Throwable  {
      IN.isStateKnownDeleted((byte) (-113));
  }

  @Test
  public void test002()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.canBeAncestor(false);
  }

  @Test
  public void test004()  throws Throwable  {
      DIN dIN0 = new DIN();
      IN.makeFetchErrorMsg("", dIN0, (-4), (byte)99);
  }

  @Test
  public void test006()  throws Throwable  {
      int int0 = 0;
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.getCursorBINToBeRemoved((CursorImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DBIN", e);
      }
  }

  @Test
  public void test008()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        dIN0.getLsn((byte)85);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 341
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test009()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.split(iN0, 128, 65536);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test010()  throws Throwable  {
      DIN dIN0 = new DIN();
      IN.IN_splitInternal iN_IN_splitInternal0 = new IN.IN_splitInternal(dIN0, dIN0, 0, 0, 0);
      iN_IN_splitInternal0.newSibling = (IN) dIN0;
      iN_IN_splitInternal0.newSibling.getDupTreeKey();
  }

  @Test
  public void test011()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.getDupKey();
  }

  @Test
  public void test013()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.getCursorBINToBeRemoved((CursorImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DBIN", e);
      }
  }

  @Test
  public void test014()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.setLastFullLsn((-5110L));
  }

  @Test
  public void test015()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      byte[] byteArray0 = new byte[7];
      dBIN0.selectKey(byteArray0, byteArray0);
  }

  @Test
  public void test016()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.isRoot();
  }

  @Test
  public void test017()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[1];
      IN.IN_updateEntry3 iN_IN_updateEntry3_0 = new IN.IN_updateEntry3(dIN0, 0, dIN0, 3116L, byteArray0);
      iN_IN_updateEntry3_0._this.isDbRoot();
  }

  @Test
  public void test018()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_splitInternal iN_IN_splitInternal0 = new IN.IN_splitInternal(bIN0, bIN0, 65536, 65536, 2049870754);
      iN_IN_splitInternal0._this.isCompressible();
  }

  @Test
  public void test019()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[1];
      dBIN0.init(databaseImpl0, byteArray0, 2105, 2147450881);
  }

  @Test
  public void test022()  throws Throwable  {
      DIN dIN0 = new DIN();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      dIN0.dumpLogAdditional(stringBuffer0);
  }

  @Test
  public void test026()  throws Throwable  {
      BIN bIN0 = new BIN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode(")?<1p[DlRh|u;");
      CharBuffer charBuffer0 = mS949_0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = mS949_0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        bIN0.writeToLog(byteBuffer1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test028()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.isSoughtNode((-1L), false);
  }

  @Test
  public void test029()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.initEntryLsn(0);
  }

  @Test
  public void test030()  throws Throwable  {
      BIN bIN0 = new BIN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("");
      // Undeclared exception!
      try { 
        bIN0.writeToLog(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test031()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.updateEntry(4204, 3772L, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16816
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test032()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        dIN0.splitSpecial((IN) null, (-1), (-1621), byteArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DIN", e);
      }
  }

  @Test
  public void test033()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[1];
      IN.IN_updateEntry3 iN_IN_updateEntry3_0 = new IN.IN_updateEntry3(dIN0, 0, dIN0, 3116L, byteArray0);
      // Undeclared exception!
      try { 
        iN_IN_updateEntry3_0._this.splitInternal(dIN0, 0, (byte)0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DIN", e);
      }
  }

  @Test
  public void test034()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      TreeLocation treeLocation0 = new TreeLocation();
      treeLocation0.bin = (BIN) dBIN0;
      // Undeclared exception!
      try { 
        treeLocation0.bin.setTarget(0, treeLocation0.bin);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test035()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.setLsnElement(2, (-2308L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test036()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.setKnownDeleted((-325));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -325
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test038()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.isEntryKnownDeleted((-709));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -709
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test040()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      byte[] byteArray0 = new byte[7];
      ChildReference childReference0 = new ChildReference((Node) dBIN0, byteArray0, (long) 0, (byte)0);
      // Undeclared exception!
      try { 
        dBIN0.insertEntry1(childReference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test041()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[8];
      ChildReference childReference0 = new ChildReference((Node) dIN0, byteArray0, 1738L);
      try { 
        dIN0.insertEntry(childReference0);
        fail("Expecting exception: InconsistentNodeException");
      
      } catch(InconsistentNodeException e) {
         //
         // Node 0 should have been split before calling insertEntry
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_insertEntry1", e);
      }
  }

  @Test
  public void test042()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      try { 
        dBIN0.hook627();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // DBIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test043()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.hook625((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test044()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      LN lN0 = new LN();
      // Undeclared exception!
      try { 
        dBIN0.hook625(lN0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sleepycat.je.tree.LN cannot be cast to com.sleepycat.je.tree.IN
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test045()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.getMigrate((byte) (-18));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -18
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test046()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.getKeyComparator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test048()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.fetchTarget(1132);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1132
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test049()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.dumpLog((StringBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test050()  throws Throwable  {
      DIN dIN0 = new DIN();
      SearchResult searchResult0 = new SearchResult();
      // Undeclared exception!
      try { 
        dIN0.descendOnParentSearch(searchResult0, true, true, (-1), (Node) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test052()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.clearKnownDeleted(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      IN iN0 = null;
      try {
        iN0 = new IN((DatabaseImpl) null, byteArray0, (int) (byte) (-42), (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test054()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[6];
      IN iN0 = null;
      try {
        iN0 = new IN(databaseImpl0, byteArray0, (-361), 117);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test055()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.dumpString(4, true);
  }

  @Test
  public void test056()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.latch(true);
  }

  @Test
  public void test057()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.compress((BINReference) null, true);
  }

  @Test
  public void test058()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.setDirty(true);
  }

  @Test
  public void test059()  throws Throwable  {
      IN iN0 = new IN();
      iN0.beginTag();
  }

  @Test
  public void test060()  throws Throwable  {
      IN iN0 = new IN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      iN0.setDatabase(databaseImpl0);
  }

  @Test
  public void test061()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.getTarget(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test062()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.getLastFullVersion();
  }

  @Test
  public void test063()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.isLatchOwner();
  }

  @Test
  public void test064()  throws Throwable  {
      IN iN0 = new IN();
      iN0.endTag();
  }

  @Test
  public void test065()  throws Throwable  {
      DIN dIN0 = new DIN();
      IN.IN_splitInternal iN_IN_splitInternal0 = new IN.IN_splitInternal(dIN0, dIN0, 0, 0, 0);
      iN_IN_splitInternal0.newSibling = (IN) dIN0;
      iN_IN_splitInternal0.newSibling.setGeneration();
  }

  @Test
  public void test066()  throws Throwable  {
      IN iN0 = new IN();
      iN0.shortClassName();
  }

  @Test
  public void test067()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.getLevel();
  }

  @Test
  public void test069()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_splitInternal iN_IN_splitInternal0 = new IN.IN_splitInternal(bIN0, bIN0, 65536, 65536, 2049870754);
      iN_IN_splitInternal0._this.getNEntries();
  }

  @Test
  public void test070()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.latch();
  }

  @Test
  public void test071()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.getIdentifierKey();
  }

  @Test
  public void test072()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.hook619(false);
        fail("Expecting exception: ReturnBoolean");
      
      } catch(ReturnBoolean e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test073()  throws Throwable  {
      DIN dIN0 = new DIN();
      IN.IN_trackProvisionalObsolete iN_IN_trackProvisionalObsolete0 = new IN.IN_trackProvisionalObsolete(dIN0, dIN0, 0, (-1L));
      iN_IN_trackProvisionalObsolete0.execute();
  }

  @Test
  public void test074()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.latchNoWait(true);
      dIN0.isValidForDelete();
  }

  @Test
  public void test075()  throws Throwable  {
      ChildReference childReference0 = new ChildReference();
      IN.IN_insertEntry1 iN_IN_insertEntry1_0 = new IN.IN_insertEntry1((IN) null, childReference0);
      IN.IN_verify iN_IN_verify0 = new IN.IN_verify((IN) null, iN_IN_insertEntry1_0.key);
      // Undeclared exception!
      try { 
        iN_IN_verify0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_verify", e);
      }
  }

  @Test
  public void test077()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      IN.IN_splitInternal iN_IN_splitInternal0 = new IN.IN_splitInternal(dBIN0, dBIN0, 0, (-9), 65537);
      iN_IN_splitInternal0.low = (-9);
      // Undeclared exception!
      try { 
        iN_IN_splitInternal0.hook630();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_splitInternal", e);
      }
  }

  @Test
  public void test079()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.toString();
  }

  @Test
  public void test080()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.dumpString(2126429886, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2126429888
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test081()  throws Throwable  {
      IN iN0 = new IN();
      iN0.dumpKeys();
  }

  @Test
  public void test082()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.getLogSize();
  }

  @Test
  public void test084()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      IN.IN_splitInternal iN_IN_splitInternal0 = new IN.IN_splitInternal(dBIN0, dBIN0, 0, 0, 65537);
      iN_IN_splitInternal0.high = (-2146706136);
      // Undeclared exception!
      try { 
        iN_IN_splitInternal0.hook630();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_splitInternal", e);
      }
  }

  @Test
  public void test085()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.needsSplitting();
  }

  @Test
  public void test086()  throws Throwable  {
      BIN bIN0 = new BIN();
      byte[] byteArray0 = new byte[24];
      bIN0.deleteEntry(byteArray0, true);
  }

  @Test
  public void test090()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_setLsn iN_IN_setLsn0 = new IN.IN_setLsn(bIN0, 131072, (-88L));
      byte[] byteArray0 = new byte[9];
      iN_IN_setLsn0._this.isKeyInBounds(byteArray0);
  }

  @Test
  public void test091()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.makeFetchErrorMsg("", bIN0, 127L, (byte)61);
  }

  @Test
  public void test092()  throws Throwable  {
      IN.isStatePendingDeleted((byte) (-22));
  }

  @Test
  public void test093()  throws Throwable  {
      IN.isStateKnownDeleted((byte)30);
  }

  @Test
  public void test095()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.setLsn((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test096()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.setMigrate(65536, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65536
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test098()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test100()  throws Throwable  {
      DIN dIN0 = new DIN();
      DatabaseId databaseId0 = new DatabaseId(0);
      NameLN nameLN0 = new NameLN(databaseId0);
      boolean boolean0 = dIN0.equals(nameLN0);
      //  // Unstable assertion: assertEquals(1078L, nameLN0.getLastId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test104()  throws Throwable  {
      DIN dIN0 = new DIN();
      IN.IN_trackProvisionalObsolete iN_IN_trackProvisionalObsolete0 = new IN.IN_trackProvisionalObsolete(dIN0, dIN0, 0, 37L);
      iN_IN_trackProvisionalObsolete0.execute();
      iN_IN_trackProvisionalObsolete0.execute();
      assertTrue(dIN0.needsSplitting());
      assertFalse(dIN0.getDirty());
      assertEquals(0L, dIN0.getGeneration());
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertFalse(dIN0.isRoot());
      assertEquals(0, dIN0.getLevel());
  }

  @Test
  public void test108()  throws Throwable  {
      BIN bIN0 = new BIN();
      long long0 = bIN0.getGeneration();
      assertTrue(bIN0.needsSplitting());
      assertEquals(0, bIN0.getLevel());
      assertFalse(bIN0.getDirty());
      assertEquals(0L, long0);
      assertEquals((-1L), bIN0.getLastFullVersion());
      assertFalse(bIN0.isRoot());
  }

  @Test
  public void test110()  throws Throwable  {
      DIN dIN0 = new DIN();
      boolean boolean0 = dIN0.validateSubtreeBeforeDelete(0);
      //  // Unstable assertion: assertEquals(230L, dIN0.getGeneration());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test
  public void test111()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.getEntryLsnLongArray();
      assertEquals(0L, dIN0.getGeneration());
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertFalse(dIN0.getDirty());
      assertTrue(dIN0.needsSplitting());
      assertEquals(0, dIN0.getLevel());
      assertFalse(dIN0.isRoot());
  }

  @Test
  public void test112()  throws Throwable  {
      BIN bIN0 = new BIN();
      try { 
        bIN0.hook626();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // BIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test113()  throws Throwable  {
      IN iN0 = new IN();
      boolean boolean0 = iN0.entryZeroKeyComparesLow();
      assertEquals(0L, iN0.getGeneration());
      assertFalse(iN0.getDirty());
      assertEquals((-1L), iN0.getLastFullVersion());
      assertEquals("IN", iN0.shortClassName());
      assertTrue(boolean0);
      assertEquals(0, iN0.getLevel());
      assertFalse(iN0.isDbRoot());
      assertTrue(iN0.needsSplitting());
  }

  @Test
  public void test114()  throws Throwable  {
      IN iN0 = new IN();
      try { 
        iN0.getDupKey();
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // IN.getDupKey() called
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test115()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      try { 
        dBIN0.hook621();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // DBIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test116()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.updateEntry((int) (byte)0, (Node) dBIN0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test117()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.getState(100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test118()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.getMainTreeKey();
      assertFalse(bIN0.getDirty());
      assertEquals(0L, bIN0.getGeneration());
      assertTrue(bIN0.needsSplitting());
      assertFalse(bIN0.isRoot());
      assertEquals(0, bIN0.getLevel());
      assertEquals((-1L), bIN0.getLastFullVersion());
  }

  @Test
  public void test119()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      try { 
        dBIN0.hook625(dBIN0);
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // DBIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test120()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      try { 
        dBIN0.hook624();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // DBIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test121()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      // Undeclared exception!
      try { 
        dBIN0.postFetchInit(databaseImpl0, 20L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test122()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      byte[] byteArray0 = new byte[9];
      NameLN nameLN0 = new NameLN();
      // Undeclared exception!
      try { 
        dBIN0.updateEntry((-2558), (Node) nameLN0, 3031L, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -10232
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test123()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.setGeneration((long) (byte) (-84));
      assertEquals((-84L), bIN0.getGeneration());
  }

  @Test
  public void test124()  throws Throwable  {
      DIN dIN0 = new DIN();
      assertFalse(dIN0.getDirty());
      
      byte[] byteArray0 = new byte[1];
      dIN0.setIdentifierKey(byteArray0);
      assertTrue(dIN0.getDirty());
  }

  @Test
  public void test125()  throws Throwable  {
      SearchResult searchResult0 = new SearchResult();
      DIN dIN0 = new DIN();
      dIN0.hook638(searchResult0.parent);
      assertEquals(0, dIN0.getLevel());
      assertFalse(dIN0.isRoot());
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertEquals(0L, dIN0.getGeneration());
      assertFalse(dIN0.getDirty());
      assertTrue(dIN0.needsSplitting());
  }

  @Test
  public void test126()  throws Throwable  {
      DIN dIN0 = new DIN();
      boolean boolean0 = dIN0.isSoughtNode(0, false);
      assertFalse(dIN0.isRoot());
      assertEquals(0, dIN0.getLevel());
      assertEquals(0L, dIN0.getGeneration());
      assertFalse(dIN0.getDirty());
      assertTrue(boolean0);
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertTrue(dIN0.needsSplitting());
  }

  @Test
  public void test127()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.updateEntry((-1918), 792L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -7672
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test128()  throws Throwable  {
      IN iN0 = new IN();
      DIN dIN0 = new DIN();
      iN0.getChildKey(dIN0);
      assertEquals(0L, dIN0.getGeneration());
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertFalse(dIN0.getDirty());
      assertEquals(0, iN0.getLevel());
      assertFalse(dIN0.isRoot());
      assertEquals("IN", iN0.shortClassName());
      assertTrue(iN0.needsSplitting());
  }

  @Test
  public void test129()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.adjustCursorsForInsert(65537);
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertFalse(dIN0.getDirty());
      assertEquals(0L, dIN0.getGeneration());
      assertEquals(0, dIN0.getLevel());
      assertFalse(dIN0.isRoot());
      assertTrue(dIN0.needsSplitting());
  }

  @Test
  public void test130()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.getLsn((byte)85);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 341
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test131()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      try { 
        dBIN0.hook622();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // DBIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test132()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.updateEntry(0, 127L, (long) 0, 127L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test133()  throws Throwable  {
      DIN dIN0 = new DIN();
      boolean boolean0 = dIN0.isValidForDelete();
      //  // Unstable assertion: assertEquals(154L, dIN0.getGeneration());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test
  public void test134()  throws Throwable  {
      IN iN0 = new IN();
      String string0 = iN0.toString();
      assertTrue(iN0.needsSplitting());
      assertEquals((-1L), iN0.getLastFullVersion());
      assertEquals("<in>\n  <node>0</node>\n  <idkey><key v=\"\"/></idkey>\n  <dirty val=\"false\"/>\n  <generation val=\"0\"/>\n  <level val=\"0\"/>\n  <isRoot val=\"false\"/>\n  <entries nEntries=\"0\">\n  </entries>\n</in>", string0);
  }

  @Test
  public void test135()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = dIN0.getEntryLsnByteArray();
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertFalse(dIN0.isRoot());
      assertEquals(0, dIN0.getLevel());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(dIN0.needsSplitting());
      assertEquals(0L, dIN0.getGeneration());
      assertFalse(dIN0.getDirty());
  }

  @Test
  public void test136()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_splitInternal iN_IN_splitInternal0 = new IN.IN_splitInternal(bIN0, bIN0, 8, (-762), (byte) (-3));
      // Undeclared exception!
      try { 
        iN_IN_splitInternal0.hook617();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_traceSplit", e);
      }
  }

  @Test
  public void test137()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.getDatabaseId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test138()  throws Throwable  {
      BIN bIN0 = new BIN();
      int int0 = bIN0.getMaxEntries();
      assertEquals(0L, bIN0.getGeneration());
      assertFalse(bIN0.getDirty());
      assertEquals(0, int0);
      assertEquals((-1L), bIN0.getLastFullVersion());
      assertEquals(0, bIN0.getLevel());
      assertFalse(bIN0.isRoot());
  }

  @Test
  public void test139()  throws Throwable  {
      IN iN0 = new IN();
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        iN0.createNewInstance(byteArray0, (byte)1, (byte) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test140()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.trackProvisionalObsolete((IN) null, 1073741824, 1073741824);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test141()  throws Throwable  {
      DIN dIN0 = new DIN();
      boolean boolean0 = dIN0.hasNonLNChildren();
      assertFalse(boolean0);
      assertEquals(0L, dIN0.getGeneration());
      assertEquals(0, dIN0.getLevel());
      assertEquals(0, dIN0.getNEntries());
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertTrue(dIN0.needsSplitting());
      assertFalse(dIN0.getDirty());
  }

  @Test
  public void test142()  throws Throwable  {
      DIN dIN0 = new DIN();
      ChildReference childReference0 = new ChildReference();
      try { 
        dIN0.insertEntry1(childReference0);
        fail("Expecting exception: InconsistentNodeException");
      
      } catch(InconsistentNodeException e) {
         //
         // Node 0 should have been split before calling insertEntry
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_insertEntry1", e);
      }
  }

  @Test
  public void test143()  throws Throwable  {
      BIN bIN0 = new BIN();
      boolean boolean0 = bIN0.equals(bIN0);
      assertTrue(boolean0);
      assertEquals(0, bIN0.getLevel());
      assertTrue(bIN0.needsSplitting());
      assertEquals(0L, bIN0.getGeneration());
      assertFalse(bIN0.getDirty());
  }

  @Test
  public void test144()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.initEntryLsn((-31));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test145()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.log((LogManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test147()  throws Throwable  {
      BIN bIN0 = new BIN();
      try { 
        bIN0.hook620();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // BIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test148()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.accumulateStats((TreeWalkerStatsAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test149()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.latchNoWait();
      bIN0.hook620();
      //  // Unstable assertion: assertEquals(83L, bIN0.getGeneration());
  }

  @Test
  public void test152()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      TreeLocation treeLocation0 = new TreeLocation();
      treeLocation0.bin = (BIN) dBIN0;
      ChildReference childReference0 = new ChildReference((Node) treeLocation0.bin, treeLocation0.lnKey, 934L, (byte)8);
      // Undeclared exception!
      try { 
        treeLocation0.bin.insertEntry(childReference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test153()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      assertEquals(0, dBIN0.getNEntries());
      
      boolean boolean0 = dBIN0.deleteEntry((-308), false);
      assertEquals(0, dBIN0.getLevel());
      assertTrue(dBIN0.needsSplitting());
      assertFalse(dBIN0.isDbRoot());
      assertEquals(0L, dBIN0.getGeneration());
      assertFalse(dBIN0.getDirty());
      assertFalse(boolean0);
      assertEquals((-1L), dBIN0.getLastFullVersion());
  }

  @Test
  public void test154()  throws Throwable  {
      BIN bIN0 = new BIN();
      assertFalse(bIN0.getDirty());
      
      bIN0.setIsRoot(false);
      assertTrue(bIN0.getDirty());
  }

  @Test
  public void test155()  throws Throwable  {
      BIN bIN0 = new BIN();
      try { 
        bIN0.hook623();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // BIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test157()  throws Throwable  {
      IN iN0 = new IN();
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      // Undeclared exception!
      try { 
        iN0.updateEntry((-856), (Node) fileSummaryLN0, (long) (-856));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3424
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test158()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      IN.dumpDeletedState(stringBuffer0, (byte)11);
      assertEquals(70, stringBuffer0.capacity());
      assertEquals("<knownDeleted val=\"true\"/><pendingDeleted val=\"true\"/>", stringWriter0.toString());
  }

  @Test
  public void test159()  throws Throwable  {
      DIN dIN0 = new DIN();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      dIN0.dumpLog(stringBuffer0, false);
      assertEquals("<din><node>0</node><key v=\"\"/><isRoot val=\"false\"/><level val=\"0\"/><entries numEntries=\"0\" length=\"0\" baseFileNumber=\"-1\"></entries><key v=\"<null>\"/><ref knownDeleted=\"false\" pendingDeleted=\"false\"><key v=\"\"/><DbLsn val=\"0xffffffff/0xffffffff\"/></ref></din>", stringBuffer0.toString());
      assertEquals("<din><node>0</node><key v=\"\"/><isRoot val=\"false\"/><level val=\"0\"/><entries numEntries=\"0\" length=\"0\" baseFileNumber=\"-1\"></entries><key v=\"<null>\"/><ref knownDeleted=\"false\" pendingDeleted=\"false\"><key v=\"\"/><DbLsn val=\"0xffffffff/0xffffffff\"/></ref></din>", stringWriter0.toString());
  }

  @Test
  public void test160()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[1];
      IN.IN_updateEntry3 iN_IN_updateEntry3_0 = new IN.IN_updateEntry3(dIN0, 0, dIN0, 3116L, byteArray0);
      // Undeclared exception!
      try { 
        iN_IN_updateEntry3_0._this.clearPendingDeleted((-2657));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2657
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test161()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.getKey((-2146706136));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2146706136
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test162()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.releaseLatchIfOwner();
      assertEquals(0, bIN0.getLevel());
      assertEquals(0, bIN0.getNEntries());
      assertTrue(bIN0.needsSplitting());
      assertFalse(bIN0.isDbRoot());
      assertFalse(bIN0.getDirty());
      assertEquals((-1L), bIN0.getLastFullVersion());
      assertEquals(0L, bIN0.getGeneration());
  }

  @Test
  public void test163()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_deleteEntry iN_IN_deleteEntry0 = new IN.IN_deleteEntry(bIN0, 131072, false);
      iN_IN_deleteEntry0.hook648();
      assertEquals(0L, bIN0.getGeneration());
      assertEquals((-1L), bIN0.getLastFullVersion());
      assertEquals(0, bIN0.getLevel());
      assertEquals(0, bIN0.getNEntries());
      assertFalse(bIN0.getDirty());
      assertTrue(bIN0.needsSplitting());
      assertFalse(bIN0.isDbRoot());
  }

  @Test
  public void test164()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_deleteEntry iN_IN_deleteEntry0 = new IN.IN_deleteEntry(bIN0, 0, false);
      iN_IN_deleteEntry0.hook616();
      assertEquals(0L, bIN0.getGeneration());
      assertFalse(bIN0.getDirty());
      assertTrue(bIN0.needsSplitting());
      assertEquals(0, bIN0.getNEntries());
      assertEquals((-1L), bIN0.getLastFullVersion());
      assertEquals(0, bIN0.getLevel());
      assertFalse(bIN0.isRoot());
  }

  @Test
  public void test165()  throws Throwable  {
      DIN dIN0 = new DIN();
      IN.IN_flushProvisionalObsolete iN_IN_flushProvisionalObsolete0 = new IN.IN_flushProvisionalObsolete(dIN0, (LogManager) null);
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertEquals(0L, dIN0.getGeneration());
      assertFalse(dIN0.isRoot());
      assertEquals(0, dIN0.getLevel());
      assertEquals(0, dIN0.getNEntries());
      assertTrue(dIN0.needsSplitting());
      assertFalse(dIN0.getDirty());
  }
}
