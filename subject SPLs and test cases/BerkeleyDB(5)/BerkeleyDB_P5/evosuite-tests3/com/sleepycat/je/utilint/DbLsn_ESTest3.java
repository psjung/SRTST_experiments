/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 11:10:18 KST 2017
 */

package com.sleepycat.je.utilint;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.log.FileManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class DbLsn_ESTest3 extends DbLsn_ESTest_scaffolding3 {

  @Test
  public void test00()  throws Throwable  {
      long long0 = DbLsn.makeLsn(935L, (-625L));
      assertEquals(4020089388431L, long0);
  }

  @Test
  public void test01()  throws Throwable  {
      Long long0 = new Long(1177L);
      long long1 = DbLsn.longToLsn(long0);
      assertTrue(long0.equals((Object)long1));
  }

  @Test
  public void test02()  throws Throwable  {
      long long0 = DbLsn.getFileOffset(0L);
      assertEquals(0L, long0);
  }

  @Test
  public void test03()  throws Throwable  {
      long long0 = DbLsn.getFileNumber((-3324304686497L));
      assertEquals(4294966522L, long0);
  }

  @Test
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbLsn.getWithCleaningDistance((-3372L), (FileManager) null, 10000L, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.utilint.DbLsn", e);
      }
  }

  @Test
  public void test05()  throws Throwable  {
      long long0 = DbLsn.getWithCleaningDistance((-4997L), (FileManager) null, (-4997L), 2019L);
      assertEquals(0L, long0);
  }

  @Test
  public void test06()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance(1L, 4294967296L, 4294967295L);
      assertEquals(4294967294L, long0);
  }

  @Test
  public void test07()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance((-2908L), (-1L), (-1L));
      assertEquals((-2907L), long0);
  }

  @Test
  public void test08()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance(673L, 673L, 0L);
      assertEquals(0L, long0);
  }

  @Test
  public void test09()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance(2048L, (-1L), 2048L);
      assertEquals(2048L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance((-4977L), 0L, (-4977L));
      assertEquals((-21371757264896L), long0);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = DbLsn.compareTo((-97L), 4294967295L);
      assertEquals(1, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      long long0 = DbLsn.makeLsn((-774L), 607L);
      assertEquals((-3324304686497L), long0);
  }

  @Test
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbLsn.dumpString(1L, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      long long0 = DbLsn.getFileOffset(3624L);
      assertEquals(3624L, long0);
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = DbLsn.getFileNumber(4294967295L);
      assertEquals(0L, long0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = DbLsn.toString((-1634L));
      assertEquals("<DbLsn val=\"0xffffffff/0xfffff99e\"/>", string0);
  }

  @Test
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbLsn.getWithCleaningDistance(0L, (FileManager) null, (-349L), 2695L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.utilint.DbLsn", e);
      }
  }

  @Test
  public void test18()  throws Throwable  {
      long long0 = DbLsn.getWithCleaningDistance(0, (FileManager) null, (-1L), 2L);
      assertEquals(0L, long0);
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = DbLsn.getWithCleaningDistance(202L, (FileManager) null, 0L, (-1L));
      assertEquals(202L, long0);
  }

  @Test
  public void test21()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance(3942779977728L, (-477L), 1L);
      assertEquals(8589933196L, long0);
  }

  @Test
  public void test22()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance((-3324304686497L), (-1L), (-3324304686497L));
      assertEquals(2575618872497957L, long0);
  }

  @Test
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbLsn.compareTo((-203L), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.utilint.DbLsn", e);
      }
  }

  @Test
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbLsn.compareTo((-1L), (-1611L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.utilint.DbLsn", e);
      }
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = DbLsn.compareTo(673L, 673L);
      assertEquals(0, int0);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = DbLsn.compareTo(0L, (-883L));
      assertEquals((-1), int0);
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = DbLsn.compareTo(1564L, 0L);
      assertEquals(1, int0);
  }

  @Test
  public void test29()  throws Throwable  {
      long long0 = DbLsn.longToLsn((Long) null);
      assertEquals((-1L), long0);
  }

  @Test
  public void test30()  throws Throwable  {
      Long long0 = new Long(0L);
      long long1 = DbLsn.longToLsn(long0);
      assertEquals(0L, long1);
  }

  @Test
  public void test31()  throws Throwable  {
      long long0 = DbLsn.makeLsn(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test
  public void test32()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance((-1176L), (-9223372036854775808L), (-1176L));
      assertEquals((-2521145802752L), long0);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = DbLsn.getNoFormatString(2204L);
      assertEquals("0x0/0x89c", string0);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = DbLsn.dumpString((-9223372036854775808L), 14);
      assertEquals("              <DbLsn val=\"0x80000000/0x0\"/>", string0);
  }
}
