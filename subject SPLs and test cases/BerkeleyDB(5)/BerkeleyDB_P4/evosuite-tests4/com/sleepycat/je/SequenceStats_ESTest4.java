/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 13:56:49 KST 2017
 */

package com.sleepycat.je;

import org.junit.Test;
import static org.junit.Assert.*;
import com.sleepycat.je.SequenceStats;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class SequenceStats_ESTest4 extends SequenceStats_ESTest_scaffolding4 {

  @Test
  public void test00()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(944, 0, 0L, 0L, (-674L), 0L, 0L, 0);
      long long0 = sequenceStats0.getValue();
      assertEquals(0L, sequenceStats0.getMax());
      assertEquals(0L, long0);
      assertEquals(0L, sequenceStats0.getMin());
      assertEquals(0L, sequenceStats0.getCurrent());
      assertEquals(944, sequenceStats0.getNGets());
      assertEquals(0, sequenceStats0.getNCachedGets());
      assertEquals((-674L), sequenceStats0.getLastValue());
      assertEquals(0, sequenceStats0.getCacheSize());
  }

  @Test
  public void test01()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(55, 55, 55, 55, 55, 55, 55, 55);
      long long0 = sequenceStats0.getValue();
      assertEquals(55L, sequenceStats0.getMax());
      assertEquals(55, sequenceStats0.getNGets());
      assertEquals(55L, sequenceStats0.getCurrent());
      assertEquals(55, sequenceStats0.getNCachedGets());
      assertEquals(55L, long0);
      assertEquals(55L, sequenceStats0.getLastValue());
      assertEquals(55, sequenceStats0.getCacheSize());
      assertEquals(55L, sequenceStats0.getMin());
  }

  @Test
  public void test02()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 0, 0, 0, 0, 0, 0, 0);
      int int0 = sequenceStats0.getNGets();
      assertEquals(0, sequenceStats0.getCacheSize());
      assertEquals(0, sequenceStats0.getNCachedGets());
      assertEquals(0, int0);
  }

  @Test
  public void test03()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-3171), (-1), (-1), (-1), (-3171), (-2024L), (-3171), (-1));
      int int0 = sequenceStats0.getNGets();
      assertEquals((-3171L), sequenceStats0.getLastValue());
      assertEquals((-1L), sequenceStats0.getCurrent());
      assertEquals((-3171), int0);
      assertEquals(-1, sequenceStats0.getNCachedGets());
      assertEquals((-1L), sequenceStats0.getValue());
      assertEquals((-2024L), sequenceStats0.getMin());
      assertEquals(-1, sequenceStats0.getCacheSize());
      assertEquals((-3171L), sequenceStats0.getMax());
  }

  @Test
  public void test04()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(55, 55, 55, 55, 55, 55, 55, 55);
      int int0 = sequenceStats0.getNCachedGets();
      assertEquals(55, sequenceStats0.getCacheSize());
      assertEquals(55L, sequenceStats0.getLastValue());
      assertEquals(55L, sequenceStats0.getMax());
      assertEquals(55, int0);
      assertEquals(55L, sequenceStats0.getValue());
      assertEquals(55L, sequenceStats0.getMin());
      assertEquals(55, sequenceStats0.getNGets());
      assertEquals(55L, sequenceStats0.getCurrent());
  }

  @Test
  public void test05()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1));
      int int0 = sequenceStats0.getNCachedGets();
      assertEquals((-1L), sequenceStats0.getLastValue());
      assertEquals(-1, sequenceStats0.getCacheSize());
      assertEquals((-1L), sequenceStats0.getValue());
      assertEquals((-1), int0);
      assertEquals((-1L), sequenceStats0.getMin());
      assertEquals(-1, sequenceStats0.getNGets());
      assertEquals((-1L), sequenceStats0.getMax());
      assertEquals((-1L), sequenceStats0.getCurrent());
  }

  @Test
  public void test06()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 0, 0, 0, 0, 0, 0, 0);
      sequenceStats0.getMin();
      assertEquals(0, sequenceStats0.getNGets());
      assertEquals(0, sequenceStats0.getNCachedGets());
      assertEquals(0, sequenceStats0.getCacheSize());
  }

  @Test
  public void test07()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(55, 55, 55, 55, 55, 55, 55, 55);
      long long0 = sequenceStats0.getMin();
      assertEquals(55, sequenceStats0.getNGets());
      assertEquals(55L, sequenceStats0.getMax());
      assertEquals(55L, sequenceStats0.getValue());
      assertEquals(55, sequenceStats0.getCacheSize());
      assertEquals(55L, long0);
      assertEquals(55L, sequenceStats0.getLastValue());
      assertEquals(55L, sequenceStats0.getCurrent());
      assertEquals(55, sequenceStats0.getNCachedGets());
  }

  @Test
  public void test08()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(55, 55, 55, 55, 55, 55, 55, 55);
      long long0 = sequenceStats0.getMax();
      assertEquals(55L, sequenceStats0.getLastValue());
      assertEquals(55, sequenceStats0.getCacheSize());
      assertEquals(55, sequenceStats0.getNCachedGets());
      assertEquals(55L, sequenceStats0.getCurrent());
      assertEquals(55, sequenceStats0.getNGets());
      assertEquals(55L, sequenceStats0.getMin());
      assertEquals(55L, sequenceStats0.getValue());
      assertEquals(55L, long0);
  }

  @Test
  public void test09()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 0, 0, (-1L), 0, 0, (-2247L), 0);
      long long0 = sequenceStats0.getMax();
      assertEquals((-2247L), long0);
      assertEquals(0L, sequenceStats0.getCurrent());
      assertEquals(0L, sequenceStats0.getLastValue());
      assertEquals(0, sequenceStats0.getCacheSize());
      assertEquals((-1L), sequenceStats0.getValue());
      assertEquals(0, sequenceStats0.getNCachedGets());
      assertEquals(0, sequenceStats0.getNGets());
      assertEquals(0L, sequenceStats0.getMin());
  }

  @Test
  public void test10()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 0, 0, (-1L), 0, 0, (-2247L), 0);
      long long0 = sequenceStats0.getLastValue();
      assertEquals(0L, sequenceStats0.getCurrent());
      assertEquals(0, sequenceStats0.getCacheSize());
      assertEquals((-2247L), sequenceStats0.getMax());
      assertEquals((-1L), sequenceStats0.getValue());
      assertEquals(0L, long0);
      assertEquals(0, sequenceStats0.getNGets());
      assertEquals(0, sequenceStats0.getNCachedGets());
      assertEquals(0L, sequenceStats0.getMin());
  }

  @Test
  public void test11()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(55, 55, 55, 55, 55, 55, 55, 55);
      long long0 = sequenceStats0.getLastValue();
      assertEquals(55, sequenceStats0.getNCachedGets());
      assertEquals(55L, sequenceStats0.getValue());
      assertEquals(55L, sequenceStats0.getMax());
      assertEquals(55, sequenceStats0.getCacheSize());
      assertEquals(55L, sequenceStats0.getMin());
      assertEquals(55, sequenceStats0.getNGets());
      assertEquals(55L, sequenceStats0.getCurrent());
      assertEquals(55L, long0);
  }

  @Test
  public void test12()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(55, 55, 55, 55, 55, 55, 55, 55);
      long long0 = sequenceStats0.getCurrent();
      assertEquals(55L, sequenceStats0.getMax());
      assertEquals(55, sequenceStats0.getNGets());
      assertEquals(55L, sequenceStats0.getMin());
      assertEquals(55L, long0);
      assertEquals(55, sequenceStats0.getNCachedGets());
      assertEquals(55, sequenceStats0.getCacheSize());
      assertEquals(55L, sequenceStats0.getLastValue());
      assertEquals(55L, sequenceStats0.getValue());
  }

  @Test
  public void test13()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-1281), 0, (-1L), (-1281), 0L, (-1281), 0L, 0);
      long long0 = sequenceStats0.getCurrent();
      assertEquals(0, sequenceStats0.getCacheSize());
      assertEquals(0L, sequenceStats0.getLastValue());
      assertEquals(0, sequenceStats0.getNCachedGets());
      assertEquals((-1281L), sequenceStats0.getValue());
      assertEquals((-1L), long0);
      assertEquals(-1281, sequenceStats0.getNGets());
      assertEquals((-1281L), sequenceStats0.getMin());
      assertEquals(0L, sequenceStats0.getMax());
  }

  @Test
  public void test14()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 0, 0, 185L, 0, 0, 1012L, 0);
      int int0 = sequenceStats0.getCacheSize();
      assertEquals(0, sequenceStats0.getNGets());
      assertEquals(0, int0);
      assertEquals(0L, sequenceStats0.getCurrent());
      assertEquals(0, sequenceStats0.getNCachedGets());
      assertEquals(185L, sequenceStats0.getValue());
      assertEquals(0L, sequenceStats0.getLastValue());
      assertEquals(1012L, sequenceStats0.getMax());
      assertEquals(0L, sequenceStats0.getMin());
  }

  @Test
  public void test15()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(55, 55, 55, 55, 55, 55, 55, 55);
      int int0 = sequenceStats0.getCacheSize();
      assertEquals(55L, sequenceStats0.getLastValue());
      assertEquals(55L, sequenceStats0.getCurrent());
      assertEquals(55, sequenceStats0.getNCachedGets());
      assertEquals(55, sequenceStats0.getNGets());
      assertEquals(55L, sequenceStats0.getMax());
      assertEquals(55, int0);
      assertEquals(55L, sequenceStats0.getMin());
      assertEquals(55L, sequenceStats0.getValue());
  }

  @Test
  public void test16()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1));
      int int0 = sequenceStats0.getCacheSize();
      assertEquals((-1L), sequenceStats0.getMin());
      assertEquals((-1L), sequenceStats0.getValue());
      assertEquals((-1), int0);
      assertEquals((-1L), sequenceStats0.getMax());
      assertEquals((-1L), sequenceStats0.getLastValue());
      assertEquals((-1L), sequenceStats0.getCurrent());
      assertEquals(-1, sequenceStats0.getNCachedGets());
      assertEquals(-1, sequenceStats0.getNGets());
  }

  @Test
  public void test17()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1));
      long long0 = sequenceStats0.getValue();
      assertEquals((-1L), sequenceStats0.getMin());
      assertEquals(-1, sequenceStats0.getNGets());
      assertEquals((-1L), sequenceStats0.getMax());
      assertEquals((-1L), sequenceStats0.getLastValue());
      assertEquals(-1, sequenceStats0.getCacheSize());
      assertEquals((-1L), long0);
      assertEquals(-1, sequenceStats0.getNCachedGets());
      assertEquals((-1L), sequenceStats0.getCurrent());
  }

  @Test
  public void test18()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-2393), (-2393), (-2393), (-2393), (-2393), (-2393), (-2393), (-2393));
      long long0 = sequenceStats0.getMin();
      assertEquals((-2393L), sequenceStats0.getCurrent());
      assertEquals(-2393, sequenceStats0.getNGets());
      assertEquals(-2393, sequenceStats0.getNCachedGets());
      assertEquals(-2393, sequenceStats0.getCacheSize());
      assertEquals((-2393L), sequenceStats0.getValue());
      assertEquals((-2393L), long0);
      assertEquals((-2393L), sequenceStats0.getLastValue());
      assertEquals((-2393L), sequenceStats0.getMax());
  }

  @Test
  public void test19()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, (-5622), 0, 0, 0, 0, 314L, 1206);
      long long0 = sequenceStats0.getCurrent();
      assertEquals(0L, sequenceStats0.getValue());
      assertEquals(1206, sequenceStats0.getCacheSize());
      assertEquals(0L, long0);
      assertEquals(314L, sequenceStats0.getMax());
      assertEquals(0, sequenceStats0.getNGets());
      assertEquals(0L, sequenceStats0.getMin());
      assertEquals(-5622, sequenceStats0.getNCachedGets());
      assertEquals(0L, sequenceStats0.getLastValue());
  }

  @Test
  public void test20()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1));
      String string0 = sequenceStats0.toString();
      assertEquals("nGets=-1\nnCachedGets=-1\ncurrent=-1\nvalue=-1\nlastValue=-1\nmin=-1\nmax=-1\ncacheSize=-1", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 0, (-1L), 905L, 0, 0L, 0L, 0);
      int int0 = sequenceStats0.getNCachedGets();
      assertEquals(0, sequenceStats0.getCacheSize());
      assertEquals(0L, sequenceStats0.getLastValue());
      assertEquals((-1L), sequenceStats0.getCurrent());
      assertEquals(905L, sequenceStats0.getValue());
      assertEquals(0L, sequenceStats0.getMin());
      assertEquals(0, int0);
      assertEquals(0L, sequenceStats0.getMax());
      assertEquals(0, sequenceStats0.getNGets());
  }

  @Test
  public void test22()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(140, (-3173), 0L, (-339L), (-339L), 0L, (-339L), (-3173));
      int int0 = sequenceStats0.getNGets();
      assertEquals((-339L), sequenceStats0.getLastValue());
      assertEquals(0L, sequenceStats0.getCurrent());
      assertEquals(-3173, sequenceStats0.getNCachedGets());
      assertEquals((-339L), sequenceStats0.getValue());
      assertEquals(140, int0);
      assertEquals((-339L), sequenceStats0.getMax());
      assertEquals(-3173, sequenceStats0.getCacheSize());
      assertEquals(0L, sequenceStats0.getMin());
  }

  @Test
  public void test23()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 0, (-1L), 0, (-1L), (-1L), 0, 0);
      long long0 = sequenceStats0.getMax();
      assertEquals(0, sequenceStats0.getNCachedGets());
      assertEquals(0, sequenceStats0.getNGets());
      assertEquals((-1L), sequenceStats0.getCurrent());
      assertEquals(0L, long0);
      assertEquals((-1L), sequenceStats0.getMin());
      assertEquals(0L, sequenceStats0.getValue());
      assertEquals(0, sequenceStats0.getCacheSize());
      assertEquals((-1L), sequenceStats0.getLastValue());
  }

  @Test
  public void test24()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(140, (-3173), 0L, (-339L), (-339L), 0L, (-339L), (-3173));
      long long0 = sequenceStats0.getLastValue();
      assertEquals((-339L), long0);
      assertEquals(0L, sequenceStats0.getCurrent());
      assertEquals(140, sequenceStats0.getNGets());
      assertEquals((-339L), sequenceStats0.getValue());
      assertEquals(-3173, sequenceStats0.getCacheSize());
      assertEquals((-339L), sequenceStats0.getMax());
      assertEquals(-3173, sequenceStats0.getNCachedGets());
      assertEquals(0L, sequenceStats0.getMin());
  }
}
