/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 14:47:04 KST 2017
 */

package com.sleepycat.je.latch;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sleepycat.je.latch.LatchTable;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class LatchTable_ESTest4 extends LatchTable_ESTest_scaffolding4 {

  @Test
  public void test00()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("");
      boolean boolean0 = latchTable0.noteLatch(latchTable0);
      assertTrue(boolean0);
      
      boolean boolean1 = latchTable0.unNoteLatch(latchTable0, "%P's%?YY!K-S7c^2R5");
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable(")");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      String string0 = latchTable0.toString(")())", (Object) "", (List) linkedList0, 0);
      assertEquals("<LATCH [name: )())] [owner: ] [waiters: 1 1 ]>", string0);
  }

  @Test
  public void test02()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable(")");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = latchTable0.toString("'|2DeUK+ x+np4up", (Object) ":M2ukI|vq#:*]v0K", (List) linkedList0, 879);
      assertEquals("<LATCH [name: '|2DeUK+ x+np4up] [owner: :M2ukI|vq#:*]v0K]>", string0);
  }

  @Test
  public void test05()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable((String) null);
      // Undeclared exception!
      try { 
        latchTable0.getNameString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.lang.StringBuffer", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable((String) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      String string0 = latchTable0.toString((String) null, (Object) linkedList0, (List) linkedList0, 0);
      assertEquals("<LATCH [owner: [null]] [waiters: null ]>", string0);
  }

  @Test
  public void test07()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("p72c\"0'z3<NQ3");
      String string0 = latchTable0.toString("p72c\"0'z3<NQ3", (Object) "p72c\"0'z3<NQ3", (List) null, (-1));
      assertEquals("<LATCH [name: p72c\"0'z3<NQ3] [owner: p72c\"0'z3<NQ3]>", string0);
  }

  @Test
  public void test08()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("GU");
      Object object0 = new Object();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        latchTable0.toString("GU(GU)", object0, (List) linkedList0, (-3291));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3291, Size: 0
         //
         assertThrownBy("java.util.LinkedList", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable((String) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = latchTable0.toString((String) null, (Object) linkedList0, (List) linkedList0, 0);
      assertEquals("<LATCH [owner: []]>", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("GU");
      String string0 = latchTable0.getNameString("GU");
      assertEquals("GU(GU)", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("");
      String string0 = latchTable0.getNameString((String) null);
      assertEquals("", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("p72c\"0'z3<NQ3");
      boolean boolean0 = latchTable0.noteLatch("<LATCH [name: p72c\"0'z3<NQ3] [owner: p72c\"0'z3<NQ3]>");
      assertTrue(boolean0);
      
      String string0 = latchTable0.latchesHeldToString();
      assertEquals("<LATCH [name: p72c\"0'z3<NQ3] [owner: p72c\"0'z3<NQ3]>\n", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("GU");
      String string0 = latchTable0.latchesHeldToString();
      assertEquals("", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("");
      latchTable0.noteLatch(latchTable0);
      int int0 = latchTable0.countLatchesHeld();
      assertEquals(1, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("GU");
      int int0 = latchTable0.countLatchesHeld();
      assertEquals(0, int0);
  }

  @Test
  public void test16()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("GU");
      Object object0 = new Object();
      boolean boolean0 = latchTable0.unNoteLatch(object0, "@TUq'$");
      assertFalse(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("GU");
      Object object0 = new Object();
      latchTable0.noteLatch((Object) null);
      boolean boolean0 = latchTable0.noteLatch(object0);
      assertTrue(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("");
      latchTable0.clearNotes();
  }
}
