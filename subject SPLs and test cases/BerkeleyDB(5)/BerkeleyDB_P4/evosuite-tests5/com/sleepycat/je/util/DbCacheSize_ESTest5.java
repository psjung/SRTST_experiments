/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 12:16:32 KST 2017
 */

package com.sleepycat.je.util;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.fail;

import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.Database;
import com.sleepycat.je.Environment;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class DbCacheSize_ESTest5 extends DbCacheSize_ESTest_scaffolding5 {

  @Test
  public void test00()  throws Throwable  {
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream("e3ETo~kCYU ;/2;:t", "K?6;`SyO");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // K?6;`SyO
         //
         assertThrownBy("java.io.PrintStream", e);
      }
  }

  @Test
  public void test01()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0);
      DbCacheSize.DbCacheSize_insertRecords dbCacheSize_DbCacheSize_insertRecords0 = new DbCacheSize.DbCacheSize_insertRecords(printStream0, (Environment) null, (Database) null, (-9L), (-1795481029), 60, true);
      // Undeclared exception!
      try { 
        dbCacheSize_DbCacheSize_insertRecords0.hook833();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.util.DbCacheSize$DbCacheSize_insertRecords", e);
      }
  }

  @Test
  public void test02()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0);
      DbCacheSize.DbCacheSize_insertRecords dbCacheSize_DbCacheSize_insertRecords0 = new DbCacheSize.DbCacheSize_insertRecords(printStream0, (Environment) null, (Database) null, 1L, (-1795481029), 60, false);
      dbCacheSize_DbCacheSize_insertRecords0.execute();
  }

  @Test
  public void test03()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0);
      DbCacheSize.DbCacheSize_insertRecords dbCacheSize_DbCacheSize_insertRecords0 = new DbCacheSize.DbCacheSize_insertRecords(printStream0, (Environment) null, (Database) null, 1L, 56, 60, false);
      // Undeclared exception!
      try { 
        dbCacheSize_DbCacheSize_insertRecords0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.util.DbCacheSize$DbCacheSize_insertRecords", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0);
      DbCacheSize.DbCacheSize_insertRecords dbCacheSize_DbCacheSize_insertRecords0 = new DbCacheSize.DbCacheSize_insertRecords(printStream0, (Environment) null, (Database) null, (-9L), (-1795481029), 60, true);
      dbCacheSize_DbCacheSize_insertRecords0.execute();
  }

  @Test
  public void test05()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[1];
          stringArray0[0] = ")%xoHG^^lD:q-";
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[2];
          stringArray0[0] = "-measure";
          stringArray0[1] = "-measure";
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test07()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[2];
          stringArray0[0] = "-measure";
          stringArray0[1] = ",-\n  [-measurerandom";
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test08()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[9];
          stringArray0[0] = "-overhead";
          stringArray0[1] = "-overhead";
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test09()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[9];
          stringArray0[0] = "-measurerandom";
          stringArray0[1] = "-measurerandom";
          stringArray0[2] = "-measurerandom";
          stringArray0[3] = "\n";
          stringArray0[4] = "-measurerandom";
          stringArray0[5] = "$ZV5`Eh)hS'";
          stringArray0[6] = "-density";
          stringArray0[7] = "$[]U";
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[9];
          stringArray0[0] = "-measurerandom";
          stringArray0[1] = "-measurerandom";
          stringArray0[2] = "-measurerandom";
          stringArray0[3] = "\n";
          stringArray0[4] = "-measurerandom";
          stringArray0[5] = "$ZV5`Eh)hS'";
          stringArray0[6] = "-density";
          stringArray0[7] = "-measurerandom";
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[2];
          stringArray0[1] = "-nodemax";
          stringArray0[0] = "-nodemax";
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[2];
          stringArray0[0] = "-data";
          stringArray0[1] = "-data";
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[7];
          stringArray0[0] = "-key";
          stringArray0[1] = "UNKNOWN";
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[17];
          stringArray0[0] = "-key";
          stringArray0[1] = "-key";
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[2];
          stringArray0[0] = "-records";
          stringArray0[1] = "\n      # default: insert sequential keys";
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[2];
          stringArray0[0] = "-records";
          stringArray0[1] = "-records";
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String[] stringArray0 = new String[9];
          stringArray0[0] = "-overhead";
          stringArray0[1] = "r4.ai,YUm]aE8`e#v ";
          DbCacheSize.main(stringArray0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test
  public void test18()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0);
      DbCacheSize.DbCacheSize_insertRecords dbCacheSize_DbCacheSize_insertRecords0 = new DbCacheSize.DbCacheSize_insertRecords(printStream0, (Environment) null, (Database) null, 1L, 56, 60, true);
      // Undeclared exception!
      try { 
        dbCacheSize_DbCacheSize_insertRecords0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.util.DbCacheSize$DbCacheSize_insertRecords", e);
      }
  }

  @Test
  public void test19()  throws Throwable  {
      DbCacheSize dbCacheSize0 = new DbCacheSize();
  }

  @Test
  public void test20()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0);
      // Undeclared exception!
      try { 
        DbCacheSize.hook831(printStream0, (Environment) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.util.DbCacheSize", e);
      }
  }

  @Test
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbCacheSize.hook832((PrintStream) null, (Environment) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.util.DbCacheSize", e);
      }
  }
}
