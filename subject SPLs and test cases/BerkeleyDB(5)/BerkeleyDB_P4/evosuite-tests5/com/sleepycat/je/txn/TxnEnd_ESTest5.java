/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 12:13:06 KST 2017
 */

package com.sleepycat.je.txn;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class TxnEnd_ESTest5 extends TxnEnd_ESTest_scaffolding5 {

  @Test
  public void test00()  throws Throwable  {
      TxnCommit txnCommit0 = new TxnCommit();
      long long0 = txnCommit0.getTransactionId();
      assertEquals(0L, long0);
  }

  @Test
  public void test01()  throws Throwable  {
      TxnAbort txnAbort0 = new TxnAbort(3001L, 3001L);
      long long0 = txnAbort0.getTransactionId();
      assertEquals(3001L, long0);
  }

  @Test
  public void test02()  throws Throwable  {
      TxnCommit txnCommit0 = new TxnCommit((-171L), 0L);
      long long0 = txnCommit0.getLastLsn();
      assertEquals(0L, long0);
      assertEquals((-171L), txnCommit0.getTransactionId());
  }

  @Test
  public void test03()  throws Throwable  {
      TxnCommit txnCommit0 = new TxnCommit(255L, 255L);
      long long0 = txnCommit0.getLastLsn();
      assertEquals(255L, long0);
      assertEquals(255L, txnCommit0.getId());
  }

  @Test
  public void test04()  throws Throwable  {
      TxnAbort txnAbort0 = new TxnAbort();
      long long0 = txnAbort0.getId();
      assertEquals(0L, long0);
  }

  @Test
  public void test05()  throws Throwable  {
      TxnCommit txnCommit0 = new TxnCommit(1L, (-1L));
      long long0 = txnCommit0.getId();
      assertEquals(1L, long0);
  }

  @Test
  public void test06()  throws Throwable  {
      TxnCommit txnCommit0 = new TxnCommit();
      String string0 = txnCommit0.getTagName();
      assertEquals("TxnCommit", string0);
  }

  @Test
  public void test07()  throws Throwable  {
      TxnCommit txnCommit0 = new TxnCommit((-171L), 0L);
      txnCommit0.getLogType();
      assertEquals((-171L), txnCommit0.getId());
  }

  @Test
  public void test08()  throws Throwable  {
      TxnAbort txnAbort0 = new TxnAbort();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("<");
      // Undeclared exception!
      try { 
        txnAbort0.writeToLog(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      TxnCommit txnCommit0 = new TxnCommit();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("\" gTxnId=\"");
      // Undeclared exception!
      try { 
        txnCommit0.writeToLog(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("B?q^;s");
      TxnCommit txnCommit0 = new TxnCommit();
      // Undeclared exception!
      try { 
        txnCommit0.readFromLog(byteBuffer0, (byte) (-8));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TxnCommit txnCommit0 = new TxnCommit();
      // Undeclared exception!
      try { 
        txnCommit0.readFromLog((ByteBuffer) null, (byte)8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      TxnPrepare txnPrepare0 = new TxnPrepare();
      // Undeclared exception!
      try { 
        txnPrepare0.getLogSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TxnCommit txnCommit0 = new TxnCommit((-2148L), (-2148L));
      // Undeclared exception!
      try { 
        txnCommit0.dumpLog((StringBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.txn.TxnEnd", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TxnAbort txnAbort0 = new TxnAbort((long) 8, (long) (byte)0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("<Xid formatId=\"8\" gTxnId=\"\u0000\" bqual=\"\u0000\"/>");
      txnAbort0.writeToLog(byteBuffer0);
      assertEquals(8L, txnAbort0.getTransactionId());
  }

  @Test
  public void test15()  throws Throwable  {
      TxnPrepare txnPrepare0 = new TxnPrepare();
      boolean boolean0 = txnPrepare0.marshallOutsideWriteLatch();
      assertTrue(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      TxnCommit txnCommit0 = new TxnCommit();
      long long0 = txnCommit0.getLastLsn();
      assertEquals((-1L), long0);
  }

  @Test
  public void test17()  throws Throwable  {
      TxnCommit txnCommit0 = new TxnCommit((-124L), 0L);
      txnCommit0.postLogWork((-124L));
      assertEquals((-124L), txnCommit0.getTransactionId());
  }

  @Test
  public void test18()  throws Throwable  {
      TxnCommit txnCommit0 = new TxnCommit();
      int int0 = txnCommit0.getLogSize();
      assertEquals(24, int0);
  }

  @Test
  public void test19()  throws Throwable  {
      TxnCommit txnCommit0 = new TxnCommit((-171L), 0L);
      boolean boolean0 = txnCommit0.logEntryIsTransactional();
      assertEquals((-171L), txnCommit0.getTransactionId());
      assertTrue(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      TxnCommit txnCommit0 = new TxnCommit((-124L), 0L);
      long long0 = txnCommit0.getTransactionId();
      assertEquals((-124L), long0);
  }

  @Test
  public void test21()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      TxnCommit txnCommit0 = new TxnCommit((-124L), 0L);
      txnCommit0.dumpLog(stringBuffer0, false);
      //  // Unstable assertion: assertEquals(86, stringBuffer0.length());
      //  // Unstable assertion: assertEquals("<TxnCommit id=\"-124\" time=\"2017-04-22 12:12:56.328\"><DbLsn val=\"0x0/0x0\"/></TxnCommit>", stringWriter0.toString());
  }

  @Test
  public void test22()  throws Throwable  {
      TxnCommit txnCommit0 = new TxnCommit((-171L), 0L);
      boolean boolean0 = txnCommit0.countAsObsoleteWhenLogged();
      assertFalse(boolean0);
      assertEquals((-171L), txnCommit0.getId());
  }

  @Test
  public void test23()  throws Throwable  {
      TxnCommit txnCommit0 = new TxnCommit((-2320L), (-2320L));
      long long0 = txnCommit0.getId();
      assertEquals((-2320L), long0);
  }

  @Test
  public void test24()  throws Throwable  {
      TxnAbort txnAbort0 = new TxnAbort();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("BIN must be latched before evicting LNs");
      txnAbort0.readFromLog(byteBuffer0, (byte)57);
      assertEquals(24, byteBuffer0.position());
  }
}
