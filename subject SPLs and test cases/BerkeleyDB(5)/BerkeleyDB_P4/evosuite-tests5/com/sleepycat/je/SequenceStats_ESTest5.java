/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 09:52:29 KST 2017
 */

package com.sleepycat.je;

import static org.junit.Assert.assertEquals;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class SequenceStats_ESTest5 extends SequenceStats_ESTest_scaffolding5 {

  @Test
  public void test00()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 0, 0, 0, 0, 0, 0L, 0);
      sequenceStats0.getValue();
      assertEquals(0, sequenceStats0.getNGets());
      assertEquals(0, sequenceStats0.getNCachedGets());
      assertEquals(0, sequenceStats0.getCacheSize());
  }

  @Test
  public void test01()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-1414), (-1414), 1L, 1L, 139L, 139L, (-1414), (-1414));
      long long0 = sequenceStats0.getValue();
      assertEquals(139L, sequenceStats0.getMin());
      assertEquals(-1414, sequenceStats0.getNGets());
      assertEquals((-1414L), sequenceStats0.getMax());
      assertEquals(-1414, sequenceStats0.getNCachedGets());
      assertEquals(1L, long0);
      assertEquals(-1414, sequenceStats0.getCacheSize());
      assertEquals(139L, sequenceStats0.getLastValue());
      assertEquals(1L, sequenceStats0.getCurrent());
  }

  @Test
  public void test02()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 0, 0, 0, 0, 0, 0L, 0);
      int int0 = sequenceStats0.getNGets();
      assertEquals(0, int0);
      assertEquals(0, sequenceStats0.getCacheSize());
      assertEquals(0, sequenceStats0.getNCachedGets());
  }

  @Test
  public void test03()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(4471, 4471, 4471, 4471, 4471, 4471, 4471, 4471);
      int int0 = sequenceStats0.getNGets();
      assertEquals(4471, sequenceStats0.getCacheSize());
      assertEquals(4471L, sequenceStats0.getLastValue());
      assertEquals(4471L, sequenceStats0.getValue());
      assertEquals(4471, int0);
      assertEquals(4471L, sequenceStats0.getMax());
      assertEquals(4471, sequenceStats0.getNCachedGets());
      assertEquals(4471L, sequenceStats0.getMin());
      assertEquals(4471L, sequenceStats0.getCurrent());
  }

  @Test
  public void test04()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-1), 0, 0, 0L, 0L, 0L, 0L, 0);
      int int0 = sequenceStats0.getNCachedGets();
      assertEquals(0, sequenceStats0.getCacheSize());
      assertEquals(-1, sequenceStats0.getNGets());
      assertEquals(0, int0);
  }

  @Test
  public void test05()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-2293), (-2293), (-2293), (-2293), (-2293), (-2293), (-2293), (-2293));
      int int0 = sequenceStats0.getNCachedGets();
      assertEquals((-2293L), sequenceStats0.getCurrent());
      assertEquals(-2293, sequenceStats0.getCacheSize());
      assertEquals((-2293), int0);
      assertEquals(-2293, sequenceStats0.getNGets());
      assertEquals((-2293L), sequenceStats0.getMin());
      assertEquals((-2293L), sequenceStats0.getLastValue());
      assertEquals((-2293L), sequenceStats0.getMax());
      assertEquals((-2293L), sequenceStats0.getValue());
  }

  @Test
  public void test06()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-1), 0, 0, 0L, 0L, 0L, 0L, 0);
      sequenceStats0.getMin();
      assertEquals(-1, sequenceStats0.getNGets());
      assertEquals(0, sequenceStats0.getNCachedGets());
      assertEquals(0, sequenceStats0.getCacheSize());
  }

  @Test
  public void test07()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-2293), (-2293), (-2293), (-2293), (-2293), (-2293), (-2293), (-2293));
      long long0 = sequenceStats0.getMin();
      assertEquals((-2293L), sequenceStats0.getMax());
      assertEquals((-2293L), sequenceStats0.getValue());
      assertEquals((-2293L), sequenceStats0.getLastValue());
      assertEquals(-2293, sequenceStats0.getNGets());
      assertEquals(-2293, sequenceStats0.getNCachedGets());
      assertEquals(-2293, sequenceStats0.getCacheSize());
      assertEquals((-2293L), sequenceStats0.getCurrent());
      assertEquals((-2293L), long0);
  }

  @Test
  public void test08()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-1), 0, 0, 0L, 0L, 0L, 0L, 0);
      sequenceStats0.getMax();
      assertEquals(0, sequenceStats0.getCacheSize());
      assertEquals(0, sequenceStats0.getNCachedGets());
      assertEquals(-1, sequenceStats0.getNGets());
  }

  @Test
  public void test09()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(2731, 2731, (-2888L), (-2888L), (-2888L), 2731, 512L, (-1649));
      long long0 = sequenceStats0.getMax();
      assertEquals(2731, sequenceStats0.getNCachedGets());
      assertEquals((-2888L), sequenceStats0.getLastValue());
      assertEquals(2731L, sequenceStats0.getMin());
      assertEquals(512L, long0);
      assertEquals(2731, sequenceStats0.getNGets());
      assertEquals((-2888L), sequenceStats0.getValue());
      assertEquals(-1649, sequenceStats0.getCacheSize());
      assertEquals((-2888L), sequenceStats0.getCurrent());
  }

  @Test
  public void test10()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(0, 0, 0, 0, 0, 0, 0L, 0);
      sequenceStats0.getLastValue();
      assertEquals(0, sequenceStats0.getNCachedGets());
      assertEquals(0, sequenceStats0.getNGets());
      assertEquals(0, sequenceStats0.getCacheSize());
  }

  @Test
  public void test11()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-2293), (-2293), (-2293), (-2293), (-2293), (-2293), (-2293), (-2293));
      long long0 = sequenceStats0.getLastValue();
      assertEquals(-2293, sequenceStats0.getNGets());
      assertEquals((-2293L), sequenceStats0.getCurrent());
      assertEquals(-2293, sequenceStats0.getCacheSize());
      assertEquals((-2293L), long0);
      assertEquals((-2293L), sequenceStats0.getMin());
      assertEquals((-2293L), sequenceStats0.getValue());
      assertEquals((-2293L), sequenceStats0.getMax());
      assertEquals(-2293, sequenceStats0.getNCachedGets());
  }

  @Test
  public void test12()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(266, 266, 0L, 0L, 0L, 1191L, (-718L), 266);
      long long0 = sequenceStats0.getCurrent();
      assertEquals(266, sequenceStats0.getNGets());
      assertEquals(0L, long0);
      assertEquals((-718L), sequenceStats0.getMax());
      assertEquals(266, sequenceStats0.getCacheSize());
      assertEquals(266, sequenceStats0.getNCachedGets());
      assertEquals(0L, sequenceStats0.getLastValue());
      assertEquals(1191L, sequenceStats0.getMin());
      assertEquals(0L, sequenceStats0.getValue());
  }

  @Test
  public void test13()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-1414), (-1414), 1L, 1L, 139L, 139L, (-1414), (-1414));
      long long0 = sequenceStats0.getCurrent();
      assertEquals(-1414, sequenceStats0.getNGets());
      assertEquals(1L, long0);
      assertEquals(139L, sequenceStats0.getMin());
      assertEquals(1L, sequenceStats0.getValue());
      assertEquals(-1414, sequenceStats0.getCacheSize());
      assertEquals(139L, sequenceStats0.getLastValue());
      assertEquals(-1414, sequenceStats0.getNCachedGets());
      assertEquals((-1414L), sequenceStats0.getMax());
  }

  @Test
  public void test14()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(266, 266, 0L, 0L, 0L, 1191L, (-718L), 266);
      int int0 = sequenceStats0.getCacheSize();
      assertEquals(266, int0);
      assertEquals(0L, sequenceStats0.getCurrent());
      assertEquals((-718L), sequenceStats0.getMax());
      assertEquals(266, sequenceStats0.getNGets());
      assertEquals(0L, sequenceStats0.getValue());
      assertEquals(1191L, sequenceStats0.getMin());
      assertEquals(266, sequenceStats0.getNCachedGets());
      assertEquals(0L, sequenceStats0.getLastValue());
  }

  @Test
  public void test15()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-1), 0, 0, 0L, 0L, 0L, 0L, 0);
      int int0 = sequenceStats0.getCacheSize();
      assertEquals(0, int0);
      assertEquals(-1, sequenceStats0.getNGets());
      assertEquals(0, sequenceStats0.getNCachedGets());
  }

  @Test
  public void test16()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-476), (-476), (-2593L), (-476), (-2593L), (-2593L), (-476), (-476));
      int int0 = sequenceStats0.getCacheSize();
      assertEquals((-2593L), sequenceStats0.getMin());
      assertEquals((-476), int0);
      assertEquals((-2593L), sequenceStats0.getCurrent());
      assertEquals((-2593L), sequenceStats0.getLastValue());
      assertEquals((-476L), sequenceStats0.getMax());
      assertEquals((-476L), sequenceStats0.getValue());
      assertEquals(-476, sequenceStats0.getNCachedGets());
      assertEquals(-476, sequenceStats0.getNGets());
  }

  @Test
  public void test17()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-476), (-476), (-2593L), (-476), (-2593L), (-2593L), (-476), (-476));
      long long0 = sequenceStats0.getValue();
      assertEquals((-2593L), sequenceStats0.getMin());
      assertEquals(-476, sequenceStats0.getCacheSize());
      assertEquals((-476L), sequenceStats0.getMax());
      assertEquals((-476L), long0);
      assertEquals((-2593L), sequenceStats0.getCurrent());
      assertEquals(-476, sequenceStats0.getNCachedGets());
      assertEquals(-476, sequenceStats0.getNGets());
      assertEquals((-2593L), sequenceStats0.getLastValue());
  }

  @Test
  public void test18()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(266, 266, 0L, 0L, 0L, 1191L, (-718L), 266);
      long long0 = sequenceStats0.getMin();
      assertEquals((-718L), sequenceStats0.getMax());
      assertEquals(266, sequenceStats0.getNGets());
      assertEquals(0L, sequenceStats0.getValue());
      assertEquals(266, sequenceStats0.getNCachedGets());
      assertEquals(0L, sequenceStats0.getLastValue());
      assertEquals(1191L, long0);
      assertEquals(266, sequenceStats0.getCacheSize());
      assertEquals(0L, sequenceStats0.getCurrent());
  }

  @Test
  public void test19()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-476), (-476), (-2593L), (-476), (-2593L), (-2593L), (-476), (-476));
      long long0 = sequenceStats0.getCurrent();
      assertEquals(-476, sequenceStats0.getNGets());
      assertEquals((-2593L), long0);
      assertEquals(-476, sequenceStats0.getCacheSize());
      assertEquals(-476, sequenceStats0.getNCachedGets());
      assertEquals((-476L), sequenceStats0.getMax());
      assertEquals((-2593L), sequenceStats0.getLastValue());
      assertEquals((-2593L), sequenceStats0.getMin());
      assertEquals((-476L), sequenceStats0.getValue());
  }

  @Test
  public void test20()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-476), (-476), (-2593L), (-476), (-2593L), (-2593L), (-476), (-476));
      String string0 = sequenceStats0.toString();
      assertEquals("nGets=-476\nnCachedGets=-476\ncurrent=-2593\nvalue=-476\nlastValue=-2593\nmin=-2593\nmax=-476\ncacheSize=-476", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(266, 266, 0L, 0L, 0L, 1191L, (-718L), 266);
      int int0 = sequenceStats0.getNCachedGets();
      assertEquals(0L, sequenceStats0.getLastValue());
      assertEquals(0L, sequenceStats0.getCurrent());
      assertEquals(266, int0);
      assertEquals((-718L), sequenceStats0.getMax());
      assertEquals(266, sequenceStats0.getCacheSize());
      assertEquals(1191L, sequenceStats0.getMin());
      assertEquals(0L, sequenceStats0.getValue());
      assertEquals(266, sequenceStats0.getNGets());
  }

  @Test
  public void test22()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-476), (-476), (-2593L), (-476), (-2593L), (-2593L), (-476), (-476));
      int int0 = sequenceStats0.getNGets();
      assertEquals((-2593L), sequenceStats0.getMin());
      assertEquals((-476L), sequenceStats0.getMax());
      assertEquals((-2593L), sequenceStats0.getCurrent());
      assertEquals(-476, sequenceStats0.getNCachedGets());
      assertEquals((-2593L), sequenceStats0.getLastValue());
      assertEquals((-476), int0);
      assertEquals(-476, sequenceStats0.getCacheSize());
      assertEquals((-476L), sequenceStats0.getValue());
  }

  @Test
  public void test23()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats((-1414), (-1414), 1L, 1L, 139L, 139L, (-1414), (-1414));
      long long0 = sequenceStats0.getMax();
      assertEquals(-1414, sequenceStats0.getNCachedGets());
      assertEquals((-1414L), long0);
      assertEquals(-1414, sequenceStats0.getNGets());
      assertEquals(1L, sequenceStats0.getValue());
      assertEquals(139L, sequenceStats0.getMin());
      assertEquals(1L, sequenceStats0.getCurrent());
      assertEquals(-1414, sequenceStats0.getCacheSize());
      assertEquals(139L, sequenceStats0.getLastValue());
  }

  @Test
  public void test24()  throws Throwable  {
      SequenceStats sequenceStats0 = new SequenceStats(1082, (-776), 4394L, 0L, 4394L, 1082, 1082, 1082);
      long long0 = sequenceStats0.getLastValue();
      assertEquals(1082L, sequenceStats0.getMin());
      assertEquals(1082L, sequenceStats0.getMax());
      assertEquals(1082, sequenceStats0.getNGets());
      assertEquals(4394L, sequenceStats0.getCurrent());
      assertEquals(4394L, long0);
      assertEquals(0L, sequenceStats0.getValue());
      assertEquals(1082, sequenceStats0.getCacheSize());
      assertEquals(-776, sequenceStats0.getNCachedGets());
  }
}
