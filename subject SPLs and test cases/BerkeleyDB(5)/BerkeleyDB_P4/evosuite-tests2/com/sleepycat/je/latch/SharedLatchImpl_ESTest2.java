/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 00:43:57 KST 2017
 */

package com.sleepycat.je.latch;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sleepycat.je.dbi.EnvironmentImpl;
import com.sleepycat.je.latch.LatchException;
import com.sleepycat.je.latch.SharedLatchImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class SharedLatchImpl_ESTest2 extends SharedLatchImpl_ESTest_scaffolding2 {

  @Test
  public void test00()  throws Throwable  {
      SharedLatchImpl sharedLatchImpl0 = new SharedLatchImpl(" must be aborted.", (EnvironmentImpl) null);
      sharedLatchImpl0.acquireShared();
      sharedLatchImpl0.release();
  }

  @Test
  public void test01()  throws Throwable  {
      SharedLatchImpl sharedLatchImpl0 = new SharedLatchImpl(" must be aborted.", (EnvironmentImpl) null);
      sharedLatchImpl0.hook433();
  }

  @Test
  public void test02()  throws Throwable  {
      SharedLatchImpl sharedLatchImpl0 = new SharedLatchImpl("<gm", (EnvironmentImpl) null);
      sharedLatchImpl0.hook432();
  }

  @Test
  public void test03()  throws Throwable  {
      SharedLatchImpl sharedLatchImpl0 = new SharedLatchImpl("B{-S#^XrR/r{*", (EnvironmentImpl) null);
      sharedLatchImpl0.hook431();
  }

  @Test
  public void test04()  throws Throwable  {
      SharedLatchImpl sharedLatchImpl0 = new SharedLatchImpl("e", (EnvironmentImpl) null);
      sharedLatchImpl0.hook429();
  }

  @Test
  public void test05()  throws Throwable  {
      SharedLatchImpl sharedLatchImpl0 = new SharedLatchImpl("IOException caught: ", (EnvironmentImpl) null);
      sharedLatchImpl0.acquireShared();
      try { 
        sharedLatchImpl0.acquireExclusiveNoWait();
        fail("Expecting exception: LatchException");
      
      } catch(LatchException e) {
         //
         // LatchImpl(IOException caught: ) reentrancy/upgrade not allowed
         //
         assertThrownBy("com.sleepycat.je.latch.SharedLatchImpl", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      SharedLatchImpl sharedLatchImpl0 = new SharedLatchImpl("", (EnvironmentImpl) null);
      sharedLatchImpl0.acquireExclusive();
      try { 
        sharedLatchImpl0.acquireExclusive();
        fail("Expecting exception: LatchException");
      
      } catch(LatchException e) {
         //
         // LatchImpl() reentrancy/upgrade not allowed
         //
         assertThrownBy("com.sleepycat.je.latch.SharedLatchImpl", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      SharedLatchImpl sharedLatchImpl0 = new SharedLatchImpl("WGZV.", (EnvironmentImpl) null);
      sharedLatchImpl0.acquireExclusiveNoWait();
      sharedLatchImpl0.isWriteLockedByCurrentThread();
  }

  @Test
  public void test08()  throws Throwable  {
      SharedLatchImpl sharedLatchImpl0 = new SharedLatchImpl("IOException caught: ", (EnvironmentImpl) null);
      sharedLatchImpl0.isWriteLockedByCurrentThread();
  }

  @Test
  public void test09()  throws Throwable  {
      SharedLatchImpl sharedLatchImpl0 = new SharedLatchImpl("MtYGa9S3b>8Qk", (EnvironmentImpl) null);
      sharedLatchImpl0.release();
  }

  @Test
  public void test10()  throws Throwable  {
      SharedLatchImpl sharedLatchImpl0 = new SharedLatchImpl("", (EnvironmentImpl) null);
      sharedLatchImpl0.setNoteLatch(true);
      sharedLatchImpl0.acquireShared();
      assertFalse(sharedLatchImpl0.isWriteLockedByCurrentThread());
  }

  @Test
  public void test11()  throws Throwable  {
      SharedLatchImpl sharedLatchImpl0 = new SharedLatchImpl("<gm", (EnvironmentImpl) null);
      sharedLatchImpl0.acquireExclusive();
      sharedLatchImpl0.acquireShared();
      sharedLatchImpl0.release();
      assertTrue(sharedLatchImpl0.isWriteLockedByCurrentThread());
  }

  @Test
  public void test12()  throws Throwable  {
      SharedLatchImpl sharedLatchImpl0 = new SharedLatchImpl("Both ", (EnvironmentImpl) null);
      sharedLatchImpl0.setNoteLatch(true);
      sharedLatchImpl0.acquireExclusive();
      assertTrue(sharedLatchImpl0.isWriteLockedByCurrentThread());
  }

  @Test
  public void test13()  throws Throwable  {
      SharedLatchImpl sharedLatchImpl0 = new SharedLatchImpl("MtYGa9S3b>8Qk", (EnvironmentImpl) null);
      sharedLatchImpl0.setName("MtYGa9S3b>8Qk");
      assertFalse(sharedLatchImpl0.isWriteLockedByCurrentThread());
  }

  @Test
  public void test14()  throws Throwable  {
      SharedLatchImpl sharedLatchImpl0 = new SharedLatchImpl("<gm", (EnvironmentImpl) null);
      sharedLatchImpl0.acquireShared();
      boolean boolean0 = sharedLatchImpl0.isWriteLockedByCurrentThread();
      assertFalse(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      SharedLatchImpl sharedLatchImpl0 = new SharedLatchImpl("<gm", (EnvironmentImpl) null);
      sharedLatchImpl0.hook430();
      assertFalse(sharedLatchImpl0.isWriteLockedByCurrentThread());
  }

  @Test
  public void test17()  throws Throwable  {
      SharedLatchImpl sharedLatchImpl0 = new SharedLatchImpl("", (EnvironmentImpl) null);
      sharedLatchImpl0.setNoteLatch(true);
      boolean boolean0 = sharedLatchImpl0.acquireExclusiveNoWait();
      assertTrue(sharedLatchImpl0.isWriteLockedByCurrentThread());
      assertTrue(boolean0);
  }
}
