/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 21:35:19 KST 2017
 */

package com.sleepycat.je.utilint;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.InputStream;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class PropUtil_ESTest1 extends PropUtil_ESTest_scaffolding1 {

  @Test
  public void test00()  throws Throwable  {
      long long0 = PropUtil.microsToMillis((-7L));
      assertEquals(0L, long0);
  }

  @Test
  public void test01()  throws Throwable  {
      long long0 = PropUtil.microsToMillis(1162L);
      assertEquals(2L, long0);
  }

  @Test
  public void test02()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Properties properties0 = PropUtil.validateProps((Properties) null, linkedHashSet0, ".");
      Object object0 = new Object();
      properties0.put(object0, properties0);
      // Undeclared exception!
      try { 
        PropUtil.validateProps(properties0, linkedHashSet0, ".");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         assertThrownBy("java.util.Properties", e);
      }
  }

  @Test
  public void test03()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Properties properties0 = PropUtil.validateProps((Properties) null, linkedHashSet0, "nZgi1y]BKx{mGI?");
      // Undeclared exception!
      try { 
        PropUtil.getBoolean(properties0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      LinkedHashSet<InputStream> linkedHashSet0 = new LinkedHashSet<InputStream>();
      try { 
        PropUtil.validateProp("?dbu,W5YZ%", linkedHashSet0, "");
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // ?dbu,W5YZ% is not a valid property for 
         //
         assertThrownBy("com.sleepycat.je.utilint.PropUtil", e);
      }
  }

  @Test
  public void test05()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add("bZscqjZAwFIn+");
      PropUtil.validateProp("bZscqjZAwFIn+", linkedHashSet0, "bZscqjZAwFIn+");
      assertFalse(linkedHashSet0.isEmpty());
  }

  @Test
  public void test06()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Properties properties0 = PropUtil.validateProps((Properties) null, linkedHashSet0, "4T*';#hm#L");
      properties0.put("4T*';#hm#L", "]Ct'Y<6p");
      try { 
        PropUtil.validateProps(properties0, linkedHashSet0, "]Ct'Y<6p");
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // 4T*';#hm#L is not a valid property for ]Ct'Y<6p
         //
         assertThrownBy("com.sleepycat.je.utilint.PropUtil", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("4AT*+';#hm#9L");
      Properties properties0 = PropUtil.validateProps((Properties) null, linkedHashSet0, "4AT*+';#hm#9L");
      properties0.setProperty("4AT*+';#hm#9L", "4AT*+';#hm#9L");
      Properties properties1 = PropUtil.validateProps(properties0, linkedHashSet0, "4AT*+';#hm#9L");
      assertFalse(properties1.isEmpty());
  }

  @Test
  public void test08()  throws Throwable  {
      Properties properties0 = PropUtil.validateProps((Properties) null, (Set) null, "4at*+';#hm#9l");
      properties0.put("4at*+';#hm#9l", properties0);
      // Undeclared exception!
      try { 
        PropUtil.validateProps(properties0, (Set) null, "4at*+';#hm#9l");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test09()  throws Throwable  {
      Properties properties0 = PropUtil.validateProps((Properties) null, (Set) null, "4at*+';#hm#9l");
      Properties properties1 = PropUtil.validateProps(properties0, (Set) null, "4at*+';#hm#9l");
      assertEquals(0, properties1.size());
  }

  @Test
  public void test10()  throws Throwable  {
      LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
      Properties properties0 = PropUtil.validateProps((Properties) null, linkedHashSet0, "true");
      properties0.setProperty("true", "true");
      boolean boolean0 = PropUtil.getBoolean(properties0, "true");
      assertTrue(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Properties properties0 = PropUtil.validateProps((Properties) null, linkedHashSet0, "4AT*+';#hm#9L");
      properties0.setProperty("4AT*+';#hm#9L", "vV;c&oz6u{/2pC2I~");
      boolean boolean0 = PropUtil.getBoolean(properties0, "4AT*+';#hm#9L");
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Properties properties0 = PropUtil.validateProps((Properties) null, linkedHashSet0, "u0mBrFo'N");
      boolean boolean0 = PropUtil.getBoolean(properties0, "u0mBrFo'N");
      assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      PropUtil propUtil0 = new PropUtil();
  }

  @Test
  public void test14()  throws Throwable  {
      long long0 = PropUtil.microsToMillis((-3907L));
      assertEquals((-2L), long0);
  }
}
