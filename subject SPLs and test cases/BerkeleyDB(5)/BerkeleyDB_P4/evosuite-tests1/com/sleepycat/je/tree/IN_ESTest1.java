/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 20:37:25 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.File;
import java.io.StringWriter;
import java.util.LinkedList;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.EnvironmentConfig;
import com.sleepycat.je.dbi.CursorImpl;
import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.dbi.EnvironmentImpl;
import com.sleepycat.je.log.LogManager;

import de.ovgu.cide.jakutil.ReturnBoolean;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class IN_ESTest1 extends IN_ESTest_scaffolding1 {

  @Test
  public void test000()  throws Throwable  {
      IN.isStatePendingDeleted((byte)48);
  }

  @Test
  public void test001()  throws Throwable  {
      IN.isStateKnownDeleted((byte)2);
  }

  @Test
  public void test002()  throws Throwable  {
      IN iN0 = new IN();
      iN0.getEntryLsnByteArray();
  }

  @Test
  public void test003()  throws Throwable  {
      IN iN0 = new IN();
      iN0.entryZeroKeyComparesLow();
  }

  @Test
  public void test004()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.canBeAncestor(false);
  }

  @Test
  public void test005()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_validateSubtreeBeforeDelete iN_IN_validateSubtreeBeforeDelete0 = new IN.IN_validateSubtreeBeforeDelete(bIN0, 4199);
      iN_IN_validateSubtreeBeforeDelete0.execute();
  }

  @Test
  public void test006()  throws Throwable  {
      IN iN0 = new IN();
      iN0.isSoughtNode(254L, false);
  }

  @Test
  public void test007()  throws Throwable  {
      IN iN0 = new IN();
      Tree.SearchType tree_SearchType0 = Tree.SearchType.RIGHT;
      byte[] byteArray0 = new byte[6];
      SearchResult searchResult0 = new SearchResult();
      LinkedList<FileSummaryLN> linkedList0 = new LinkedList<FileSummaryLN>();
      iN0.findParent(tree_SearchType0, 14, true, true, byteArray0, byteArray0, searchResult0, false, false, (byte)47, linkedList0, false);
  }

  @Test
  public void test008()  throws Throwable  {
      IN iN0 = new IN();
      byte byte0 = (byte)0;
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        iN0.updateEntry((int) (byte)0, (Node) dBIN0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test009()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      IN.IN_updateEntry2 iN_IN_updateEntry2_0 = new IN.IN_updateEntry2(dBIN0, 2130836487, dBIN0, 14);
      // Undeclared exception!
      try { 
        dBIN0.getLogSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test011()  throws Throwable  {
      IN iN0 = new IN();
      byte[] byteArray0 = new byte[0];
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      iN0.init(databaseImpl0, byteArray0, (byte)1, (-1739));
  }

  @Test
  public void test012()  throws Throwable  {
      BIN bIN0 = new BIN();
      StringWriter stringWriter0 = new StringWriter(14);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      bIN0.dumpLogAdditional(stringBuffer0);
  }

  @Test
  public void test013()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.setLastFullLsn((byte)6);
  }

  @Test
  public void test014()  throws Throwable  {
      IN.isStatePendingDeleted((byte)25);
  }

  @Test
  public void test015()  throws Throwable  {
      IN.isStateKnownDeleted((byte) (-113));
  }

  @Test
  public void test018()  throws Throwable  {
      IN iN0 = new IN();
      iN0.hook618((EnvironmentImpl) null);
  }

  @Test
  public void test019()  throws Throwable  {
      SearchResult searchResult0 = new SearchResult();
  }

  @Test
  public void test020()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.entryZeroKeyComparesLow();
  }

  @Test
  public void test021()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.canBeAncestor(true);
  }

  @Test
  public void test022()  throws Throwable  {
      IN iN0 = new IN();
      DIN dIN0 = new DIN();
      iN0.adjustCursors(dIN0, 14, 13);
  }

  @Test
  public void test023()  throws Throwable  {
      IN iN0 = new IN();
      File file0 = null;
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig();
      EnvironmentImpl environmentImpl0 = null;
      try {
        environmentImpl0 = new EnvironmentImpl(file0, environmentConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.FileManager", e);
      }
  }

  @Test
  public void test025()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      byte[] byteArray0 = new byte[9];
      IN.IN_updateEntryCompareKey iN_IN_updateEntryCompareKey0 = new IN.IN_updateEntryCompareKey(dBIN0, 0, dBIN0, (byte) (-90), byteArray0);
      // Undeclared exception!
      try { 
        iN_IN_updateEntryCompareKey0.execute();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test026()  throws Throwable  {
      IN iN0 = new IN();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        iN0.splitSpecial(iN0, 5, (-676), byteArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test027()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.splitInternal(dBIN0, 1930, 1930, (-703));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DBIN", e);
      }
  }

  @Test
  public void test028()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.setLsnElement(1505, 212023298294366737L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6020
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test029()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.logInternal((LogManager) null, false, true, false, iN0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.INLogEntry", e);
      }
  }

  @Test
  public void test030()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.isEntryPendingDeleted((-1971));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1971
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test031()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.isEntryKnownDeleted(14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test032()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.isDirty(14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test033()  throws Throwable  {
      IN iN0 = new IN();
      byte[] byteArray0 = new byte[0];
      ChildReference childReference0 = new ChildReference((Node) iN0, byteArray0, (long) (byte)1, (byte)1);
      try { 
        iN0.insertEntry(childReference0);
        fail("Expecting exception: InconsistentNodeException");
      
      } catch(InconsistentNodeException e) {
         //
         // Node 0 should have been split before calling insertEntry
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_insertEntry1", e);
      }
  }

  @Test
  public void test035()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        dIN0.init((DatabaseImpl) null, byteArray0, (-2), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test036()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.getMigrate(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test037()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.getKeyComparator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test038()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.getDatabaseId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test039()  throws Throwable  {
      BIN bIN0 = new BIN();
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        bIN0.findEntry(byteArray0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test040()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.fetchTarget(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test041()  throws Throwable  {
      DIN dIN0 = new DIN();
      // Undeclared exception!
      try { 
        dIN0.dumpLogAdditional((StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DIN", e);
      }
  }

  @Test
  public void test042()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.dumpLog((StringBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IN.dumpDeletedState((StringBuffer) null, (byte) (-27));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test044()  throws Throwable  {
      IN iN0 = new IN();
      SearchResult searchResult0 = new SearchResult();
      // Undeclared exception!
      try { 
        iN0.descendOnParentSearch(searchResult0, false, false, (-1037), (Node) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test045()  throws Throwable  {
      IN iN0 = new IN();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        iN0.createNewInstance(byteArray0, 1000, (byte)10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test046()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.compress((BINReference) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test047()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test048()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_splitInternal iN_IN_splitInternal0 = new IN.IN_splitInternal(bIN0, bIN0, 14, 8, 14);
      // Undeclared exception!
      try { 
        bIN0.compareTo(iN_IN_splitInternal0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sleepycat.je.tree.IN$IN_splitInternal cannot be cast to com.sleepycat.je.tree.IN
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      IN iN0 = null;
      try {
        iN0 = new IN((DatabaseImpl) null, byteArray0, (int) (byte)22, (int) (byte)22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test050()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[0];
      IN iN0 = null;
      try {
        iN0 = new IN(databaseImpl0, byteArray0, (-252), Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test051()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.dumpString((-1810), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1810
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test052()  throws Throwable  {
      IN iN0 = new IN();
      iN0.dumpString(14, false);
  }

  @Test
  public void test053()  throws Throwable  {
      IN iN0 = new IN();
      iN0.getLogSize();
  }

  @Test
  public void test055()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.setMigrate(90, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 90
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test056()  throws Throwable  {
      IN iN0 = new IN();
      iN0.latch(false);
  }

  @Test
  public void test057()  throws Throwable  {
      IN iN0 = new IN();
      byte[] byteArray0 = new byte[0];
      BINReference bINReference0 = new BINReference(4L, (DatabaseId) null, byteArray0);
      iN0.compress(bINReference0, false);
  }

  @Test
  public void test058()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.setDirty(false);
  }

  @Test
  public void test059()  throws Throwable  {
      IN iN0 = new IN();
      iN0.beginTag();
  }

  @Test
  public void test060()  throws Throwable  {
      IN iN0 = new IN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      iN0.setDatabase(databaseImpl0);
  }

  @Test
  public void test061()  throws Throwable  {
      IN iN0 = new IN();
      iN0.endTag();
  }

  @Test
  public void test062()  throws Throwable  {
      IN iN0 = new IN();
      iN0.setGeneration();
  }

  @Test
  public void test063()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.setLsn(1994091958, 101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -613566760
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test064()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.getLevel();
  }

  @Test
  public void test065()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.getNEntries();
  }

  @Test
  public void test066()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.getIdentifierKey();
  }

  @Test
  public void test067()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.hook619(false);
        fail("Expecting exception: ReturnBoolean");
      
      } catch(ReturnBoolean e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test068()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      IN.IN_trackProvisionalObsolete iN_IN_trackProvisionalObsolete0 = new IN.IN_trackProvisionalObsolete(dBIN0, dBIN0, (-15L), (-1L));
      iN_IN_trackProvisionalObsolete0.execute();
  }

  @Test
  public void test069()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      BIN bIN0 = new BIN();
      IN.IN_trackProvisionalObsolete iN_IN_trackProvisionalObsolete0 = new IN.IN_trackProvisionalObsolete(bIN0, bIN0, (-15L), 0L);
      iN_IN_trackProvisionalObsolete0.execute();
      bIN0.trackProvisionalObsolete(dBIN0, 55L, (-3313L));
  }

  @Test
  public void test070()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      IN.IN_trackProvisionalObsolete iN_IN_trackProvisionalObsolete0 = new IN.IN_trackProvisionalObsolete(dBIN0, dBIN0, (-1L), 0L);
      iN_IN_trackProvisionalObsolete0.execute();
  }

  @Test
  public void test071()  throws Throwable  {
      IN iN0 = new IN();
      iN0.verify((byte[]) null);
  }

  @Test
  public void test074()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.validateSubtreeBeforeDelete((-2146345605));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2146345605
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test076()  throws Throwable  {
      IN iN0 = new IN();
      iN0.dumpKeys();
  }

  @Test
  public void test077()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      StringWriter stringWriter0 = new StringWriter(14);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      dBIN0.dumpLog(stringBuffer0, true);
  }

  @Test
  public void test078()  throws Throwable  {
      IN iN0 = new IN();
      iN0.isSoughtNode(0L, false);
  }

  @Test
  public void test079()  throws Throwable  {
      IN iN0 = new IN();
      Tree.SearchType tree_SearchType0 = Tree.SearchType.RIGHT;
      byte[] byteArray0 = new byte[5];
      SearchResult searchResult0 = new SearchResult();
      LinkedList<FileSummaryLN> linkedList0 = new LinkedList<FileSummaryLN>();
      iN0.findParent(tree_SearchType0, (-1418L), true, true, byteArray0, byteArray0, searchResult0, false, false, (byte)47, linkedList0, false);
      searchResult0.parent.getMainTreeKey();
  }

  @Test
  public void test080()  throws Throwable  {
      DIN dIN0 = new DIN();
      byte[] byteArray0 = new byte[6];
      dIN0.deleteEntry(byteArray0, true);
  }

  @Test
  public void test082()  throws Throwable  {
      IN iN0 = new IN();
      byte[] byteArray0 = new byte[5];
      iN0.isKeyInBounds(byteArray0);
  }

  @Test
  public void test083()  throws Throwable  {
      IN.makeFetchErrorMsg("<entry id=\"", (IN) null, 0L, (byte)0);
  }

  @Test
  public void test084()  throws Throwable  {
      DIN dIN0 = new DIN();
      try { 
        dIN0.getDupCountLN();
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // fetchTarget of null lsn IN=0 state=0 NULL_LSN without KnownDeleted
         //
         assertThrownBy("com.sleepycat.je.tree.ChildReference", e);
      }
  }

  @Test
  public void test085()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.makeFetchErrorMsg("", bIN0, (-4028L), (byte)77);
  }

  @Test
  public void test086()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      IN.dumpDeletedState(stringBuffer0, (byte) (-27));
  }

  @Test
  public void test087()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.setMigrate(90, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 90
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test088()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.latch(true);
  }

  @Test
  public void test089()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.isSoughtNode((-2L), false);
  }

  @Test
  public void test090()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.equals(dBIN0.ACCUMULATED_LIMIT);
  }

  @Test
  public void test092()  throws Throwable  {
      BIN bIN0 = new BIN();
      byte[] byteArray0 = new byte[3];
      ChildReference childReference0 = new ChildReference((Node) bIN0, byteArray0, 0L, (byte) (-9));
      IN.IN_insertEntry1 iN_IN_insertEntry1_0 = new IN.IN_insertEntry1(bIN0, childReference0);
      iN_IN_insertEntry1_0.hook646();
  }

  @Test
  public void test095()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      IN.IN_trackProvisionalObsolete iN_IN_trackProvisionalObsolete0 = new IN.IN_trackProvisionalObsolete(dBIN0, dBIN0, (-15L), 0L);
      iN_IN_trackProvisionalObsolete0.execute();
      iN_IN_trackProvisionalObsolete0.execute();
  }

  @Test
  public void test099()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      IN.IN_splitInternal iN_IN_splitInternal0 = new IN.IN_splitInternal(dBIN0, dBIN0, (-2004318070), 0, 2126634292);
      iN_IN_splitInternal0.hook617();
  }

  @Test
  public void test102()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.getDirty();
  }

  @Test
  public void test103()  throws Throwable  {
      IN iN0 = new IN();
      iN0.getGeneration();
  }

  @Test
  public void test104()  throws Throwable  {
      IN iN0 = new IN();
      iN0.getTransactionId();
  }

  @Test
  public void test105()  throws Throwable  {
      IN iN0 = new IN();
      iN0.validateSubtreeBeforeDelete((byte)0);
  }

  @Test
  public void test107()  throws Throwable  {
      IN iN0 = new IN();
      iN0.logEntryIsTransactional();
  }

  @Test
  public void test108()  throws Throwable  {
      BIN bIN0 = new BIN();
      try { 
        bIN0.getDupKey();
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // BIN.getDupKey() called
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test110()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.updateEntry(14, 127L, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 56
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test111()  throws Throwable  {
      IN iN0 = new IN();
      iN0.getLogType();
  }

  @Test
  public void test112()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.isRoot();
  }

  @Test
  public void test113()  throws Throwable  {
      IN iN0 = new IN();
      iN0.shortClassName();
  }

  @Test
  public void test115()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.getState(956);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 956
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test116()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.setPendingDeleted((-2221));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2221
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test119()  throws Throwable  {
      IN iN0 = new IN();
      LN lN0 = new LN();
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        iN0.updateEntry((-1018), (Node) lN0, 2891L, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4072
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test121()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      assertFalse(dBIN0.getDirty());
      
      byte[] byteArray0 = new byte[1];
      dBIN0.setIdentifierKey(byteArray0);
      assertTrue(dBIN0.getDirty());
  }

  @Test
  public void test123()  throws Throwable  {
      IN iN0 = new IN();
      iN0.hook638((Node) null);
      assertEquals(0, iN0.getLevel());
      assertEquals((-1L), iN0.getLastFullVersion());
      assertTrue(iN0.needsSplitting());
      assertEquals(0L, iN0.getGeneration());
      assertFalse(iN0.getDirty());
      assertFalse(iN0.isDbRoot());
  }

  @Test
  public void test125()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.updateEntry(16777214, (-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 67108856
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test126()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.clearKnownDeleted(260);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 260
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test128()  throws Throwable  {
      IN iN0 = new IN();
      iN0.hashCode();
      assertEquals(0, iN0.getLevel());
      assertEquals((-1L), iN0.getLastFullVersion());
      assertTrue(iN0.needsSplitting());
      assertFalse(iN0.isDbRoot());
      assertFalse(iN0.getDirty());
  }

  @Test
  public void test129()  throws Throwable  {
      IN iN0 = new IN();
      DIN dIN0 = new DIN();
      iN0.getChildKey(dIN0);
      assertFalse(dIN0.isRoot());
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertEquals(0L, dIN0.getGeneration());
      assertTrue(iN0.needsSplitting());
      assertFalse(dIN0.getDirty());
      assertEquals(0, iN0.getLevel());
  }

  @Test
  public void test130()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.adjustCursorsForInsert(19);
      assertTrue(dIN0.needsSplitting());
      assertEquals(0L, dIN0.getGeneration());
      assertFalse(dIN0.getDirty());
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertFalse(dIN0.isRoot());
      assertEquals(0, dIN0.getLevel());
  }

  @Test
  public void test131()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.getLsn((-2146345605));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4552173
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test133()  throws Throwable  {
      DIN dIN0 = new DIN();
      boolean boolean0 = dIN0.isCompressible();
      assertFalse(dIN0.isRoot());
      assertEquals(0L, dIN0.getGeneration());
      assertFalse(dIN0.getDirty());
      assertTrue(dIN0.needsSplitting());
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertFalse(boolean0);
      assertEquals(0, dIN0.getLevel());
  }

  @Test
  public void test134()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.updateEntry((-1037), 0L, (long) (-1037), (-806L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4148
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test138()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      int int0 = dBIN0.getMaxEntries();
      assertEquals(0, dBIN0.getLevel());
      assertFalse(dBIN0.isDbRoot());
      assertEquals(0, int0);
      assertEquals((-1L), dBIN0.getLastFullVersion());
      assertFalse(dBIN0.getDirty());
      assertEquals(0L, dBIN0.getGeneration());
  }

  @Test
  public void test140()  throws Throwable  {
      IN iN0 = new IN();
      boolean boolean0 = iN0.hasNonLNChildren();
      assertEquals(0, iN0.getNEntries());
      assertEquals(0, iN0.getLevel());
      assertFalse(iN0.isRoot());
      assertEquals((-1L), iN0.getLastFullVersion());
      assertFalse(boolean0);
      assertEquals(0L, iN0.getGeneration());
      assertTrue(iN0.needsSplitting());
  }

  @Test
  public void test141()  throws Throwable  {
      IN iN0 = new IN();
      ChildReference childReference0 = new ChildReference();
      try { 
        iN0.insertEntry1(childReference0);
        fail("Expecting exception: InconsistentNodeException");
      
      } catch(InconsistentNodeException e) {
         //
         // Node 0 should have been split before calling insertEntry
         //
         assertThrownBy("com.sleepycat.je.tree.IN$IN_insertEntry1", e);
      }
  }

  @Test
  public void test143()  throws Throwable  {
      BIN bIN0 = new BIN();
      int int0 = bIN0.compareTo(bIN0);
      assertTrue(bIN0.needsSplitting());
      assertFalse(bIN0.getDirty());
      assertEquals(0L, bIN0.getGeneration());
      assertEquals(0, int0);
      assertFalse(bIN0.isRoot());
      assertEquals((-1L), bIN0.getLastFullVersion());
      assertEquals(0, bIN0.getLevel());
  }

  @Test
  public void test144()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.initEntryLsn(0);
      assertFalse(dIN0.getDirty());
      assertEquals(0L, dIN0.getGeneration());
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertFalse(dIN0.isRoot());
      assertEquals(0, dIN0.getLevel());
      assertEquals(0, dIN0.getNEntries());
      assertTrue(dIN0.needsSplitting());
  }

  @Test
  public void test145()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.log((LogManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.INLogEntry", e);
      }
  }

  @Test
  public void test147()  throws Throwable  {
      IN iN0 = new IN();
      long long0 = iN0.getLastFullVersion();
      assertEquals(0L, iN0.getGeneration());
      assertFalse(iN0.getDirty());
      assertTrue(iN0.needsSplitting());
      assertEquals((-1L), long0);
      assertEquals(0, iN0.getLevel());
      assertEquals(0, iN0.getNEntries());
      assertFalse(iN0.isRoot());
  }

  @Test
  public void test149()  throws Throwable  {
      IN iN0 = new IN();
      iN0.getDupTreeKey();
      assertEquals(0, iN0.getLevel());
      assertFalse(iN0.isRoot());
      assertEquals(0, iN0.getNEntries());
      assertEquals(0L, iN0.getGeneration());
      assertEquals((-1L), iN0.getLastFullVersion());
      assertFalse(iN0.getDirty());
      assertTrue(iN0.needsSplitting());
  }

  @Test
  public void test151()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.accumulateStats((TreeWalkerStatsAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test154()  throws Throwable  {
      BIN bIN0 = new BIN();
      ChildReference childReference0 = new ChildReference();
      // Undeclared exception!
      try { 
        bIN0.insertEntry1(childReference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test155()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      boolean boolean0 = dBIN0.deleteEntry(14, false);
      assertFalse(boolean0);
      assertEquals(0, dBIN0.getLevel());
      assertFalse(dBIN0.isDbRoot());
      assertTrue(dBIN0.needsSplitting());
      assertEquals((-1L), dBIN0.getLastFullVersion());
      assertEquals(0L, dBIN0.getGeneration());
      assertFalse(dBIN0.getDirty());
      assertEquals(0, dBIN0.getNEntries());
  }

  @Test
  public void test156()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      assertFalse(dBIN0.getDirty());
      
      dBIN0.setIsRoot(false);
      assertTrue(dBIN0.getDirty());
  }

  @Test
  public void test157()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.split(dBIN0, 14, 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DBIN", e);
      }
  }

  @Test
  public void test158()  throws Throwable  {
      IN iN0 = new IN();
      iN0.setProhibitNextDelta();
      assertEquals(0, iN0.getLevel());
      assertTrue(iN0.needsSplitting());
      assertEquals(0, iN0.getNEntries());
      assertEquals((-1L), iN0.getLastFullVersion());
      assertFalse(iN0.isDbRoot());
      assertEquals(0L, iN0.getGeneration());
      assertFalse(iN0.getDirty());
  }

  @Test
  public void test159()  throws Throwable  {
      BIN bIN0 = new BIN();
      byte[] byteArray0 = new byte[2];
      bIN0.selectKey(byteArray0, byteArray0);
      assertFalse(bIN0.isRoot());
      assertEquals(0, bIN0.getLevel());
      assertEquals((-1L), bIN0.getLastFullVersion());
      assertEquals(0, bIN0.getNEntries());
      assertEquals(0L, bIN0.getGeneration());
      assertFalse(bIN0.getDirty());
      assertTrue(bIN0.needsSplitting());
  }

  @Test
  public void test161()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.setKnownDeleted(1433);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1433
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test162()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.updateEntry(1900, (Node) iN0, 1903995956658723388L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7600
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test163()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      dBIN0.dumpLog(stringBuffer0, false);
      assertEquals(286, stringBuffer0.capacity());
      assertEquals("<dbin><node>0</node><key v=\"\"/><isRoot val=\"false\"/><level val=\"0\"/><entries numEntries=\"0\" length=\"0\" baseFileNumber=\"-1\"></entries><key v=\"<null>\"/></dbin>", stringWriter0.toString());
  }

  @Test
  public void test164()  throws Throwable  {
      IN iN0 = new IN();
      // Undeclared exception!
      try { 
        iN0.getKey(1604);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1604
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test165()  throws Throwable  {
      IN iN0 = new IN();
      IN.IN_deleteEntry iN_IN_deleteEntry0 = new IN.IN_deleteEntry(iN0, (-1739), false);
      iN_IN_deleteEntry0.hook648();
      assertEquals(0L, iN0.getGeneration());
      assertFalse(iN0.getDirty());
      assertTrue(iN0.needsSplitting());
      assertFalse(iN0.isRoot());
      assertEquals(0, iN0.getLevel());
      assertEquals((-1L), iN0.getLastFullVersion());
      assertEquals(0, iN0.getNEntries());
      assertFalse(iN0.isDbRoot());
  }

  @Test
  public void test168()  throws Throwable  {
      DIN dIN0 = new DIN();
      dIN0.flushProvisionalObsolete((LogManager) null);
      assertEquals((-1L), dIN0.getLastFullVersion());
      assertEquals(0L, dIN0.getGeneration());
      assertFalse(dIN0.getDirty());
      assertTrue(dIN0.needsSplitting());
      assertEquals(0, dIN0.getLevel());
      assertEquals(0, dIN0.getNEntries());
      assertFalse(dIN0.isRoot());
  }

  @Test
  public void test169()  throws Throwable  {
      BIN bIN0 = new BIN();
      IN.IN_setLsn iN_IN_setLsn0 = new IN.IN_setLsn(bIN0, 14, 127L);
      iN_IN_setLsn0.hook639();
      assertTrue(bIN0.needsSplitting());
      assertEquals(0, bIN0.getLevel());
      assertEquals((-1L), bIN0.getLastFullVersion());
      assertFalse(bIN0.isDbRoot());
      assertEquals(0, bIN0.getNEntries());
      assertFalse(bIN0.getDirty());
      assertEquals(0L, bIN0.getGeneration());
  }
}
