/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 10:23:00 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.io.StringWriter;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.dbi.DatabaseImpl;

import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class Node_ESTest3 extends Node_ESTest_scaffolding3 {

  @Test
  public void test00()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.setNodeId(380L);
      long long0 = bIN0.getNodeId();
      assertEquals(380L, long0);
  }

  @Test
  public void test01()  throws Throwable  {
      DIN dIN0 = new DIN();
      TreeLocation treeLocation0 = new TreeLocation();
      dIN0.matchLNByNodeId(treeLocation0, 217L);
      //  // Unstable assertion: assertEquals(8L, dIN0.getLastId());
  }

  @Test
  public void test02()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      NameLN nameLN0 = new NameLN(databaseId0);
      String string0 = nameLN0.dumpString(8, true);
      //  // Unstable assertion: assertEquals("        <nameLN>\n          <node>1</node>\n          <data></data>\n        </nameLN>\n        <deleted val=\"false\">\n        <id val=\"0\">\n", string0);
  }

  @Test
  public void test03()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      mapLN0.getLogType();
      //  // Unstable assertion: assertEquals(3L, mapLN0.getLastId());
  }

  @Test
  public void test04()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("matchLNByNodeId called on non DIN/DBIN");
      dupCountLN0.writeToLog(byteBuffer0);
      //  // Unstable assertion: assertEquals(5L, dupCountLN0.getNodeId());
  }

  @Test
  public void test05()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(0);
      dupCountLN0.dump(0);
      //  // Unstable assertion: assertEquals(7L, dupCountLN0.getLastId());
  }

  @Test
  public void test06()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      // Undeclared exception!
      try { 
        mapLN0.postFetchInit(databaseImpl0, (-11L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.dbi.DatabaseImpl", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.dumpString((-796), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -796
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      LN lN0 = new LN();
      // Undeclared exception!
      try { 
        lN0.dump(870);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 870
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      long long0 = Node.getNextNodeId();
      //  // Unstable assertion: assertEquals(2146381813L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      nameLN0.getType();
      //  // Unstable assertion: assertEquals(2146381811L, nameLN0.getLastId());
  }

  @Test
  public void test11()  throws Throwable  {
      BIN bIN0 = new BIN();
      long long0 = bIN0.getNodeId();
      //  // Unstable assertion: assertEquals(2146381810L, bIN0.getLastId());
      //  // Unstable assertion: assertEquals(0L, long0);
  }

  @Test
  public void test12()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      databaseEntry0.setSize(2146381809);
      LN lN0 = new LN(databaseEntry0);
      Node.setLastNodeId(2146381809);
      // Undeclared exception!
      try { 
        lN0.writeToLog((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      // Undeclared exception!
      try { 
        nameLN0.getLogSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      LN lN0 = new LN();
      String string0 = lN0.toString();
      //  // Unstable assertion: assertEquals("<ln>\n  <node>0</node>\n</ln>", string0);
      //  // Unstable assertion: assertEquals(3L, lN0.getLastId());
  }

  @Test
  public void test15()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      byte[] byteArray0 = new byte[8];
      nameLN0.verify(byteArray0);
      //  // Unstable assertion: assertEquals(2L, nameLN0.getLastId());
  }

  @Test
  public void test16()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(0);
      StringWriter stringWriter0 = new StringWriter(22);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      dupCountLN0.dumpLog(stringBuffer0, true);
      //  // Unstable assertion: assertEquals(67, stringBuffer0.length());
      //  // Unstable assertion: assertEquals((-5L), dupCountLN0.getNodeId());
  }

  @Test
  public void test17()  throws Throwable  {
      LN lN0 = new LN();
      //  // Unstable assertion: assertEquals(0L, lN0.getNodeId());
      
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("matchLNByNodeId called on non DIN/DBIN");
      lN0.readFromLog(byteBuffer0, (byte)8);
      //  // Unstable assertion: assertEquals((-7L), lN0.getLastId());
  }

  @Test
  public void test18()  throws Throwable  {
      MapLN mapLN0 = new MapLN((DatabaseImpl) null);
      // Undeclared exception!
      try { 
        mapLN0.dump(106);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.MapLN", e);
      }
  }

  @Test
  public void test19()  throws Throwable  {
      LN lN0 = new LN();
      lN0.postLogWork(1L);
      assertEquals(0L, lN0.getNodeId());
  }

  @Test
  public void test20()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      nameLN0.postFetchInit(databaseImpl0, (-193L));
      //  // Unstable assertion: assertEquals(6L, databaseImpl0.getEofNodeId());
      //  // Unstable assertion: assertEquals(6L, nameLN0.getLastId());
  }

  @Test
  public void test21()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      TreeLocation treeLocation0 = new TreeLocation();
      try { 
        nameLN0.matchLNByNodeId(treeLocation0, 0);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // matchLNByNodeId called on non DIN/DBIN
         //
         assertThrownBy("com.sleepycat.je.tree.Node", e);
      }
  }

  @Test
  public void test22()  throws Throwable  {
      DIN dIN0 = new DIN();
      boolean boolean0 = dIN0.countAsObsoleteWhenLogged();
      //  // Unstable assertion: assertEquals(3L, dIN0.getLastId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      mapLN0.shortDescription();
      //  // Unstable assertion: assertEquals(1L, mapLN0.getLastId());
  }
}
