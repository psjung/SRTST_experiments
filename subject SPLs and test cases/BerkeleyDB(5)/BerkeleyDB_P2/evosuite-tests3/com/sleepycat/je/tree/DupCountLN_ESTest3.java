/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 10:07:37 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class DupCountLN_ESTest3 extends DupCountLN_ESTest_scaffolding3 {

  @Test
  public void test00()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      int int0 = dupCountLN0.getDupCount();
      assertEquals(0, int0);
  }

  @Test
  public void test01()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(2);
      int int0 = dupCountLN0.getDupCount();
      assertEquals(2, int0);
  }

  @Test
  public void test02()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(0);
      dupCountLN0.incDupCount();
      int int0 = dupCountLN0.decDupCount();
      //  // Unstable assertion: assertEquals(251L, dupCountLN0.getLastId());
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test
  public void test03()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN((-1));
      int int0 = dupCountLN0.incDupCount();
      //  // Unstable assertion: assertEquals(229L, dupCountLN0.getLastId());
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test
  public void test04()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN((-1));
      int int0 = dupCountLN0.getLogSize();
      //  // Unstable assertion: assertEquals(216L, dupCountLN0.getNodeId());
      //  // Unstable assertion: assertEquals(17, int0);
  }

  @Test
  public void test05()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(0);
      boolean boolean0 = dupCountLN0.containsDuplicates();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      dupCountLN0.dumpLogAdditional(stringBuffer0, boolean0);
      //  // Unstable assertion: assertEquals(14, stringBuffer0.length());
      //  // Unstable assertion: assertEquals(204L, dupCountLN0.getNodeId());
  }

  @Test
  public void test06()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("");
      // Undeclared exception!
      try { 
        dupCountLN0.writeToLog(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("              <dupCountLN>\n                <count v=\"0\"/>\n                <node>0</node>\n              </dupCountLN>");
      // Undeclared exception!
      try { 
        dupCountLN0.writeToLog(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("\" obsoleteINCount=\"");
      mS949_0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        dupCountLN0.readFromLog(byteBuffer0, (byte)0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(20);
      // Undeclared exception!
      try { 
        dupCountLN0.readFromLog((ByteBuffer) null, (byte) (-87));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      // Undeclared exception!
      try { 
        dupCountLN0.dumpLogAdditional((StringBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DupCountLN", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      String string0 = dupCountLN0.dumpString(14, true);
      assertEquals("              <dupCountLN>\n                <count v=\"0\"/>\n                <node>0</node>\n              </dupCountLN>", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN((-428));
      // Undeclared exception!
      try { 
        dupCountLN0.dumpString((-428), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -428
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN((-26));
      dupCountLN0.beginTag();
      //  // Unstable assertion: assertEquals(185L, dupCountLN0.getLastId());
  }

  @Test
  public void test14()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN((-2972));
      boolean boolean0 = dupCountLN0.isDeleted();
      //  // Unstable assertion: assertEquals(181L, dupCountLN0.getLastId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      String string0 = dupCountLN0.endTag();
      assertEquals(0, dupCountLN0.getDupCount());
      assertEquals("</dupCountLN>", string0);
  }

  @Test
  public void test16()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(0);
      String string0 = dupCountLN0.dumpString(1, false);
      //  // Unstable assertion: assertEquals("   <count v=\"0\"/>\n   <node>149</node>\n   <data></data>\n", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(1000);
      int int0 = dupCountLN0.decDupCount();
      //  // Unstable assertion: assertEquals(110L, dupCountLN0.getLastId());
      //  // Unstable assertion: assertEquals(999, int0);
  }

  @Test
  public void test20()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN((-2716));
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("<dupCountLN>\n  <count v=\"-2716\"/>\n  <node>2768</node>\n  <data></data>\n</dupCountLN>");
      CharBuffer charBuffer0 = mS949_0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = mS949_0.encode(charBuffer0);
      dupCountLN0.writeToLog(byteBuffer1);
      //  // Unstable assertion: assertEquals(66, byteBuffer1.remaining());
      //  // Unstable assertion: assertEquals(82L, dupCountLN0.getNodeId());
  }

  @Test
  public void test21()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(22);
      dupCountLN0.getLogType();
      assertEquals(22, dupCountLN0.getDupCount());
  }

  @Test
  public void test22()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(20);
      dupCountLN0.getTransactionalLogType();
      //  // Unstable assertion: assertEquals(74L, dupCountLN0.getLastId());
  }

  @Test
  public void test23()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      // Undeclared exception!
      try { 
        dupCountLN0.getLogSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test24()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(2);
      dupCountLN0.setDupCount(2);
      assertEquals(2, dupCountLN0.getDupCount());
  }

  @Test
  public void test25()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(2);
      dupCountLN0.toString();
      //  // Unstable assertion: assertEquals(15L, dupCountLN0.getNodeId());
  }

  @Test
  public void test26()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(2);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("<dupCountLN>\n  <count v=\"2\"/>\n  <node>2769</node>\n  <data></data>\n</dupCountLN>");
      dupCountLN0.readFromLog(byteBuffer0, (byte)63);
      //  // Unstable assertion: assertEquals(8L, dupCountLN0.getLastId());
  }

  @Test
  public void test27()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN((-1414));
      int int0 = dupCountLN0.getDupCount();
      assertEquals((-1414), int0);
  }
}
