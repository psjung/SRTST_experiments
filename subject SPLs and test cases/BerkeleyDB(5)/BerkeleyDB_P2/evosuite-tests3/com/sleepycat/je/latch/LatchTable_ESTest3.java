/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 03:03:40 KST 2017
 */

package com.sleepycat.je.latch;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class LatchTable_ESTest3 extends LatchTable_ESTest_scaffolding3 {

  @Test
  public void test00()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("~F!sqOr4t'Pqt3B9eFS");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "~F!sqOr4t'Pqt3B9eFS");
      linkedList0.add((Object) latchTable0);
      linkedList0.add((Object) "");
      String string0 = latchTable0.toString("~F!sqOr4t'Pqt3B9eFS", (Object) "~F!sqOr4t'Pqt3B9eFS", (List) linkedList0, 1);
      assertNotNull(string0);
  }

  @Test
  public void test01()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable(")");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) ")())");
      Object object0 = new Object();
      linkedList0.add(0, object0);
      linkedList0.removeLast();
      String string0 = latchTable0.toString(")", (Object) null, (List) linkedList0, 1);
      assertEquals("<LATCH [name: )] [owner: null]>", string0);
  }

  @Test
  public void test03()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable((String) null);
      // Undeclared exception!
      try { 
        latchTable0.getNameString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.lang.StringBuffer", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("=CFv*cQbO");
      Integer integer0 = new Integer((-1));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        latchTable0.toString("", (Object) integer0, (List) linkedList0, (-2755));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2755, Size: 0
         //
         assertThrownBy("java.util.LinkedList", e);
      }
  }

  @Test
  public void test05()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("1![xZX@q_=lvHkN:");
      Object object0 = new Object();
      String string0 = latchTable0.toString("+|", object0, (List) null, (-1193));
      assertNotNull(string0);
  }

  @Test
  public void test06()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("~F!sqOr4t'Pqt3B9eFS");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = latchTable0.toString("~F!sqOr4t'Pqt3B9eFS", (Object) "~F!sqOr4t'Pqt3B9eFS", (List) linkedList0, 1);
      assertEquals("<LATCH [name: ~F!sqOr4t'Pqt3B9eFS] [owner: ~F!sqOr4t'Pqt3B9eFS]>", string0);
  }

  @Test
  public void test07()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable((String) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = latchTable0.toString((String) null, (Object) null, (List) linkedList0, 3445);
      assertEquals("<LATCH [owner: null]>", string0);
  }

  @Test
  public void test08()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("~F!sqOr4t'Pqt3B9eFS");
      String string0 = latchTable0.getNameString("6Do($");
      assertEquals("~F!sqOr4t'Pqt3B9eFS(6Do($)", string0);
  }

  @Test
  public void test09()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("=CFv*cQbO");
      String string0 = latchTable0.getNameString((String) null);
      assertEquals("=CFv*cQbO", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("~F!sqOr4t'Pqt3B9eFS");
      boolean boolean0 = latchTable0.noteLatch("");
      assertTrue(boolean0);
      
      String string0 = latchTable0.latchesHeldToString();
      assertEquals("\n", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("=CFv*cQbO");
      String string0 = latchTable0.latchesHeldToString();
      assertEquals("", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("=CFv*cQbO");
      Object object0 = new Object();
      latchTable0.noteLatch(object0);
      int int0 = latchTable0.countLatchesHeld();
      assertEquals(1, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("=CFv*cQbO");
      int int0 = latchTable0.countLatchesHeld();
      assertEquals(0, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("");
      Object object0 = new Object();
      boolean boolean0 = latchTable0.unNoteLatch(object0, "tiO-]IC#/s\"9[mo#c5");
      assertFalse(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("");
      boolean boolean0 = latchTable0.noteLatch("");
      boolean boolean1 = latchTable0.unNoteLatch("", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test16()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("=CFv*cQbO");
      Object object0 = new Object();
      latchTable0.noteLatch(object0);
      boolean boolean0 = latchTable0.noteLatch("=CFv*cQbO(=CFv*cQbO)");
      assertTrue(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      LatchTable latchTable0 = new LatchTable("=CFv*cQbO");
      latchTable0.clearNotes();
  }
}
