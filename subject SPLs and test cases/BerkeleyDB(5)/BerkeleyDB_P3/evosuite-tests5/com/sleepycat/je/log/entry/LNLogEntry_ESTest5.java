/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 11:08:43 KST 2017
 */

package com.sleepycat.je.log.entry;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.log.LogEntryType;
import com.sleepycat.je.tree.FileSummaryLN;
import com.sleepycat.je.tree.LN;
import com.sleepycat.je.tree.MapLN;
import com.sleepycat.je.tree.NameLN;
import com.sleepycat.je.txn.Txn;

import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class LNLogEntry_ESTest5 extends LNLogEntry_ESTest_scaffolding5 {

  @Test
  public void test00()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DIN;
      DatabaseId databaseId0 = new DatabaseId(1411);
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[23];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (-4532L), true, txn0);
      lNLogEntry0.marshallOutsideWriteLatch();
      //  // Unstable assertion: assertEquals(94L, lNLogEntry0.getNodeId());
  }

  @Test
  public void test01()  throws Throwable  {
      Class<String> class0 = String.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      lNLogEntry0.isTransactional();
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
  }

  @Test
  public void test02()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DIN;
      DatabaseId databaseId0 = new DatabaseId(1411);
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[4];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (-4532L), true, txn0);
      NameLN nameLN1 = (NameLN)lNLogEntry0.getMainItem();
      //  // Unstable assertion: assertEquals(85L, nameLN1.getNodeId());
  }

  @Test
  public void test03()  throws Throwable  {
      Class<LN> class0 = LN.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, true);
      lNLogEntry0.getLogType();
      assertTrue(lNLogEntry0.isTransactional());
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
  }

  @Test
  public void test04()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      LogEntryType logEntryType0 = nameLN0.getLogType();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[9];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (-1464L), false, txn0);
      lNLogEntry0.getLogType();
      assertFalse(lNLogEntry0.getAbortKnownDeleted());
      assertTrue(lNLogEntry0.isTransactional());
      assertEquals((-1464L), lNLogEntry0.getAbortLsn());
  }

  @Test
  public void test05()  throws Throwable  {
      Class<LN> class0 = LN.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      lNLogEntry0.getLN();
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
  }

  @Test
  public void test06()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      LogEntryType logEntryType0 = nameLN0.getLogType();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[9];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (-1464L), false, txn0);
      lNLogEntry0.getLN();
      assertFalse(lNLogEntry0.getAbortKnownDeleted());
      assertEquals((-1464L), lNLogEntry0.getAbortLsn());
      assertTrue(lNLogEntry0.isTransactional());
  }

  @Test
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      lNLogEntry0.getKey();
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
  }

  @Test
  public void test08()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN_TRANSACTIONAL;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, 0L, false, txn0);
      lNLogEntry0.getKey();
      assertTrue(lNLogEntry0.isTransactional());
      assertFalse(lNLogEntry0.getAbortKnownDeleted());
  }

  @Test
  public void test09()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DIN;
      DatabaseId databaseId0 = new DatabaseId(1411);
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[4];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (-4532L), true, txn0);
      lNLogEntry0.getDupKey();
      //  // Unstable assertion: assertEquals(75L, lNLogEntry0.getNodeId());
  }

  @Test
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, true);
      lNLogEntry0.getDbId();
      assertTrue(lNLogEntry0.isTransactional());
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
  }

  @Test
  public void test11()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DIN;
      DatabaseId databaseId0 = new DatabaseId(1411);
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[23];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (-4532L), true, txn0);
      lNLogEntry0.getDbId();
      //  // Unstable assertion: assertEquals(66L, lNLogEntry0.getNodeId());
  }

  @Test
  public void test12()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_TXN_ABORT;
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      NameLN nameLN0 = new NameLN(databaseId0);
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (long) 536, true, txn0);
      long long0 = lNLogEntry0.getAbortLsn();
      //  // Unstable assertion: assertEquals(56L, lNLogEntry0.getNodeId());
      //  // Unstable assertion: assertEquals(536L, long0);
  }

  @Test
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, true);
      long long0 = lNLogEntry0.getAbortLsn();
      assertEquals((-1L), long0);
      assertTrue(lNLogEntry0.isTransactional());
  }

  @Test
  public void test14()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN_TRANSACTIONAL;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, 0L, true, txn0);
      boolean boolean0 = lNLogEntry0.getAbortKnownDeleted();
      assertTrue(lNLogEntry0.isTransactional());
      assertTrue(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      LogEntryType logEntryType0 = nameLN0.getLogType();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[9];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (-1464L), false, txn0);
      lNLogEntry0.countAsObsoleteWhenLogged();
      assertTrue(lNLogEntry0.isTransactional());
      assertFalse(lNLogEntry0.getAbortKnownDeleted());
      assertEquals((-1464L), lNLogEntry0.getAbortLsn());
  }

  @Test
  public void test16()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN_TRANSACTIONAL;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, (-39L), false, txn0);
      StringWriter stringWriter0 = new StringWriter(1044);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      lNLogEntry0.dumpEntry(stringBuffer0, true);
      assertEquals("<fileSummaryLN><node>0</node></fileSummaryLN><dbId id=\"0\"/><key v=\"\"/><DbLsn val=\"0xffffffff/0xffffffd9\"/><knownDeleted val=\"false\"/><txn id=\"0__Txn\"><DbLsn val=\"0xffffffff/0xffffffff\"/></txn>", stringBuffer0.toString());
      assertFalse(lNLogEntry0.getAbortKnownDeleted());
  }

  @Test
  public void test17()  throws Throwable  {
      Class<LN> class0 = LN.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         assertThrownBy("java.nio.charset.Charset", e);
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Class<LN> class0 = LN.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, true);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("D0>=?X%[q8Cp");
      // Undeclared exception!
      try { 
        lNLogEntry0.readEntry(byteBuffer0, 4494, (byte)0, true);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      // Undeclared exception!
      try { 
        lNLogEntry0.writeToLog((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Class<String> class0 = String.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("#(a");
      // Undeclared exception!
      try { 
        lNLogEntry0.readEntry(byteBuffer0, (-3), (byte)0, false);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test21()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN_TRANSACTIONAL;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, 0L, false, txn0);
      // Undeclared exception!
      try { 
        lNLogEntry0.readEntry((ByteBuffer) null, 536, (byte) (-33), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test22()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, true);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("`+O\"YpB>xSzG6eCSU");
      // Undeclared exception!
      try { 
        lNLogEntry0.readEntry(byteBuffer0, 57, (byte) (-40), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, true);
      // Undeclared exception!
      try { 
        lNLogEntry0.postLogWork(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test24()  throws Throwable  {
      Class<LN> class0 = LN.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, true);
      // Undeclared exception!
      try { 
        lNLogEntry0.marshallOutsideWriteLatch();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Class<LN> class0 = LN.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, true);
      // Undeclared exception!
      try { 
        lNLogEntry0.getTxnId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test26()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, true);
      // Undeclared exception!
      try { 
        lNLogEntry0.getTransactionId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test27()  throws Throwable  {
      Class<LN> class0 = LN.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      // Undeclared exception!
      try { 
        lNLogEntry0.getLogSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test28()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      // Undeclared exception!
      try { 
        lNLogEntry0.getDupKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test29()  throws Throwable  {
      Class<String> class0 = String.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      StringWriter stringWriter0 = new StringWriter(10000);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        lNLogEntry0.dumpEntry(stringBuffer0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test30()  throws Throwable  {
      Class<LN> class0 = LN.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      // Undeclared exception!
      try { 
        lNLogEntry0.countAsObsoleteWhenLogged();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test31()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_TXN_PREPARE;
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[5];
      LNLogEntry lNLogEntry0 = null;
      try {
        lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) null, databaseId0, byteArray0, (long) (byte)0, false, (Txn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test32()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN_TRANSACTIONAL;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, 0L, false, txn0);
      Txn txn1 = lNLogEntry0.getUserTxn();
      assertNotNull(txn1);
      assertFalse(lNLogEntry0.getAbortKnownDeleted());
  }

  @Test
  public void test33()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      lNLogEntry0.getUserTxn();
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
  }

  @Test
  public void test34()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN_TRANSACTIONAL;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, 0L, true, txn0);
      Long long0 = lNLogEntry0.getTxnId();
      assertTrue(lNLogEntry0.getAbortKnownDeleted());
      assertNotNull(long0);
  }

  @Test
  public void test35()  throws Throwable  {
      Class<LN> class0 = LN.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      lNLogEntry0.getTxnId();
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
  }

  @Test
  public void test36()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN_TRANSACTIONAL;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, 0L, true, txn0);
      lNLogEntry0.getDupKey();
      assertTrue(lNLogEntry0.getAbortKnownDeleted());
      assertTrue(lNLogEntry0.isTransactional());
  }

  @Test
  public void test37()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DIN;
      DatabaseId databaseId0 = new DatabaseId(1411);
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[4];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (-4532L), true, txn0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("<knownDeleted val=\"");
      byteBuffer0.clear();
      // Undeclared exception!
      try { 
        lNLogEntry0.writeToLog(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test38()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN_TRANSACTIONAL;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, 0L, true, txn0);
      int int0 = lNLogEntry0.getLogSize();
      assertEquals(42, int0);
      assertTrue(lNLogEntry0.getAbortKnownDeleted());
  }

  @Test
  public void test39()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN_TRANSACTIONAL;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, 0L, false, txn0);
      lNLogEntry0.postLogWork(98304L);
      Txn txn1 = lNLogEntry0.getUserTxn();
      assertNotNull(txn1);
      assertFalse(lNLogEntry0.getAbortKnownDeleted());
  }

  @Test
  public void test40()  throws Throwable  {
      Class<LN> class0 = LN.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      lNLogEntry0.postLogWork(4294967295L);
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
  }

  @Test
  public void test41()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN_TRANSACTIONAL;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, 0L, true, txn0);
      lNLogEntry0.getTransactionId();
      assertTrue(lNLogEntry0.getAbortKnownDeleted());
      assertTrue(lNLogEntry0.isTransactional());
  }

  @Test
  public void test42()  throws Throwable  {
      Class<LN> class0 = LN.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      assertFalse(lNLogEntry0.isTransactional());
      
      long long0 = lNLogEntry0.getTransactionId();
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
      assertEquals(0L, long0);
  }

  @Test
  public void test43()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN_TRANSACTIONAL;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, 0L, true, txn0);
      StringWriter stringWriter0 = new StringWriter(1044);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      lNLogEntry0.dumpEntry(stringBuffer0, true);
      assertEquals("<fileSummaryLN><node>0</node></fileSummaryLN><dbId id=\"0\"/><key v=\"\"/><DbLsn val=\"0x0/0x0\"/><knownDeleted val=\"true\"/><txn id=\"0__Txn\"><DbLsn val=\"0xffffffff/0xffffffff\"/></txn>", stringBuffer0.toString());
      assertTrue(lNLogEntry0.isTransactional());
  }

  @Test
  public void test44()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, true);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("Couldn't delete ");
      // Undeclared exception!
      try { 
        lNLogEntry0.readEntry(byteBuffer0, 1695, (byte)30, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to com.sleepycat.je.tree.LN
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test45()  throws Throwable  {
      Class<LN> class0 = LN.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("beginTransaction called,  but Environment was not opened with transactional cpabilities");
      lNLogEntry0.readEntry(byteBuffer0, 1, (byte) (-123), false);
      long long0 = lNLogEntry0.getNodeId();
      assertEquals(7021767602215544162L, long0);
  }

  @Test
  public void test46()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_IN;
      DatabaseId databaseId0 = new DatabaseId();
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[9];
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (long) (byte)115, false, (Txn) null);
      int int0 = lNLogEntry0.getLogSize();
      //  // Unstable assertion: assertEquals(11L, lNLogEntry0.getNodeId());
      //  // Unstable assertion: assertEquals(35, int0);
  }

  @Test
  public void test47()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN_TRANSACTIONAL;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, 0L, false, txn0);
      boolean boolean0 = lNLogEntry0.getAbortKnownDeleted();
      assertFalse(boolean0);
      assertTrue(lNLogEntry0.isTransactional());
  }

  @Test
  public void test48()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      LogEntryType logEntryType0 = nameLN0.getLogType();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[9];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (-1464L), false, txn0);
      lNLogEntry0.getKey();
      assertTrue(lNLogEntry0.isTransactional());
      assertFalse(lNLogEntry0.getAbortKnownDeleted());
      assertEquals((-1464L), lNLogEntry0.getAbortLsn());
  }

  @Test
  public void test49()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN_TRANSACTIONAL;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, 0L, false, txn0);
      lNLogEntry0.countAsObsoleteWhenLogged();
      assertFalse(lNLogEntry0.getAbortKnownDeleted());
      assertTrue(lNLogEntry0.isTransactional());
  }

  @Test
  public void test50()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN_TRANSACTIONAL;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, 0L, false, txn0);
      lNLogEntry0.marshallOutsideWriteLatch();
      assertFalse(lNLogEntry0.getAbortKnownDeleted());
      assertTrue(lNLogEntry0.isTransactional());
  }

  @Test
  public void test51()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN_TRANSACTIONAL;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, 0L, false, txn0);
      lNLogEntry0.getAbortLsn();
      assertTrue(lNLogEntry0.isTransactional());
      assertFalse(lNLogEntry0.getAbortKnownDeleted());
  }

  @Test
  public void test52()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN_TRANSACTIONAL;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, 0L, false, txn0);
      LNLogEntry lNLogEntry1 = (LNLogEntry)lNLogEntry0.clone();
      assertFalse(lNLogEntry1.getAbortKnownDeleted());
      assertTrue(lNLogEntry1.isTransactional());
  }

  @Test
  public void test53()  throws Throwable  {
      Class<LN> class0 = LN.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      lNLogEntry0.getMainItem();
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
      assertFalse(lNLogEntry0.isTransactional());
  }

  @Test
  public void test54()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN_TRANSACTIONAL;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, 0L, false, txn0);
      lNLogEntry0.getLN();
      assertFalse(lNLogEntry0.getAbortKnownDeleted());
      assertTrue(lNLogEntry0.isTransactional());
  }

  @Test
  public void test55()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN_TRANSACTIONAL;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, 0L, false, txn0);
      lNLogEntry0.getDbId();
      assertFalse(lNLogEntry0.getAbortKnownDeleted());
      assertTrue(lNLogEntry0.isTransactional());
  }

  @Test
  public void test56()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      LogEntryType logEntryType0 = mapLN0.getLogType();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[3];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) mapLN0, databaseId0, byteArray0, 405L, true, txn0);
      lNLogEntry0.getLogType();
      //  // Unstable assertion: assertEquals(1L, mapLN0.getLastId());
  }

  @Test
  public void test57()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN_TRANSACTIONAL;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, 0L, false, txn0);
      lNLogEntry0.getNodeId();
      assertFalse(lNLogEntry0.getAbortKnownDeleted());
      assertTrue(lNLogEntry0.isTransactional());
  }

  @Test
  public void test58()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      LogEntryType logEntryType0 = nameLN0.getLogType();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[9];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (-1464L), false, txn0);
      boolean boolean0 = lNLogEntry0.isTransactional();
      assertFalse(lNLogEntry0.getAbortKnownDeleted());
      assertTrue(boolean0);
      assertEquals((-1464L), lNLogEntry0.getAbortLsn());
  }
}
