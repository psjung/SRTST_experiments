/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 12:05:39 KST 2017
 */

package com.sleepycat.je.txn;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.tree.LN;
import com.sleepycat.je.tree.NameLN;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class LockResult_ESTest5 extends LockResult_ESTest_scaffolding5 {

  @Test
  public void test0()  throws Throwable  {
      LockGrantType lockGrantType0 = LockGrantType.EXISTING;
      Lock lock0 = new Lock((Long) null);
      WriteLockInfo writeLockInfo0 = new WriteLockInfo(lock0);
      LockResult lockResult0 = new LockResult(lockGrantType0, writeLockInfo0);
      LockGrantType lockGrantType1 = lockResult0.getLockGrant();
      assertEquals("EXISTING", lockGrantType1.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      LockGrantType lockGrantType0 = LockGrantType.WAIT_NEW;
      LockResult lockResult0 = new LockResult(lockGrantType0, (WriteLockInfo) null);
      NameLN nameLN0 = new NameLN();
      lockResult0.setLN(nameLN0);
      NameLN nameLN1 = (NameLN)lockResult0.getLN();
      assertEquals(0L, nameLN1.getTransactionId());
  }

  @Test
  public void test2()  throws Throwable  {
      LockGrantType lockGrantType0 = LockGrantType.EXISTING;
      Lock lock0 = new Lock((Long) null);
      WriteLockInfo writeLockInfo0 = new WriteLockInfo(lock0);
      LockResult lockResult0 = new LockResult(lockGrantType0, writeLockInfo0);
      lockResult0.setAbortLsn(0L, false);
      assertEquals(0L, writeLockInfo0.getAbortLsn());
  }

  @Test
  public void test3()  throws Throwable  {
      LockGrantType lockGrantType0 = LockGrantType.WAIT_NEW;
      WriteLockInfo writeLockInfo0 = new WriteLockInfo();
      LockResult lockResult0 = new LockResult(lockGrantType0, writeLockInfo0);
      lockResult0.setAbortLsn((-1L), false, false);
      assertTrue(writeLockInfo0.getAbortKnownDeleted());
  }

  @Test
  public void test4()  throws Throwable  {
      LockResult lockResult0 = new LockResult((LockGrantType) null, (WriteLockInfo) null);
      lockResult0.setAbortLsn(2510L, false, true);
  }

  @Test
  public void test5()  throws Throwable  {
      LockGrantType lockGrantType0 = LockGrantType.WAIT_PROMOTION;
      WriteLockInfo writeLockInfo0 = new WriteLockInfo();
      LockResult lockResult0 = new LockResult(lockGrantType0, writeLockInfo0);
      lockResult0.setAbortLsn((-1525L), true, false);
      lockResult0.setAbortLsn((-1198L), true);
      assertEquals((-1525L), writeLockInfo0.getAbortLsn());
      assertTrue(writeLockInfo0.getAbortKnownDeleted());
  }

  @Test
  public void test6()  throws Throwable  {
      LockResult lockResult0 = new LockResult((LockGrantType) null, (WriteLockInfo) null);
      LockGrantType lockGrantType0 = lockResult0.getLockGrant();
      assertNull(lockGrantType0);
  }

  @Test
  public void test7()  throws Throwable  {
      LockGrantType lockGrantType0 = LockGrantType.WAIT_PROMOTION;
      WriteLockInfo writeLockInfo0 = new WriteLockInfo();
      LockResult lockResult0 = new LockResult(lockGrantType0, writeLockInfo0);
      LN lN0 = new LN();
      lockResult0.setLN(lN0);
      LN lN1 = lockResult0.getLN();
      assertFalse(lN1.logEntryIsTransactional());
  }

  @Test
  public void test8()  throws Throwable  {
      LockGrantType lockGrantType0 = LockGrantType.WAIT_PROMOTION;
      WriteLockInfo writeLockInfo0 = new WriteLockInfo();
      LockResult lockResult0 = new LockResult(lockGrantType0, writeLockInfo0);
      LN lN0 = lockResult0.getLN();
      assertNull(lN0);
  }
}
