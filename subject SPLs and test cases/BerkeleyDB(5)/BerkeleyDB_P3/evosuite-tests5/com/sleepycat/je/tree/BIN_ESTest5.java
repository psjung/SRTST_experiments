/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 11:21:56 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.File;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.EnvironmentConfig;
import com.sleepycat.je.dbi.CursorImpl;
import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.dbi.DbConfigManager;
import com.sleepycat.je.dbi.EnvironmentImpl;
import com.sleepycat.je.dbi.MemoryBudget;
import com.sleepycat.je.latch.LatchException;
import com.sleepycat.je.latch.LatchNotHeldException;
import com.sleepycat.je.log.LogManager;

import de.ovgu.cide.jakutil.ReturnBoolean;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class BIN_ESTest5 extends BIN_ESTest_scaffolding5 {

  @Test
  public void test00()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      DIN dIN0 = new DIN();
      dBIN0.getChildKey(dIN0);
      assertEquals((-1L), dBIN0.getLastDeltaVersion());
  }

  @Test
  public void test02()  throws Throwable  {
      BIN bIN0 = new BIN();
      boolean boolean0 = bIN0.canBeAncestor(true);
      assertEquals((-1L), bIN0.getLastDeltaVersion());
      assertEquals("BIN", bIN0.shortClassName());
      assertTrue(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      dBIN0.setDatabase(databaseImpl0);
      dBIN0.getKeyComparator();
      //  // Unstable assertion: assertEquals(99L, dBIN0.getLastId());
  }

  @Test
  public void test06()  throws Throwable  {
      BIN bIN0 = new BIN();
      DIN dIN0 = new DIN();
      bIN0.getChildKey(dIN0);
      assertEquals((-1L), bIN0.getLastDeltaVersion());
      assertEquals("BIN", bIN0.shortClassName());
  }

  @Test
  public void test08()  throws Throwable  {
      BIN bIN0 = new BIN();
      boolean boolean0 = bIN0.isEvictionProhibited();
      assertEquals("BIN", bIN0.shortClassName());
      assertFalse(boolean0);
      assertEquals((-1L), bIN0.getLastDeltaVersion());
  }

  @Test
  public void test10()  throws Throwable  {
      BIN bIN0 = new BIN();
      boolean boolean0 = bIN0.hasNonLNChildren();
      assertEquals("BIN", bIN0.shortClassName());
      assertFalse(boolean0);
      assertEquals((-1L), bIN0.getLastDeltaVersion());
  }

  @Test
  public void test11()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.canBeAncestor(true);
      assertEquals((-1L), dBIN0.getLastDeltaVersion());
  }

  @Test
  public void test12()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.log((LogManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        dBIN0.splitSpecial((IN) null, (-2856), (-2856), byteArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.DBIN", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.isSoughtNode(67108864L, true);
      try { 
        dBIN0.hook608(true);
        fail("Expecting exception: LatchException");
      
      } catch(LatchException e) {
         //
         // DBIN0 already held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test15()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      try { 
        dBIN0.hook605();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // DBIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.hook603((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test17()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      DIN dIN0 = new DIN();
      try { 
        dBIN0.hook603(dIN0);
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // DIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test19()  throws Throwable  {
      BIN bIN0 = new BIN();
      SearchResult searchResult0 = new SearchResult();
      // Undeclared exception!
      try { 
        bIN0.descendOnParentSearch(searchResult0, false, true, (-1), (Node) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test20()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.compress((BINReference) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BIN bIN0 = null;
      try {
        bIN0 = new BIN((DatabaseImpl) null, byteArray0, (-2563), (-2563));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test22()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.hook608(false);
      assertEquals((-1L), dBIN0.getLastDeltaVersion());
  }

  @Test
  public void test23()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.getKeyComparator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test24()  throws Throwable  {
      BIN bIN0 = new BIN();
      String string0 = bIN0.shortClassName();
      assertEquals("BIN", string0);
      assertEquals((-1L), bIN0.getLastDeltaVersion());
  }

  @Test
  public void test26()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.nCursors();
      assertEquals("BIN", bIN0.shortClassName());
      assertEquals((-1L), bIN0.getLastDeltaVersion());
  }

  @Test
  public void test28()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.hook608(true);
      // Undeclared exception!
      try { 
        dBIN0.hook607(464, (-2251), true);
        fail("Expecting exception: ReturnBoolean");
      
      } catch(ReturnBoolean e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test29()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.hook607(0, 546, false);
        fail("Expecting exception: ReturnBoolean");
      
      } catch(ReturnBoolean e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test31()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.hook608(true);
      dBIN0.adjustCursorsForMutation((-2251), dBIN0, (-2251), (CursorImpl) null);
      //  // Unstable assertion: assertEquals(129L, dBIN0.getGeneration());
  }

  @Test
  public void test33()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.latchNoWait();
      dBIN0.adjustCursorsForInsert(1746);
      //  // Unstable assertion: assertEquals(103L, dBIN0.getGeneration());
  }

  @Test
  public void test36()  throws Throwable  {
      BIN bIN0 = new BIN();
      SearchResult searchResult0 = new SearchResult();
      try { 
        bIN0.descendOnParentSearch(searchResult0, false, false, (byte)1, bIN0, false);
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // BIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test37()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.setProhibitNextDelta();
      assertEquals((-1L), dBIN0.getLastDeltaVersion());
  }

  @Test
  public void test38()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.getLogType();
      assertEquals((-1L), bIN0.getLastDeltaVersion());
      assertEquals("BIN", bIN0.shortClassName());
  }

  @Test
  public void test39()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.isSoughtNode(67108864L, false);
      dBIN0.addCursor((CursorImpl) null);
      assertEquals((-1L), dBIN0.getLastDeltaVersion());
  }

  @Test
  public void test41()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.latchNoWait();
      dBIN0.hook604();
      //  // Unstable assertion: assertEquals(97L, dBIN0.getGeneration());
  }

  @Test
  public void test42()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.getBINDeltaType();
      assertEquals("BIN", bIN0.shortClassName());
      assertEquals((-1L), bIN0.getLastDeltaVersion());
  }

  @Test
  public void test43()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.isSoughtNode(67108864L, false);
      dBIN0.hook605();
      assertEquals((-1L), dBIN0.getLastDeltaVersion());
  }

  @Test
  public void test44()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.getCursorBINToBeRemoved((CursorImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test45()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.createReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test46()  throws Throwable  {
      BIN bIN0 = new BIN();
      boolean boolean0 = bIN0.isCompressible();
      assertEquals("BIN", bIN0.shortClassName());
      assertTrue(boolean0);
      assertEquals((-1L), bIN0.getLastDeltaVersion());
  }

  @Test
  public void test47()  throws Throwable  {
      BIN bIN0 = new BIN();
      String string0 = bIN0.beginTag();
      assertEquals("<bin>", string0);
      assertEquals("BIN", bIN0.shortClassName());
      assertEquals((-1L), bIN0.getLastDeltaVersion());
  }

  @Test
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      BIN bIN0 = null;
      try {
        bIN0 = new BIN(databaseImpl0, byteArray0, (-2528), 546);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test49()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.isSoughtNode(53L, false);
      dBIN0.removeCursor((CursorImpl) null);
      assertEquals((-1L), dBIN0.getLastDeltaVersion());
  }

  @Test
  public void test50()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.accumulateStats((TreeWalkerStatsAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test51()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.setKnownDeletedLeaveTarget(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test52()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.getChildKey((IN) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test54()  throws Throwable  {
      BIN bIN0 = new BIN();
      String string0 = bIN0.endTag();
      assertEquals((-1L), bIN0.getLastDeltaVersion());
      assertEquals("BIN", bIN0.shortClassName());
      assertEquals("</bin>", string0);
  }

  @Test
  public void test55()  throws Throwable  {
      BIN bIN0 = new BIN();
      long long0 = bIN0.getLastDeltaVersion();
      assertEquals((-1L), long0);
      assertEquals("BIN", bIN0.shortClassName());
  }

  @Test
  public void test56()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      try { 
        dBIN0.hook604();
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // DBIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test57()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.clearKnownDeleted((-27));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -27
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test58()  throws Throwable  {
      BIN bIN0 = new BIN();
      SearchResult searchResult0 = new SearchResult();
      byte[] byteArray0 = new byte[6];
      LN lN0 = new LN(byteArray0);
      bIN0.descendOnParentSearch(searchResult0, true, true, 546, lN0, false);
      try { 
        bIN0.descendOnParentSearch(searchResult0, true, false, 4027L, searchResult0.parent, true);
        fail("Expecting exception: LatchNotHeldException");
      
      } catch(LatchNotHeldException e) {
         //
         // BIN0 not held
         //
         assertThrownBy("com.sleepycat.je.latch.Java5LatchImpl", e);
      }
  }

  @Test
  public void test59()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.setCursorIndex((CursorImpl) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test60()  throws Throwable  {
      BIN bIN0 = new BIN();
      boolean boolean0 = bIN0.entryZeroKeyComparesLow();
      assertEquals((-1L), bIN0.getLastDeltaVersion());
      assertFalse(boolean0);
      assertEquals("BIN", bIN0.shortClassName());
  }

  @Test
  public void test61()  throws Throwable  {
      BIN bIN0 = new BIN();
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        bIN0.createNewInstance(byteArray0, (byte)113, (byte) (-23));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test62()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.getCursorBIN((CursorImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test66()  throws Throwable  {
      BIN bIN0 = new BIN();
      boolean boolean0 = bIN0.isValidForDelete();
      //  // Unstable assertion: assertEquals(0L, bIN0.getGeneration());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test
  public void test67()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      // Undeclared exception!
      try { 
        dBIN0.setKnownDeleted((-2251));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2251
         //
         assertThrownBy("com.sleepycat.je.tree.IN", e);
      }
  }

  @Test
  public void test68()  throws Throwable  {
      BIN bIN0 = new BIN();
      bIN0.getCursorSet();
      assertEquals((-1L), bIN0.getLastDeltaVersion());
      assertEquals("BIN", bIN0.shortClassName());
  }

  @Test
  public void test69()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.getCursorIndex((CursorImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test70()  throws Throwable  {
      BIN bIN0 = new BIN();
      boolean boolean0 = bIN0.validateSubtreeBeforeDelete(685);
      assertEquals((-1L), bIN0.getLastDeltaVersion());
      assertEquals("BIN", bIN0.shortClassName());
      assertTrue(boolean0);
  }

  @Test
  public void test71()  throws Throwable  {
      BIN bIN0 = new BIN();
      // Undeclared exception!
      try { 
        bIN0.setCursorBIN((CursorImpl) null, bIN0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test72()  throws Throwable  {
      BIN bIN0 = new BIN();
      LN lN0 = new LN();
      // Undeclared exception!
      try { 
        bIN0.hook603(lN0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.sleepycat.je.tree.LN cannot be cast to com.sleepycat.je.tree.IN
         //
         assertThrownBy("com.sleepycat.je.tree.BIN", e);
      }
  }

  @Test
  public void test73()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      dBIN0.isSoughtNode(67108864L, false);
      dBIN0.hook606();
      assertEquals((-1L), dBIN0.getLastDeltaVersion());
  }
}
