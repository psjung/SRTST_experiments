/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 11:12:16 KST 2017
 */

package com.sleepycat.je.recovery;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.nio.ByteBuffer;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.log.LogEntryType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class CheckpointEnd_ESTest5 extends CheckpointEnd_ESTest_scaffolding5 {

  @Test
  public void test00()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("hhL]H", 156L, 156L, 156L, 156L, (-1), (-1L), 3373L);
      long long0 = checkpointEnd0.getRootLsn();
      assertEquals(156L, long0);
  }

  @Test
  public void test01()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd();
      long long0 = checkpointEnd0.getRootLsn();
      assertEquals((-1L), long0);
  }

  @Test
  public void test02()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd();
      long long0 = checkpointEnd0.getLastTxnId();
      assertEquals(0L, long0);
  }

  @Test
  public void test03()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("", (-1693L), 667L, 667L, (-1693L), 0, 667L, (-2650L));
      long long0 = checkpointEnd0.getLastTxnId();
      assertEquals(667L, long0);
  }

  @Test
  public void test04()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("*C<c X[O0w6k", (-370L), (-370L), 0L, 0L, 0, 2263L, 0L);
      long long0 = checkpointEnd0.getLastNodeId();
      assertEquals(0L, long0);
  }

  @Test
  public void test05()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("hhL]H", 156L, 156L, 156L, 156L, (-1), (-1L), 3373L);
      long long0 = checkpointEnd0.getLastNodeId();
      assertEquals(156L, long0);
  }

  @Test
  public void test06()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd();
      int int0 = checkpointEnd0.getLastDbId();
      assertEquals(0, int0);
  }

  @Test
  public void test07()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("hhL]H", 156L, 156L, 156L, 156L, (-1), (-1L), 3373L);
      int int0 = checkpointEnd0.getLastDbId();
      assertEquals((-1), int0);
  }

  @Test
  public void test08()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd();
      long long0 = checkpointEnd0.getId();
      assertEquals(0L, long0);
  }

  @Test
  public void test09()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("hhL]H", 156L, 156L, 156L, 156L, (-1), (-1L), 3373L);
      long long0 = checkpointEnd0.getId();
      assertEquals(3373L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("hhL]H", 156L, 156L, 156L, 156L, (-1), (-1L), 3373L);
      long long0 = checkpointEnd0.getFirstActiveLsn();
      assertEquals(156L, long0);
  }

  @Test
  public void test11()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd();
      long long0 = checkpointEnd0.getFirstActiveLsn();
      assertEquals((-1L), long0);
  }

  @Test
  public void test12()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("</bin>", 280L, 280L, 280L, (-21L), 2146256514, (long) 2146256514, 2036L);
      long long0 = checkpointEnd0.getCheckpointStartLsn();
      assertEquals(280L, long0);
  }

  @Test
  public void test13()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd();
      long long0 = checkpointEnd0.getCheckpointStartLsn();
      assertEquals((-1L), long0);
  }

  @Test
  public void test14()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("hhL]H", 156L, 156L, 156L, 156L, (-1), (-1L), 3373L);
      // Undeclared exception!
      try { 
        checkpointEnd0.writeToLog((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test15()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("", (-12L), (-1L), (-1L), 459L, 13, (-12L), (long) 13);
      // Undeclared exception!
      try { 
        checkpointEnd0.readFromLog((ByteBuffer) null, (byte)96);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test16()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd();
      // Undeclared exception!
      try { 
        checkpointEnd0.getLogSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test17()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("N7{d5-zSS>2~wNa?%h", 1L, 790L, 790L, 1L, 1235, (-24L), (long) 1235);
      // Undeclared exception!
      try { 
        checkpointEnd0.dumpLog((StringBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.recovery.CheckpointEnd", e);
      }
  }

  @Test
  public void test18()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("", (-4701L), (-3528L), (-1646L), (-23L), (-2145380332), 255L, (-3528L));
      String string0 = checkpointEnd0.toString();
      //  // Unstable assertion: assertEquals("time=2017-04-22 11:11:58.034 lastNodeId=-23 lastDbId=-2145380332 lastTxnId=255 id=-3528 rootExists=true ckptStartLsn=0xffffffff/0xffffeda3 root=0xffffffff/0xfffff238 firstActive=0xffffffff/0xfffff992", string0);
  }

  @Test
  public void test19()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd();
      String string0 = checkpointEnd0.toString();
      assertEquals("time=null lastNodeId=0 lastDbId=0 lastTxnId=0 id=0 rootExists=false ckptStartLsn=0xffffffff/0xffffffff firstActive=0xffffffff/0xffffffff", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("", (-4701L), (-3528L), (-1646L), (-23L), (-2145380332), 255L, (-3528L));
      int int0 = checkpointEnd0.getLogSize();
      assertEquals(65, int0);
  }

  @Test
  public void test21()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("", (-12L), (-1L), (-1L), 459L, 13, (-12L), (long) 13);
      int int0 = checkpointEnd0.getLogSize();
      assertEquals(57, int0);
  }

  @Test
  public void test22()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd((String) null, 676L, 676L, (-1L), 676L, (-20), 0L, 676L);
      assertTrue(checkpointEnd0.marshallOutsideWriteLatch());
  }

  @Test
  public void test23()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("T}A^4Tv", 2525L, (-100L), (-100L), 169L, 8, (-66L), (-100L));
      int int0 = checkpointEnd0.getLastDbId();
      assertEquals(8, int0);
  }

  @Test
  public void test24()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("N7{d5-zSS>2~wNa?%h", 1L, 790L, 790L, 1L, 1235, (-24L), (long) 1235);
      boolean boolean0 = checkpointEnd0.logEntryIsTransactional();
      assertFalse(boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd(" root=", 0L, 0L, 0L, (-1L), (-2404), (long) (-2404), 0L);
      long long0 = checkpointEnd0.getLastTxnId();
      assertEquals((-2404L), long0);
  }

  @Test
  public void test26()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd(" root=", 0L, 0L, 0L, (-1L), (-2404), (long) (-2404), 0L);
      long long0 = checkpointEnd0.getCheckpointStartLsn();
      assertEquals(0L, long0);
  }

  @Test
  public void test27()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("", (-12L), (-1L), (-1L), 459L, 13, (-12L), (long) 13);
      long long0 = checkpointEnd0.getTransactionId();
      assertEquals(0L, long0);
  }

  @Test
  public void test28()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("}/f", 0L, 0L, 0L, 0L, (-3102), 1290L, 0L);
      long long0 = checkpointEnd0.getRootLsn();
      assertEquals(0L, long0);
  }

  @Test
  public void test29()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("", (-4701L), (-3528L), (-1646L), (-23L), (-2145380332), 255L, (-3528L));
      long long0 = checkpointEnd0.getId();
      assertEquals((-3528L), long0);
  }

  @Test
  public void test30()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("N7{d5-zSS>2~wNa?%h", 1L, 790L, 790L, 1L, 1235, (-24L), (long) 1235);
      LogEntryType logEntryType0 = checkpointEnd0.getLogType();
      assertFalse(logEntryType0.isNodeType());
  }

  @Test
  public void test31()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("}/f", 0L, 0L, 0L, 0L, (-3102), 1290L, 0L);
      long long0 = checkpointEnd0.getFirstActiveLsn();
      assertEquals(0L, long0);
  }

  @Test
  public void test32()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("", (-4701L), (-3528L), (-1646L), (-23L), (-2145380332), 255L, (-3528L));
      boolean boolean0 = checkpointEnd0.marshallOutsideWriteLatch();
      assertTrue(boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("</bin>", 280L, 280L, 280L, (-21L), 2146256514, (long) 2146256514, 2036L);
      boolean boolean0 = checkpointEnd0.countAsObsoleteWhenLogged();
      assertFalse(boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd();
      checkpointEnd0.postLogWork(4294967295L);
      assertFalse(checkpointEnd0.countAsObsoleteWhenLogged());
  }

  @Test
  public void test35()  throws Throwable  {
      CheckpointEnd checkpointEnd0 = new CheckpointEnd("*C<c X[O0w6k", (-370L), (-370L), (-370L), (-370L), 0, 2263L, 2263L);
      long long0 = checkpointEnd0.getLastNodeId();
      assertEquals((-370L), long0);
  }
}
