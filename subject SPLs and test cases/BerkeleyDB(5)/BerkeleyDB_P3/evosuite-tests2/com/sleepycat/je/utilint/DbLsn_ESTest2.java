/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 13:55:55 KST 2017
 */

package com.sleepycat.je.utilint;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.log.FileManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class DbLsn_ESTest2 extends DbLsn_ESTest_scaffolding2 {

  @Test
  public void test00()  throws Throwable  {
      long long0 = DbLsn.makeLsn(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test
  public void test01()  throws Throwable  {
      long long0 = DbLsn.makeLsn(67108864L, 0L);
      assertEquals(288230376151711744L, long0);
  }

  @Test
  public void test02()  throws Throwable  {
      Long long0 = new Long(809L);
      long long1 = DbLsn.longToLsn(long0);
      assertEquals(809L, long1);
  }

  @Test
  public void test03()  throws Throwable  {
      long long0 = DbLsn.getFileOffset(1293L);
      assertEquals(1293L, long0);
  }

  @Test
  public void test04()  throws Throwable  {
      long long0 = DbLsn.getFileNumber((-673L));
      assertEquals(4294967295L, long0);
  }

  @Test
  public void test05()  throws Throwable  {
      long long0 = DbLsn.getWithCleaningDistance(1632L, (FileManager) null, 1293L, (-3967L));
      assertEquals(339L, long0);
  }

  @Test
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbLsn.getWithCleaningDistance(686L, (FileManager) null, (-393L), 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.utilint.DbLsn", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance(1526L, (-9223372036854775808L), 0L);
      assertEquals((-1526L), long0);
  }

  @Test
  public void test08()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance(4314967296L, 2353L, 4314967296L);
      assertEquals(4334964943L, long0);
  }

  @Test
  public void test09()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance((-4508L), (-4508L), (-2360L));
      assertEquals(0L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance(5550L, 928L, 928L);
      assertEquals(4622L, long0);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = DbLsn.compareTo((-26L), (-773L));
      assertEquals(1, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = DbLsn.compareTo(0L, 594L);
      assertEquals((-1), int0);
  }

  @Test
  public void test13()  throws Throwable  {
      long long0 = DbLsn.makeLsn((-2300L), (-1L));
      assertEquals((-9874129813505L), long0);
  }

  @Test
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbLsn.dumpString((-9874129813505L), (-9));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -9
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = DbLsn.getFileOffset(0L);
      assertEquals(0L, long0);
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = DbLsn.getFileNumber(1633L);
      assertEquals(0L, long0);
  }

  @Test
  public void test17()  throws Throwable  {
      long long0 = DbLsn.getWithCleaningDistance(0L, (FileManager) null, (-1L), 67108864L);
      assertEquals(0L, long0);
  }

  @Test
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbLsn.getWithCleaningDistance((-1744L), (FileManager) null, 4294967295L, (-1744L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.utilint.DbLsn", e);
      }
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance((-1102L), (-8104603289302L), 10000000L);
      assertEquals(18870000648L, long0);
  }

  @Test
  public void test21()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance(0L, (-1L), 0L);
      assertEquals(0L, long0);
  }

  @Test
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbLsn.compareTo((-2233L), (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.utilint.DbLsn", e);
      }
  }

  @Test
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbLsn.compareTo((-1), (-2583L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.utilint.DbLsn", e);
      }
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = DbLsn.compareTo(0L, 0L);
      assertEquals(0, int0);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = DbLsn.compareTo(2985L, (-77L));
      assertEquals((-1), int0);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = DbLsn.compareTo((-1588L), 5550L);
      assertEquals(1, int0);
  }

  @Test
  public void test28()  throws Throwable  {
      long long0 = DbLsn.longToLsn((Long) null);
      assertEquals((-1L), long0);
  }

  @Test
  public void test29()  throws Throwable  {
      Long long0 = new Long(0L);
      long long1 = DbLsn.longToLsn(long0);
      assertEquals(0L, long1);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = DbLsn.dumpString((-1559L), 0);
      assertEquals("<DbLsn val=\"0xffffffff/0xfffff9e9\"/>", string0);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = DbLsn.toString(3935L);
      assertEquals("<DbLsn val=\"0x0/0xf5f\"/>", string0);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = DbLsn.getNoFormatString(597L);
      assertEquals("0x0/0x255", string0);
  }

  @Test
  public void test33()  throws Throwable  {
      long long0 = DbLsn.getNoCleaningDistance((-657129996442L), (-2313L), (-154L));
      assertEquals((-25721L), long0);
  }
}
