/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 08:59:02 KST 2017
 */

package com.sleepycat.bind.tuple;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseEntry;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class TupleBase_ESTest3 extends TupleBase_ESTest_scaffolding3 {

  @Test
  public void test00()  throws Throwable  {
      TupleBase tupleBase0 = new TupleBase();
      tupleBase0.setTupleBufferSize(2083);
      int int0 = tupleBase0.getTupleBufferSize();
      assertEquals(2083, int0);
  }

  @Test
  public void test01()  throws Throwable  {
      TupleBase tupleBase0 = new TupleBase();
      tupleBase0.setTupleBufferSize(32768);
      tupleBase0.getTupleOutput(tupleBase0);
      assertEquals(32768, tupleBase0.getTupleBufferSize());
  }

  @Test
  public void test02()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      TupleOutput tupleOutput0 = TupleBase.newOutput();
      TupleBase.outputToEntry(tupleOutput0, databaseEntry0);
      assertEquals(0, databaseEntry0.getPartialLength());
  }

  @Test
  public void test03()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      TupleInput tupleInput0 = TupleBase.entryToInput(databaseEntry0);
      TupleBase.inputToEntry(tupleInput0, databaseEntry0);
      assertEquals(0, databaseEntry0.getPartialOffset());
  }

  @Test
  public void test04()  throws Throwable  {
      TupleBase tupleBase0 = new TupleBase();
      tupleBase0.setTupleBufferSize((-3023));
      // Undeclared exception!
      try { 
        tupleBase0.getTupleOutput((Object) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.bind.tuple.TupleBase", e);
      }
  }

  @Test
  public void test05()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      TupleBase tupleBase0 = new TupleBase();
      tupleBase0.getTupleOutput(databaseEntry0);
      assertEquals(0, tupleBase0.getTupleBufferSize());
  }

  @Test
  public void test06()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      // Undeclared exception!
      try { 
        TupleBase.inputToEntry((TupleInput) null, databaseEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.bind.tuple.TupleBase", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      TupleBase tupleBase0 = new TupleBase();
      int int0 = tupleBase0.getTupleBufferSize();
      assertEquals(0, int0);
  }

  @Test
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      TupleOutput tupleOutput0 = TupleBase.newOutput(byteArray0);
      // Undeclared exception!
      try { 
        TupleBase.outputToEntry(tupleOutput0, (DatabaseEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.bind.tuple.TupleBase", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        TupleBase.entryToInput((DatabaseEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.bind.tuple.TupleBase", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TupleBase tupleBase0 = new TupleBase();
      tupleBase0.setTupleBufferSize((-1));
      int int0 = tupleBase0.getTupleBufferSize();
      assertEquals((-1), int0);
  }
}
