/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 16:11:22 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.log.LogEntryType;

import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class NameLN_ESTest4 extends NameLN_ESTest_scaffolding4 {

  @Test
  public void test00()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      nameLN0.makeDeleted();
      boolean boolean0 = nameLN0.isDeleted();
      assertTrue(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      NameLN nameLN0 = new NameLN((DatabaseId) null);
      nameLN0.getId();
      //  // Unstable assertion: assertEquals(41L, nameLN0.getNodeId());
  }

  @Test
  public void test02()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(2615);
      NameLN nameLN0 = new NameLN(databaseId0);
      nameLN0.getId();
      assertFalse(nameLN0.isDeleted());
  }

  @Test
  public void test03()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      nameLN0.makeDeleted();
      int int0 = nameLN0.getLogSize();
      assertTrue(nameLN0.isDeleted());
      assertEquals(14, int0);
  }

  @Test
  public void test04()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      String string0 = nameLN0.dumpString(14, false);
      assertEquals("                <node>0</node>\n\n              <deleted val=\"false\">\n              <id val=\"0\">\n", string0);
  }

  @Test
  public void test05()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      NameLN nameLN0 = new NameLN(databaseId0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("Can't close Database:");
      CharBuffer charBuffer0 = mS949_0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = mS949_0.encode(charBuffer0);
      nameLN0.readFromLog(byteBuffer1, (byte)0);
      //  // Unstable assertion: assertEquals(31L, nameLN0.getLastId());
  }

  @Test
  public void test06()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("<nameLN>");
      // Undeclared exception!
      try { 
        nameLN0.writeToLog(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      // Undeclared exception!
      try { 
        nameLN0.writeToLog((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      // Undeclared exception!
      try { 
        nameLN0.readFromLog((ByteBuffer) null, (byte)114);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      // Undeclared exception!
      try { 
        nameLN0.dumpLogAdditional((StringBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.dbi.DatabaseId", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(2615);
      NameLN nameLN0 = new NameLN(databaseId0);
      nameLN0.beginTag();
      //  // Unstable assertion: assertEquals(28L, nameLN0.getNodeId());
  }

  @Test
  public void test11()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      String string0 = nameLN0.endTag();
      assertEquals("</nameLN>", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-353));
      NameLN nameLN0 = new NameLN(databaseId0);
      boolean boolean0 = nameLN0.isDeleted();
      //  // Unstable assertion: assertEquals(25L, nameLN0.getLastId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      LogEntryType logEntryType0 = nameLN0.getTransactionalLogType();
      assertTrue(logEntryType0.isNodeType());
  }

  @Test
  public void test14()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      DatabaseId databaseId0 = nameLN0.getId();
      nameLN0.setId(databaseId0);
      assertFalse(nameLN0.logEntryIsTransactional());
  }

  @Test
  public void test15()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      StringWriter stringWriter0 = new StringWriter(622);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      nameLN0.dumpLogAdditional(stringBuffer0, false);
      assertTrue(nameLN0.marshallOutsideWriteLatch());
  }

  @Test
  public void test16()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("");
      // Undeclared exception!
      try { 
        nameLN0.readFromLog(byteBuffer0, (byte) (-81));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test17()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      // Undeclared exception!
      try { 
        nameLN0.getLogSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test18()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-353));
      NameLN nameLN0 = new NameLN(databaseId0);
      nameLN0.getLogType();
      //  // Unstable assertion: assertEquals(23L, nameLN0.getNodeId());
  }

  @Test
  public void test19()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-353));
      NameLN nameLN0 = new NameLN(databaseId0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode(" open databases exist");
      nameLN0.writeToLog(byteBuffer0);
      //  // Unstable assertion: assertEquals(3, byteBuffer0.remaining());
      //  // Unstable assertion: assertEquals(19L, nameLN0.getLastId());
  }

  @Test
  public void test20()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      String string0 = nameLN0.toString();
      assertEquals("<nameLN>\n  <node>0</node>\n</nameLN>\n<deleted val=\"false\">\n<id val=\"0\">\n", string0);
  }

  @Test
  public void test21()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-353));
      NameLN nameLN0 = new NameLN(databaseId0);
      nameLN0.getId();
      //  // Unstable assertion: assertEquals(17L, nameLN0.getNodeId());
  }

  @Test
  public void test22()  throws Throwable  {
      NameLN nameLN0 = new NameLN((DatabaseId) null);
      // Undeclared exception!
      try { 
        nameLN0.dumpString((-1), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         assertThrownBy("java.lang.String", e);
      }
  }
}
