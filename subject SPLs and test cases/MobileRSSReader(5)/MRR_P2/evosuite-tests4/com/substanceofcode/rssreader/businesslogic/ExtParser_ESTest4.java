/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 12 16:16:02 KST 2018
 */

package com.substanceofcode.rssreader.businesslogic;

import static org.junit.Assert.assertEquals;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.time.Clock;
import java.time.Instant;
import java.time.ZoneId;
import java.util.Date;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.substanceofcode.rssreader.businessentities.RssFeed;
import com.substanceofcode.rssreader.businessentities.RssItunesFeed;
import com.substanceofcode.rssreader.businessentities.RssItunesItem;
import com.substanceofcode.utils.XmlParser;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class ExtParser_ESTest4 extends ExtParser_ESTest_scaffolding4 {
@BeforeClass
public static void initEvoSuiteFramework() {
String a = "aa";
}
@AfterClass
public static void exitEvoSuiteFramework() {
String a = "aa";
}

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExtParser extParser0 = new ExtParser(true);
      Date date0 = new Date(0L);
      RssFeed rssFeed0 = new RssFeed("", "", "", "", date0, "", date0, 0);
      RssItunesFeed rssItunesFeed0 = new RssItunesFeed(rssFeed0);
      RssItunesFeed rssItunesFeed1 = extParser0.getFeedInstance(rssItunesFeed0, "", "", "");
      assertFalse(extParser0.isHasExt());
      assertFalse(rssItunesFeed1.isItunes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExtParser extParser0 = new ExtParser(true);
      Date date0 = new Date(0L);
      RssItunesFeed rssItunesFeed0 = new RssItunesFeed("", "", "", "", date0, "", date0, 1, false, (String) null, "", "", "", "", "", (byte)0);
      RssItunesFeed rssItunesFeed1 = extParser0.getFeedInstance(rssItunesFeed0, "", "", "");
      assertFalse(rssItunesFeed1.isItunes());
      assertFalse(extParser0.isHasExt());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExtParser extParser0 = new ExtParser(false);
      extParser0.setDate((String) null);
      String string0 = extParser0.getDate();
      assertFalse(extParser0.isItunes());
      assertFalse(extParser0.isHasExt());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExtParser extParser0 = new ExtParser(false);
      extParser0.setDate("g");
      extParser0.getDate();
      assertEquals("g", extParser0.getDate());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExtParser extParser0 = new ExtParser(false);
      ZoneId zoneId0 = ZoneId.systemDefault();
      Clock clock0 = Clock.tickSeconds(zoneId0);
      Instant instant0 = Instant.now(clock0);
      Date date0 = Date.from(instant0);
      RssItunesItem rssItunesItem0 = extParser0.createItem("", "", "", date0, "", true, "");
      assertEquals("", rssItunesItem0.getLink());
      assertEquals("", rssItunesItem0.getTitle());
      assertFalse(extParser0.isHasExt());
      assertTrue(rssItunesItem0.isUnreadItem());
      assertEquals("", rssItunesItem0.getEnclosure());
      assertFalse(extParser0.isItunes());
      assertFalse(rssItunesItem0.isItunes());
      assertEquals("", rssItunesItem0.getDescription());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExtParser extParser0 = new ExtParser(true);
      // Undeclared exception!
      try { 
        extParser0.parseNamespaces((XmlParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.substanceofcode.rssreader.businesslogic.ExtParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExtParser extParser0 = new ExtParser(true);
      // Undeclared exception!
      try { 
        extParser0.parseExtItem((XmlParser) null, '*', (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.substanceofcode.rssreader.businesslogic.ExtParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExtParser extParser0 = new ExtParser(false);
      // Undeclared exception!
      try { 
        extParser0.getFeedInstance((RssItunesFeed) null, "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.substanceofcode.rssreader.businesslogic.ExtParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExtParser extParser0 = new ExtParser(true);
      Date date0 = new Date();
      // Undeclared exception!
      try { 
        extParser0.createItem((String) null, "", "", date0, "", false, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExtParser extParser0 = new ExtParser(true);
      extParser0.parseExtItem((XmlParser) null, 'c', "");
      assertFalse(extParser0.isHasExt());
      assertFalse(extParser0.isItunes());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExtParser extParser0 = new ExtParser(false);
      RssItunesItem rssItunesItem0 = extParser0.createItem("k", "", "", (Date) null, "", false, "");
      assertFalse(extParser0.isHasExt());
      assertEquals("", rssItunesItem0.getLink());
      assertFalse(extParser0.isItunes());
      assertEquals("", rssItunesItem0.getEnclosure());
      assertFalse(rssItunesItem0.isItunes());
      assertFalse(rssItunesItem0.isUnreadItem());
      assertEquals("", rssItunesItem0.getDescription());
      assertEquals("k", rssItunesItem0.getTitle());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExtParser extParser0 = new ExtParser(true);
      Date date0 = new Date(0L);
      RssItunesItem rssItunesItem0 = extParser0.createItem("", "", "|", date0, "", false, "");
      assertFalse(rssItunesItem0.isItunes());
      assertEquals("|", rssItunesItem0.getDescription());
      assertEquals("", rssItunesItem0.getEnclosure());
      assertEquals("", rssItunesItem0.getLink());
      assertEquals("", rssItunesItem0.getTitle());
      assertFalse(extParser0.isHasExt());
      assertFalse(rssItunesItem0.isUnreadItem());
      assertFalse(extParser0.isItunes());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExtParser extParser0 = new ExtParser(false);
      RssItunesFeed rssItunesFeed0 = new RssItunesFeed("", "", "", "");
      RssItunesFeed rssItunesFeed1 = extParser0.getFeedInstance(rssItunesFeed0, "", "", "");
      assertFalse(extParser0.isHasExt());
      assertFalse(rssItunesFeed1.isItunes());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExtParser extParser0 = new ExtParser(false);
      RssItunesFeed rssItunesFeed0 = new RssItunesFeed("", "", "", "");
      RssItunesFeed rssItunesFeed1 = extParser0.getFeedInstance(rssItunesFeed0, "b", "", "");
      assertFalse(rssItunesFeed1.isItunes());
      assertFalse(extParser0.isHasExt());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExtParser extParser0 = new ExtParser(false);
      boolean boolean0 = extParser0.isItunes();
      assertFalse(boolean0);
      assertFalse(extParser0.isHasExt());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExtParser extParser0 = new ExtParser(true);
      boolean boolean0 = extParser0.isHasExt();
      assertFalse(boolean0);
      assertFalse(extParser0.isItunes());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExtParser extParser0 = new ExtParser(true);
      extParser0.reset();
      assertFalse(extParser0.isHasExt());
      assertFalse(extParser0.isItunes());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExtParser extParser0 = new ExtParser(true);
      assertFalse(extParser0.isHasExt());
      
      extParser0.setHasExt(true);
      boolean boolean0 = extParser0.isHasExt();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExtParser extParser0 = new ExtParser(true);
      extParser0.setItunes(true);
      assertFalse(extParser0.isHasExt());
      assertFalse(extParser0.isItunes());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExtParser extParser0 = new ExtParser(false);
      String string0 = extParser0.getDate();
      assertFalse(extParser0.isItunes());
      assertEquals("", string0);
      assertFalse(extParser0.isHasExt());
  }
}
