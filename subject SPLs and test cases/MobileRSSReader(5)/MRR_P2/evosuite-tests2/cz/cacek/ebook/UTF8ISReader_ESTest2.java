/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 12 18:29:11 KST 2018
 */

package cz.cacek.ebook;

import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UTFDataFormatException;
import java.util.Enumeration;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class UTF8ISReader_ESTest2 extends UTF8ISReader_ESTest_scaffolding2 {
@BeforeClass
public static void initEvoSuiteFramework() {
String a = "aa";
}
@AfterClass
public static void exitEvoSuiteFramework() {
String a = "aa";
}

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(byteArrayInputStream0);
      int int0 = uTF8ISReader0.sizeOf(byteArray0, 0, (byte) (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(pushbackInputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-65);
      int int0 = uTF8ISReader0.sizeOf(byteArray0, (byte)0, 5);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(sequenceInputStream0);
      char[] charArray0 = new char[2];
      int int0 = uTF8ISReader0.read(charArray0, 1, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4, (byte)0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(dataInputStream0);
      boolean boolean0 = uTF8ISReader0.ready();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(fileInputStream0);
      boolean boolean0 = uTF8ISReader0.ready();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(pipedInputStream0);
      byte[] byteArray0 = new byte[5];
      int int0 = uTF8ISReader0.sizeOf(byteArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(sequenceInputStream0);
      // Undeclared exception!
      try { 
        uTF8ISReader0.sizeOf((byte[]) null, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cz.cacek.ebook.UTF8ISReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(sequenceInputStream0);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        uTF8ISReader0.sizeOf(byteArray0, (byte)9, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("cz.cacek.ebook.UTF8ISReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(dataInputStream0);
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        uTF8ISReader0.read(charArray0, (int) (byte)6, (int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("cz.cacek.ebook.UTF8ISReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 1);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(sequenceInputStream1);
      char[] charArray0 = new char[9];
      try { 
        uTF8ISReader0.read(charArray0, 0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(byteArrayInputStream0);
      int int0 = uTF8ISReader0.sizeOf(byteArray0, 0, 4);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-17);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(byteArrayInputStream0);
      int int0 = uTF8ISReader0.sizeOf(byteArray0, 0, 4);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-49);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(byteArrayInputStream0);
      int int0 = uTF8ISReader0.sizeOf(byteArray0, 0, 2);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(pushbackInputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-97);
      int int0 = uTF8ISReader0.sizeOf(byteArray0, (byte)0, 4);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte) (-113);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(byteArrayInputStream0);
      int int0 = uTF8ISReader0.sizeOf(byteArray0, (byte)0, 5);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(byteArrayInputStream0);
      int int0 = uTF8ISReader0.sizeOf(byteArray0, 0, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(byteArrayInputStream0);
      int int0 = uTF8ISReader0.sizeOf(byteArray0, 0, 4);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(byteArrayInputStream0);
      int int0 = uTF8ISReader0.sizeOf(byteArray0, 0, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(bufferedInputStream0);
      char[] charArray0 = new char[9];
      uTF8ISReader0.read(charArray0);
      uTF8ISReader0.read(charArray0);
      int int0 = uTF8ISReader0.read(charArray0, (int) (byte)0, 1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-65);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(byteArrayInputStream0);
      char[] charArray0 = new char[5];
      try { 
        uTF8ISReader0.read(charArray0, (int) (byte)0, (int) (byte)1);
        fail("Expecting exception: UTFDataFormatException");
      
      } catch(UTFDataFormatException e) {
         //
         // invalid first byte 10111111
         //
         verifyException("cz.cacek.ebook.UTF8ISReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(bufferedInputStream0);
      char[] charArray0 = new char[9];
      int int0 = uTF8ISReader0.read(charArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(bufferedInputStream0);
      char[] charArray0 = new char[9];
      int int0 = uTF8ISReader0.read(charArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(sequenceInputStream0);
      char[] charArray0 = new char[2];
      int int0 = uTF8ISReader0.read(charArray0, 0, (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(byteArrayInputStream0);
      char[] charArray0 = new char[6];
      int int0 = uTF8ISReader0.read(charArray0, 0, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(sequenceInputStream0);
      uTF8ISReader0.close();
      assertFalse(uTF8ISReader0.markSupported());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte) (-1));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(pushbackInputStream0);
      boolean boolean0 = uTF8ISReader0.ready();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(sequenceInputStream0);
      boolean boolean0 = uTF8ISReader0.ready();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UTF8ISReader uTF8ISReader0 = null;
      try {
        uTF8ISReader0 = new UTF8ISReader((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can't read null stream.
         //
         verifyException("cz.cacek.ebook.UTF8ISReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(sequenceInputStream0);
      boolean boolean0 = uTF8ISReader0.markSupported();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(fileInputStream0);
      try { 
        uTF8ISReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // reset() not supported
         //
         verifyException("cz.cacek.ebook.UTF8ISReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      UTF8ISReader uTF8ISReader0 = new UTF8ISReader(sequenceInputStream0);
      try { 
        uTF8ISReader0.mark(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark() not supported
         //
         verifyException("cz.cacek.ebook.UTF8ISReader", e);
      }
  }
}
