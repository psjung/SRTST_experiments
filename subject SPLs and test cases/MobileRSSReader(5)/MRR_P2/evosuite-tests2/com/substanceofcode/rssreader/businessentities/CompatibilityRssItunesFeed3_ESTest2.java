/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 12 17:03:41 KST 2018
 */

package com.substanceofcode.rssreader.businessentities;

import static org.junit.Assert.assertEquals;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.Date;
import java.util.Vector;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class CompatibilityRssItunesFeed3_ESTest2 extends CompatibilityRssItunesFeed3_ESTest_scaffolding2 {
@BeforeClass
public static void initEvoSuiteFramework() {
String a = "aa";
}
@AfterClass
public static void exitEvoSuiteFramework() {
String a = "aa";
}

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = CompatibilityRssItunesFeed3.deserialize3(false, "");
      compatibilityRssItunesFeed3_0.setExplicit((-1921));
      String string0 = compatibilityRssItunesFeed3_0.toString();
      //  // Unstable assertion: assertTrue(compatibilityRssItunesFeed3_0.isItunes());
      //  // Unstable assertion: assertEquals("true|||||||127|||||||-1||", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = CompatibilityRssItunesFeed3.deserialize3(true, "");
      compatibilityRssItunesFeed3_0.setExplicit(0);
      compatibilityRssItunesFeed3_0.getStoreString(true, false);
      assertEquals("no", compatibilityRssItunesFeed3_0.getExplicit());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = CompatibilityRssItunesFeed3.deserialize3(false, "|||||||9");
      //  // Unstable assertion: assertTrue(compatibilityRssItunesFeed3_0.isItunes());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3("", "", "", "");
      compatibilityRssItunesFeed3_0.m_itunes = true;
      boolean boolean0 = compatibilityRssItunesFeed3_0.isItunes();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3("", "", "", "", (Date) null, "", (Date) null, 0, true, "6", (String) null, (String) null, "", (String) null, "", (byte)0);
      String string0 = compatibilityRssItunesFeed3_0.getTitle();
      assertEquals("", compatibilityRssItunesFeed3_0.getAuthor());
      assertEquals("no", compatibilityRssItunesFeed3_0.getExplicit());
      assertTrue(compatibilityRssItunesFeed3_0.isItunes());
      assertNotNull(string0);
      assertEquals("6", string0);
      assertEquals("", compatibilityRssItunesFeed3_0.getSummary());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3();
      compatibilityRssItunesFeed3_0.setSummary((String) null);
      String string0 = compatibilityRssItunesFeed3_0.getSummary();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3("", (String) null, "", "", (Date) null, "", (Date) null, 0, true, "", "", "", "", "", "K", (byte)0);
      String string0 = compatibilityRssItunesFeed3_0.getSummary();
      assertEquals("", compatibilityRssItunesFeed3_0.getLanguage());
      assertEquals("no", compatibilityRssItunesFeed3_0.getExplicit());
      assertEquals("", compatibilityRssItunesFeed3_0.getDescription());
      assertEquals("", compatibilityRssItunesFeed3_0.getAuthor());
      assertEquals("K", string0);
      assertEquals("", compatibilityRssItunesFeed3_0.getTitle());
      assertEquals("", compatibilityRssItunesFeed3_0.getSubtitle());
      assertNotNull(string0);
      assertTrue(compatibilityRssItunesFeed3_0.isItunes());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Date date0 = new Date();
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3((String) null, (String) null, (String) null, (String) null, date0, (String) null, date0, 0, true, (String) null, (String) null, (String) null, (String) null, (String) null, (String) null, (byte)0);
      String string0 = compatibilityRssItunesFeed3_0.getSubtitle();
      assertTrue(compatibilityRssItunesFeed3_0.isItunes());
      assertNull(string0);
      assertEquals("no", compatibilityRssItunesFeed3_0.getExplicit());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = CompatibilityRssItunesFeed3.deserialize3(false, "");
      compatibilityRssItunesFeed3_0.setSubtitle("9");
      compatibilityRssItunesFeed3_0.getSubtitle();
      assertEquals("9", compatibilityRssItunesFeed3_0.getSubtitle());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3();
      compatibilityRssItunesFeed3_0.setLanguage((String) null);
      String string0 = compatibilityRssItunesFeed3_0.getLanguage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3("", "", "", "", (Date) null, "", (Date) null, 0, true, "", "", "c", "", "", "", (byte)0);
      String string0 = compatibilityRssItunesFeed3_0.getLanguage();
      assertEquals("c", string0);
      assertEquals("", compatibilityRssItunesFeed3_0.getSummary());
      assertEquals("", compatibilityRssItunesFeed3_0.getAuthor());
      assertEquals("no", compatibilityRssItunesFeed3_0.getExplicit());
      assertEquals("", compatibilityRssItunesFeed3_0.getSubtitle());
      assertTrue(compatibilityRssItunesFeed3_0.isItunes());
      assertEquals("", compatibilityRssItunesFeed3_0.getDescription());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = CompatibilityRssItunesFeed3.deserialize3(false, "");
      compatibilityRssItunesFeed3_0.setDescription((String) null);
      String string0 = compatibilityRssItunesFeed3_0.getDescription();
      //  // Unstable assertion: assertTrue(compatibilityRssItunesFeed3_0.isItunes());
      //  // Unstable assertion: assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3("", "", "", "");
      compatibilityRssItunesFeed3_0.setDescription("s");
      compatibilityRssItunesFeed3_0.getDescription();
      assertEquals("s", compatibilityRssItunesFeed3_0.getDescription());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3("", "", "", "", (Date) null, "", (Date) null, 0, true, "", "", "", "", "", "", (byte)0);
      int int0 = compatibilityRssItunesFeed3_0.getCategory();
      assertEquals("", compatibilityRssItunesFeed3_0.getSubtitle());
      assertEquals("", compatibilityRssItunesFeed3_0.getAuthor());
      assertEquals("no", compatibilityRssItunesFeed3_0.getExplicit());
      assertEquals(0, int0);
      assertEquals("", compatibilityRssItunesFeed3_0.getLanguage());
      assertTrue(compatibilityRssItunesFeed3_0.isItunes());
      assertEquals("", compatibilityRssItunesFeed3_0.getTitle());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Date date0 = new Date(0L);
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3("", "", "", "", date0, "", date0, 1, true, "", "", "", "", "", "", (byte)0);
      int int0 = compatibilityRssItunesFeed3_0.getCategory();
      assertEquals(1, int0);
      assertEquals("", compatibilityRssItunesFeed3_0.getTitle());
      assertEquals("", compatibilityRssItunesFeed3_0.getSummary());
      assertEquals("no", compatibilityRssItunesFeed3_0.getExplicit());
      assertEquals("", compatibilityRssItunesFeed3_0.getAuthor());
      assertEquals("", compatibilityRssItunesFeed3_0.getSubtitle());
      assertEquals("", compatibilityRssItunesFeed3_0.getDescription());
      assertTrue(compatibilityRssItunesFeed3_0.isItunes());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3("", "", "", "");
      compatibilityRssItunesFeed3_0.setAuthor((String) null);
      String string0 = compatibilityRssItunesFeed3_0.getAuthor();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3();
      compatibilityRssItunesFeed3_0.setAuthor("u");
      compatibilityRssItunesFeed3_0.getAuthor();
      assertEquals("u", compatibilityRssItunesFeed3_0.getAuthor());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = CompatibilityRssItunesFeed3.deserialize3(false, (String) null);
      assertNull(compatibilityRssItunesFeed3_0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = CompatibilityRssItunesFeed3.deserialize3(false, "");
      compatibilityRssItunesFeed3_0.setItems((Vector) null);
      // Undeclared exception!
      try { 
        compatibilityRssItunesFeed3_0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.substanceofcode.rssreader.businessentities.CompatibilityRssFeed3", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3((String) null, (String) null, "", "");
      // Undeclared exception!
      try { 
        compatibilityRssItunesFeed3_0.getStoreString(true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.substanceofcode.rssreader.businessentities.CompatibilityRssFeed3", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3("", "", "", "");
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) "");
      compatibilityRssItunesFeed3_0.setItems(vector0);
      // Undeclared exception!
      try { 
        compatibilityRssItunesFeed3_0.getStoreString(true, true);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3("", "", "", "");
      // Undeclared exception!
      try { 
        compatibilityRssItunesFeed3_0.copyTo((CompatibilityRssItunesFeed3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.substanceofcode.rssreader.businessentities.CompatibilityRssFeed3", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = null;
      try {
        compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3((RssItunesFeed) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.substanceofcode.rssreader.businessentities.CompatibilityRssItunesFeed3", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = CompatibilityRssItunesFeed3.deserialize3(true, "");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[7] = "";
      compatibilityRssItunesFeed3_0.init(false, false, stringArray0);
      //  // Unstable assertion: assertTrue(compatibilityRssItunesFeed3_0.isItunes());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3("", "", "", "");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "R";
      compatibilityRssItunesFeed3_0.init(true, true, stringArray0);
      //  // Unstable assertion: assertTrue(compatibilityRssItunesFeed3_0.isItunes());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = CompatibilityRssItunesFeed3.deserialize3(true, "");
      String string0 = compatibilityRssItunesFeed3_0.getExplicit();
      //  // Unstable assertion: assertEquals("unspecified", string0);
      //  // Unstable assertion: assertTrue(compatibilityRssItunesFeed3_0.isItunes());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = CompatibilityRssItunesFeed3.deserialize3(true, "");
      compatibilityRssItunesFeed3_0.setExplicit(0);
      compatibilityRssItunesFeed3_0.getExplicit();
      assertEquals("no", compatibilityRssItunesFeed3_0.getExplicit());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3();
      compatibilityRssItunesFeed3_0.setExplicit((-2));
      String string0 = compatibilityRssItunesFeed3_0.toString();
      assertEquals("false|||||||-2|||||||-1||", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3();
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_1 = new CompatibilityRssItunesFeed3(compatibilityRssItunesFeed3_0);
      compatibilityRssItunesFeed3_0.setExplicit(0);
      boolean boolean0 = compatibilityRssItunesFeed3_1.equals(compatibilityRssItunesFeed3_0);
      assertEquals("no", compatibilityRssItunesFeed3_0.getExplicit());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = CompatibilityRssItunesFeed3.deserialize3(false, "XAI`b3^9CF})K {:");
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_1 = CompatibilityRssItunesFeed3.deserialize3(false, "XAI`b3^9CF})K {:");
      compatibilityRssItunesFeed3_1.setSummary((String) null);
      boolean boolean0 = compatibilityRssItunesFeed3_1.equals(compatibilityRssItunesFeed3_0);
      //  // Unstable assertion: assertEquals("", compatibilityRssItunesFeed3_1.getTitle());
      //  // Unstable assertion: assertTrue(compatibilityRssItunesFeed3_1.isItunes());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = CompatibilityRssItunesFeed3.deserialize3(false, "XAI`b3^9CF})K {:");
      compatibilityRssItunesFeed3_0.setLanguage("u");
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_1 = CompatibilityRssItunesFeed3.deserialize3(false, "XAI`b3^9CF})K {:");
      boolean boolean0 = compatibilityRssItunesFeed3_1.equals(compatibilityRssItunesFeed3_0);
      assertEquals("u", compatibilityRssItunesFeed3_0.getLanguage());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = CompatibilityRssItunesFeed3.deserialize3(true, "");
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_1 = CompatibilityRssItunesFeed3.deserialize3(true, "i");
      boolean boolean0 = compatibilityRssItunesFeed3_1.equals(compatibilityRssItunesFeed3_0);
      //  // Unstable assertion: assertTrue(compatibilityRssItunesFeed3_1.isItunes());
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals("", compatibilityRssItunesFeed3_1.getTitle());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = CompatibilityRssItunesFeed3.deserialize3(true, "");
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_1 = CompatibilityRssItunesFeed3.deserialize3(true, "");
      compatibilityRssItunesFeed3_0.m_name = null;
      boolean boolean0 = compatibilityRssItunesFeed3_0.equals(compatibilityRssItunesFeed3_1);
      //  // Unstable assertion: assertTrue(compatibilityRssItunesFeed3_1.isItunes());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = CompatibilityRssItunesFeed3.deserialize3(true, "");
      boolean boolean0 = compatibilityRssItunesFeed3_0.equals(compatibilityRssItunesFeed3_0);
      //  // Unstable assertion: assertTrue(compatibilityRssItunesFeed3_0.isItunes());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3();
      compatibilityRssItunesFeed3_0.setExplicit((-2));
      String string0 = compatibilityRssItunesFeed3_0.getStoreString(false, true);
      assertEquals("|||||||-2|||||||||", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = CompatibilityRssItunesFeed3.deserialize3(true, "0B");
      assertFalse(compatibilityRssItunesFeed3_0.isItunes());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = CompatibilityRssItunesFeed3.deserialize3(true, "\n");
      //  // Unstable assertion: assertEquals("", compatibilityRssItunesFeed3_0.getTitle());
      //  // Unstable assertion: assertTrue(compatibilityRssItunesFeed3_0.isItunes());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Date date0 = new Date();
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3("", "", "", "", date0, "", date0, 0, true, "", "", "", "", "", "", (byte)0);
      // Undeclared exception!
      try { 
        compatibilityRssItunesFeed3_0.equals((CompatibilityRssItunesFeed3) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.substanceofcode.rssreader.businessentities.CompatibilityRssFeed3", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Date date0 = new Date();
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3("", "", "", "", date0, "", date0, 0, false, "", "", "", "", "", "", (byte)0);
      assertEquals("unspecified", compatibilityRssItunesFeed3_0.getExplicit());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3();
      int int0 = compatibilityRssItunesFeed3_0.getCategory();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3();
      String string0 = compatibilityRssItunesFeed3_0.getSubtitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3("", "", "", (String) null);
      compatibilityRssItunesFeed3_0.setCategory(0);
      assertEquals(0, compatibilityRssItunesFeed3_0.getCategory());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3("", "", "", "");
      compatibilityRssItunesFeed3_0.setItunes(true);
      assertTrue(compatibilityRssItunesFeed3_0.isItunes());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3();
      boolean boolean0 = compatibilityRssItunesFeed3_0.isItunes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3();
      String string0 = compatibilityRssItunesFeed3_0.getTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3();
      compatibilityRssItunesFeed3_0.setTitle("");
      assertEquals("", compatibilityRssItunesFeed3_0.getTitle());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3();
      compatibilityRssItunesFeed3_0.modifyItunes(false, "", "", "", "", "", "", (byte)0);
      assertEquals("no", compatibilityRssItunesFeed3_0.getExplicit());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3();
      compatibilityRssItunesFeed3_0.copyTo(compatibilityRssItunesFeed3_0);
      assertEquals("", compatibilityRssItunesFeed3_0.getSubtitle());
      assertEquals("", compatibilityRssItunesFeed3_0.getSummary());
      assertEquals("", compatibilityRssItunesFeed3_0.getAuthor());
      assertEquals("", compatibilityRssItunesFeed3_0.getDescription());
      assertEquals("", compatibilityRssItunesFeed3_0.getLanguage());
      assertEquals("unspecified", compatibilityRssItunesFeed3_0.getExplicit());
      assertEquals("", compatibilityRssItunesFeed3_0.getTitle());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3();
      String string0 = compatibilityRssItunesFeed3_0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3("", "", "", (String) null);
      String string0 = compatibilityRssItunesFeed3_0.getLanguage();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = new CompatibilityRssItunesFeed3("", "", "", (String) null);
      String string0 = compatibilityRssItunesFeed3_0.getAuthor();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompatibilityRssItunesFeed3 compatibilityRssItunesFeed3_0 = CompatibilityRssItunesFeed3.deserialize3(true, "");
      //  // Unstable assertion: assertNotNull(compatibilityRssItunesFeed3_0);
      
      String string0 = compatibilityRssItunesFeed3_0.getSummary();
      //  // Unstable assertion: assertEquals("", string0);
      //  // Unstable assertion: assertTrue(compatibilityRssItunesFeed3_0.isItunes());
  }
}
