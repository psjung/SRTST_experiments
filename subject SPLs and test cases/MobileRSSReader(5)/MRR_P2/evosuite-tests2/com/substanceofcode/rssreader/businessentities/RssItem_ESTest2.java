/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 12 17:12:47 KST 2018
 */

package com.substanceofcode.rssreader.businessentities;

import static org.junit.Assert.assertEquals;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.time.Instant;
import java.util.Date;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.substanceofcode.utils.CauseException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class RssItem_ESTest2 extends RssItem_ESTest_scaffolding2 {
@BeforeClass
public static void initEvoSuiteFramework() {
String a = "aa";
}
@AfterClass
public static void exitEvoSuiteFramework() {
String a = "aa";
}

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Date date0 = new Date();
      RssItem rssItem0 = new RssItem("", "", "", date0, "", true);
      String string0 = rssItem0.toString();
      //  // Unstable assertion: assertEquals("||Sun Aug 12 17:12:07 KST 2018||true|", string0);
      //  // Unstable assertion: assertTrue(rssItem0.isUnreadItem());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Date date0 = new Date();
      RssItem rssItem0 = new RssItem("", "", "", date0, "", true);
      RssItem rssItem1 = new RssItem(rssItem0);
      RssItem rssItem2 = rssItem1.copyTo(rssItem0);
      assertSame(rssItem2, rssItem0);
      assertTrue(rssItem0.isUnreadItem());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      try { 
        RssItem.unencodedDeserialize("\r\n");
        fail("Expecting exception: CauseException");
      
      } catch(CauseException e) {
         //
         // Internal error while RssItem unencodedDeserialize 
         //
         verifyException("com.substanceofcode.rssreader.businessentities.RssItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RssItem rssItem0 = new RssItem();
      String[] stringArray0 = new String[9];
      try { 
        rssItem0.init(1, false, false, stringArray0);
        fail("Expecting exception: CauseException");
      
      } catch(CauseException e) {
         //
         // Internal error while RssItem init 
         //
         verifyException("com.substanceofcode.rssreader.businessentities.RssItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Date date0 = new Date();
      RssItem rssItem0 = new RssItem("", "", "", date0, "", true);
      String[] stringArray0 = new String[5];
      try { 
        rssItem0.init((-1), true, true, stringArray0);
        fail("Expecting exception: CauseException");
      
      } catch(CauseException e) {
         //
         // Internal error while RssItem init 
         //
         verifyException("com.substanceofcode.rssreader.businessentities.RssItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Date date0 = new Date();
      RssItem rssItem0 = new RssItem("|", "", "", date0, "", true);
      String string0 = rssItem0.unencodedSerialize();
      //  // Unstable assertion: assertEquals("\u0001||1652d3139f7||1|", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      try { 
        RssItem.unencodedDeserialize("||0");
        fail("Expecting exception: CauseException");
      
      } catch(CauseException e) {
         //
         // Internal error while RssItem unencodedDeserialize 
         //
         verifyException("com.substanceofcode.rssreader.businessentities.RssItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RssItem rssItem0 = new RssItem();
      String[] stringArray0 = new String[3];
      stringArray0[2] = "2";
      try { 
        rssItem0.init(0, true, false, stringArray0);
        fail("Expecting exception: CauseException");
      
      } catch(CauseException e) {
         //
         // Internal error while RssItem init 
         //
         verifyException("com.substanceofcode.rssreader.businessentities.RssItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      try { 
        RssItem.deserialize("0");
        fail("Expecting exception: CauseException");
      
      } catch(CauseException e) {
         //
         // Internal error while RssItem deserialize 
         //
         verifyException("com.substanceofcode.rssreader.businessentities.RssItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Date date0 = new Date();
      RssItem rssItem0 = new RssItem("", "", "", date0, "", false);
      boolean boolean0 = rssItem0.isUnreadItem();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Date date0 = new Date();
      RssItem rssItem0 = new RssItem((String) null, (String) null, (String) null, date0, "", false);
      String string0 = rssItem0.getTitle();
      assertNull(string0);
      assertFalse(rssItem0.isUnreadItem());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Date date0 = new Date(0L);
      RssItem rssItem0 = new RssItem("x", "", "", date0, "", true);
      String string0 = rssItem0.getTitle();
      assertEquals("", rssItem0.getDescription());
      assertEquals("x", string0);
      assertTrue(rssItem0.isUnreadItem());
      assertEquals("", rssItem0.getLink());
      assertEquals("", rssItem0.getEnclosure());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RssItem rssItem0 = new RssItem();
      rssItem0.m_link = null;
      String string0 = rssItem0.getLink();
      assertFalse(rssItem0.isUnreadItem());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Date date0 = new Date();
      RssItem rssItem0 = new RssItem("", "P", "", date0, "", true);
      String string0 = rssItem0.getLink();
      //  // Unstable assertion: assertEquals("", rssItem0.getTitle());
      //  // Unstable assertion: assertEquals("", rssItem0.getEnclosure());
      //  // Unstable assertion: assertEquals("P", string0);
      //  // Unstable assertion: assertEquals("Sun Aug 12 17:12:03 KST 2018", date0.toString());
      //  // Unstable assertion: assertTrue(rssItem0.isUnreadItem());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Date date0 = new Date();
      RssItem rssItem0 = new RssItem("", "", (String) null, date0, (String) null, false);
      String string0 = rssItem0.getEnclosure();
      assertNull(string0);
      assertFalse(rssItem0.isUnreadItem());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Date date0 = new Date();
      RssItem rssItem0 = new RssItem("", "", "", date0, "y", false);
      String string0 = rssItem0.getEnclosure();
      assertEquals("", rssItem0.getTitle());
      assertEquals("", rssItem0.getDescription());
      assertFalse(rssItem0.isUnreadItem());
      assertEquals("", rssItem0.getLink());
      assertEquals("y", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Date date0 = new Date();
      RssItem rssItem0 = new RssItem((String) null, "", (String) null, date0, (String) null, false);
      String string0 = rssItem0.getDescription();
      assertFalse(rssItem0.isUnreadItem());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Date date0 = new Date();
      RssItem rssItem0 = new RssItem("", "", "9", date0, "", false);
      String string0 = rssItem0.getDescription();
      assertEquals("", rssItem0.getTitle());
      assertEquals("9", string0);
      assertFalse(rssItem0.isUnreadItem());
      assertEquals("", rssItem0.getEnclosure());
      assertEquals("", rssItem0.getLink());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      RssItem rssItem0 = new RssItem("", "", "", date0, "", true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[2] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      rssItem0.init(0, true, true, stringArray0);
      Date date1 = rssItem0.getDate();
      assertNull(date1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RssItem rssItem0 = RssItem.deserialize("fHx8fDB8");
      //  // Unstable assertion: assertTrue(rssItem0.isUnreadItem());
      //  // Unstable assertion: assertEquals("", rssItem0.getTitle());
      //  // Unstable assertion: assertEquals("", rssItem0.getLink());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RssItem rssItem0 = new RssItem((String) null, "", (String) null, (Date) null, "", true);
      // Undeclared exception!
      try { 
        rssItem0.unencodedSerialize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.substanceofcode.rssreader.businessentities.RssItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Date date0 = new Date();
      RssItem rssItem0 = new RssItem((String) null, (String) null, (String) null, date0, "", true);
      // Undeclared exception!
      try { 
        rssItem0.serialize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.substanceofcode.rssreader.businessentities.RssItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Date date0 = new Date(0L);
      RssItem rssItem0 = new RssItem("", (String) null, "", date0, "", true);
      // Undeclared exception!
      try { 
        rssItem0.equals(rssItem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RssItem rssItem0 = new RssItem();
      // Undeclared exception!
      try { 
        rssItem0.copyTo((RssItem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.substanceofcode.rssreader.businessentities.RssItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RssItem rssItem0 = null;
      try {
        rssItem0 = new RssItem((RssItem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.substanceofcode.rssreader.businessentities.RssItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RssItem rssItem0 = new RssItem();
      String string0 = rssItem0.unencodedSerialize();
      assertEquals("||||0|", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RssItem rssItem0 = RssItem.unencodedDeserialize("|||||");
      String string0 = rssItem0.unencodedSerialize();
      //  // Unstable assertion: assertEquals("||||1|", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RssItem rssItem0 = RssItem.unencodedDeserialize("|||||");
      RssItem rssItem1 = new RssItem();
      rssItem0.equals(rssItem1);
      assertEquals("", rssItem0.getDescription());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RssItem rssItem0 = new RssItem();
      RssItem rssItem1 = new RssItem();
      rssItem1.m_enclosure = "v";
      rssItem0.equals(rssItem1);
      assertFalse(rssItem1.isUnreadItem());
      assertFalse(rssItem0.isUnreadItem());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Date date0 = new Date(0L);
      RssItem rssItem0 = new RssItem("", "", "", date0, "", false);
      boolean boolean0 = rssItem0.equals(rssItem0);
      assertTrue(boolean0);
      assertFalse(rssItem0.isUnreadItem());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Date date0 = new Date(0L);
      RssItem rssItem0 = new RssItem("", "", "", date0, "", false);
      RssItem rssItem1 = new RssItem();
      boolean boolean0 = rssItem0.equals(rssItem1);
      assertFalse(rssItem1.isUnreadItem());
      assertFalse(rssItem0.isUnreadItem());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RssItem rssItem0 = RssItem.unencodedDeserialize("|||||");
      RssItem rssItem1 = new RssItem(rssItem0);
      Date date0 = new Date();
      rssItem1.m_date = date0;
      //  // Unstable assertion: assertEquals("Sun Aug 12 17:11:59 KST 2018", rssItem1.m_date.toString());
      
      boolean boolean0 = rssItem0.equals(rssItem1);
      //  // Unstable assertion: assertTrue(rssItem1.isUnreadItem());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Date date0 = new Date(0L);
      RssItem rssItem0 = new RssItem("", "", "", date0, "", true);
      RssItem rssItem1 = new RssItem(rssItem0);
      rssItem1.m_desc = "F";
      boolean boolean0 = rssItem0.equals(rssItem1);
      assertTrue(rssItem0.isUnreadItem());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RssItem rssItem0 = RssItem.unencodedDeserialize("|||||");
      RssItem rssItem1 = new RssItem();
      rssItem1.m_link = "f";
      boolean boolean0 = rssItem0.equals(rssItem1);
      assertFalse(boolean0);
      assertEquals("", rssItem0.getDescription());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Date date0 = new Date();
      RssItem rssItem0 = new RssItem("P", "", "", date0, "", true);
      RssItem rssItem1 = new RssItem();
      boolean boolean0 = rssItem0.equals(rssItem1);
      assertFalse(rssItem1.isUnreadItem());
      assertEquals("P", rssItem0.getTitle());
      assertFalse(boolean0);
      assertTrue(rssItem0.isUnreadItem());
      assertEquals("", rssItem0.getLink());
      assertEquals("", rssItem0.getDescription());
      assertEquals("", rssItem0.getEnclosure());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      try { 
        RssItem.unencodedDeserialize("\n");
        fail("Expecting exception: CauseException");
      
      } catch(CauseException e) {
         //
         // Internal error while RssItem unencodedDeserialize 
         //
         verifyException("com.substanceofcode.rssreader.businessentities.RssItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Date date0 = new Date(0L);
      RssItem rssItem0 = new RssItem("", "", "", date0, "", true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[2] = "F";
      try { 
        rssItem0.init(0, false, true, stringArray0);
        fail("Expecting exception: CauseException");
      
      } catch(CauseException e) {
         //
         // Internal error while RssItem init 
         //
         verifyException("com.substanceofcode.rssreader.businessentities.RssItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Date date0 = new Date(0L);
      RssItem rssItem0 = new RssItem("", "", "", date0, "", true);
      String string0 = rssItem0.serialize();
      assertEquals("fHwwfHwxfA==", string0);
      assertTrue(rssItem0.isUnreadItem());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Date date0 = new Date();
      RssItem rssItem0 = new RssItem("", "", "", date0, "", true);
      rssItem0.getTitle();
      assertTrue(rssItem0.isUnreadItem());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Date date0 = new Date();
      RssItem rssItem0 = new RssItem("", "", "", date0, "", true);
      assertTrue(rssItem0.isUnreadItem());
      
      rssItem0.setUnreadItem(false);
      assertFalse(rssItem0.isUnreadItem());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RssItem rssItem0 = new RssItem();
      rssItem0.getLink();
      assertFalse(rssItem0.isUnreadItem());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RssItem rssItem0 = RssItem.unencodedDeserialize("|||||");
      boolean boolean0 = rssItem0.isUnreadItem();
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals("", rssItem0.getDescription());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Date date0 = new Date();
      RssItem rssItem0 = new RssItem("", "", "", date0, "", false);
      RssItem rssItem1 = rssItem0.copyTo(rssItem0);
      assertFalse(rssItem1.isUnreadItem());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Date date0 = new Date();
      RssItem rssItem0 = new RssItem("", "", "", date0, "", false);
      rssItem0.getEnclosure();
      assertFalse(rssItem0.isUnreadItem());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Date date0 = new Date();
      RssItem rssItem0 = new RssItem("", "", "", date0, "", true);
      Date date1 = rssItem0.getDate();
      assertTrue(rssItem0.isUnreadItem());
      assertNotNull(date1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      try { 
        RssItem.deserialize("");
        fail("Expecting exception: CauseException");
      
      } catch(CauseException e) {
         //
         // Internal error while RssItem unencodedDeserialize 
         //
         verifyException("com.substanceofcode.rssreader.businessentities.RssItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RssItem rssItem0 = new RssItem();
      rssItem0.getDescription();
      assertFalse(rssItem0.isUnreadItem());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Date date0 = new Date();
      RssItem rssItem0 = new RssItem("", "", "", date0, "", false);
      rssItem0.setEnclosure("");
      //  // Unstable assertion: assertFalse(rssItem0.isUnreadItem());
      //  // Unstable assertion: assertEquals("Sun Aug 12 17:11:53 KST 2018", date0.toString());
  }
}
