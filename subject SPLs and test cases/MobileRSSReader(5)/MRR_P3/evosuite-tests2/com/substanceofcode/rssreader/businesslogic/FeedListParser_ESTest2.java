/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 12 17:28:00 KST 2018
 */

package com.substanceofcode.rssreader.businesslogic;

import static org.junit.Assert.assertEquals;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.File;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.substanceofcode.rssreader.businessentities.RssItunesFeed;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class FeedListParser_ESTest2 extends FeedListParser_ESTest_scaffolding2 {
@BeforeClass
public static void initEvoSuiteFramework() {
String a = "aa";
}
@AfterClass
public static void exitEvoSuiteFramework() {
String a = "aa";
}

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OpmlParser opmlParser0 = new OpmlParser("", "", "");
      opmlParser0.m_location = "";
      opmlParser0.run();
      assertFalse(opmlParser0.isRedirectHtml());
      assertFalse(opmlParser0.isSuccessfull());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OpmlParser opmlParser0 = new OpmlParser("", (String) null, "");
      opmlParser0.m_feedNameFilter = "";
      try { 
        opmlParser0.parseFeeds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cz.cacek.ebook.util.ResourceProviderME", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OpmlParser opmlParser0 = new OpmlParser("", "", "");
      assertFalse(opmlParser0.isRedirectHtml());
      
      opmlParser0.m_redirectHtml = true;
      opmlParser0.run();
      assertFalse(opmlParser0.isSuccessfull());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OpmlParser opmlParser0 = new OpmlParser("", "", "");
      assertFalse(opmlParser0.isRedirectHtml());
      
      opmlParser0.setRedirectHtml(true);
      opmlParser0.startParsing();
      assertTrue(opmlParser0.isRedirectHtml());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OpmlParser opmlParser0 = new OpmlParser("", "", "");
      opmlParser0.m_needRedirect = true;
      opmlParser0.startParsing();
      assertFalse(opmlParser0.isReady());
      assertFalse(opmlParser0.isRedirectHtml());
      assertFalse(opmlParser0.isSuccessfull());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OpmlParser opmlParser0 = new OpmlParser("", "", "");
      opmlParser0.run();
      boolean boolean0 = opmlParser0.isReady();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LineByLineParser lineByLineParser0 = new LineByLineParser("", "", "");
      RssItunesFeed[] rssItunesFeedArray0 = new RssItunesFeed[2];
      lineByLineParser0.m_feeds = rssItunesFeedArray0;
      lineByLineParser0.getFeeds();
      assertFalse(lineByLineParser0.isSuccessfull());
      assertFalse(lineByLineParser0.isRedirectHtml());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OpmlParser opmlParser0 = new OpmlParser("", "", "");
      opmlParser0.m_feedURLFilter = "";
      String string0 = opmlParser0.getFeedURLFilter();
      assertFalse(opmlParser0.isSuccessfull());
      assertFalse(opmlParser0.isRedirectHtml());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LineByLineParser lineByLineParser0 = new LineByLineParser("", "", "");
      lineByLineParser0.m_feedNameFilter = "g";
      String string0 = lineByLineParser0.getFeedNameFilter();
      assertFalse(lineByLineParser0.isRedirectHtml());
      assertEquals("g", string0);
      assertFalse(lineByLineParser0.isSuccessfull());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LineByLineParser lineByLineParser0 = new LineByLineParser("", "", "");
      lineByLineParser0.setFeedNameFilter("");
      assertFalse(lineByLineParser0.isSuccessfull());
      assertFalse(lineByLineParser0.isRedirectHtml());
  }

  
}
