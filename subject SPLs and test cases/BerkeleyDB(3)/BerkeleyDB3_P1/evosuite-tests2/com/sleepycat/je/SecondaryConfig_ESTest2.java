/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 22:32:28 KST 2017
 */

package com.sleepycat.je;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class SecondaryConfig_ESTest2 extends SecondaryConfig_ESTest_scaffolding2 {

  @Test
  public void test00()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      boolean boolean0 = secondaryConfig0.getAllowPopulate();
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      String string0 = secondaryConfig0.genSecondaryConfigMismatchMessage(secondaryConfig0, false, true, true, true, true, true, true);
      assertEquals("The following SecondaryConfig parameters for the\ncached Database do not match the parameters for the\nrequested Database:\n SecondaryKeyCreator\n", string0);
  }

  @Test
  public void test02()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = SecondaryConfig.DEFAULT;
      String string0 = secondaryConfig0.genSecondaryConfigMismatchMessage(secondaryConfig0, false, true, false, false, false, false, false);
      assertEquals("The following SecondaryConfig parameters for the\ncached Database do not match the parameters for the\nrequested Database:\n SecondaryKeyCreator\n ForeignKeyDelete\n ForeignKeyDeleteAction\n ForeignKeyNullifier\n ForeignMultiKeyNullifier\n ImmutableSecondaryKey\n", string0);
  }

  @Test
  public void test03()  throws Throwable  {
      ForeignKeyDeleteAction foreignKeyDeleteAction0 = ForeignKeyDeleteAction.ABORT;
      SecondaryConfig.DEFAULT.setForeignKeyDeleteAction(foreignKeyDeleteAction0);
  }

  @Test
  public void test04()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = SecondaryConfig.DEFAULT;
      SecondaryKeyCreator secondaryKeyCreator0 = secondaryConfig0.getKeyCreator();
      assertNull(secondaryKeyCreator0);
  }

  @Test
  public void test05()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = SecondaryConfig.DEFAULT;
      ForeignKeyNullifier foreignKeyNullifier0 = secondaryConfig0.getForeignKeyNullifier();
      assertNull(foreignKeyNullifier0);
  }

  @Test
  public void test06()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      ForeignKeyDeleteAction foreignKeyDeleteAction0 = secondaryConfig0.getForeignKeyDeleteAction();
      assertNotNull(foreignKeyDeleteAction0);
  }

  @Test
  public void test07()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      SecondaryMultiKeyCreator secondaryMultiKeyCreator0 = secondaryConfig0.getMultiKeyCreator();
      assertNull(secondaryMultiKeyCreator0);
  }

  @Test
  public void test08()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = SecondaryConfig.DEFAULT;
      Database database0 = secondaryConfig0.getForeignKeyDatabase();
      assertNull(database0);
  }

  @Test
  public void test09()  throws Throwable  {
      ForeignMultiKeyNullifier foreignMultiKeyNullifier0 = SecondaryConfig.DEFAULT.getForeignMultiKeyNullifier();
      assertNull(foreignMultiKeyNullifier0);
  }

  @Test
  public void test10()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = SecondaryConfig.DEFAULT;
      String string0 = secondaryConfig0.genSecondaryConfigMismatchMessage(secondaryConfig0, false, false, false, true, false, true, true);
      assertEquals("The following SecondaryConfig parameters for the\ncached Database do not match the parameters for the\nrequested Database:\n SecondaryKeyCreator\n SecondaryMultiKeyCreator\n ForeignKeyDelete\n ForeignKeyNullifier\n ForeignMultiKeyNullifier\n", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = SecondaryConfig.DEFAULT;
      String string0 = secondaryConfig0.genSecondaryConfigMismatchMessage(secondaryConfig0, false, false, true, false, false, true, false);
      assertEquals("The following SecondaryConfig parameters for the\ncached Database do not match the parameters for the\nrequested Database:\n SecondaryKeyCreator\n SecondaryMultiKeyCreator\n ForeignKeyDeleteAction\n ForeignKeyNullifier\n ForeignMultiKeyNullifier\n ImmutableSecondaryKey\n", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      SecondaryConfig secondaryConfig1 = (SecondaryConfig)secondaryConfig0.cloneConfig();
      secondaryConfig0.setImmutableSecondaryKey(true);
      try { 
        secondaryConfig0.validate(secondaryConfig1);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // The following SecondaryConfig parameters for the
         // cached Database do not match the parameters for the
         // requested Database:
         //  ImmutableSecondaryKey
         //
         assertThrownBy("com.sleepycat.je.SecondaryConfig", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = SecondaryConfig.DEFAULT;
      DatabaseConfig databaseConfig0 = new DatabaseConfig();
      try { 
        secondaryConfig0.validate(databaseConfig0);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // The SecondaryConfig argument is null.
         //
         assertThrownBy("com.sleepycat.je.SecondaryConfig", e);
      }
  }

  @Test
  public void test15()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = SecondaryConfig.DEFAULT;
      secondaryConfig0.setForeignKeyDatabase((Database) null);
      assertFalse(secondaryConfig0.getExclusiveCreate());
  }

  @Test
  public void test16()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = SecondaryConfig.DEFAULT;
      secondaryConfig0.setAllowPopulate(true);
      assertTrue(secondaryConfig0.getAllowPopulate());
  }

  @Test
  public void test17()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      secondaryConfig0.setForeignMultiKeyNullifier((ForeignMultiKeyNullifier) null);
      assertFalse(secondaryConfig0.getOverrideDuplicateComparator());
  }

  @Test
  public void test19()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      secondaryConfig0.setImmutableSecondaryKey(true);
      boolean boolean0 = secondaryConfig0.getImmutableSecondaryKey();
      assertTrue(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = SecondaryConfig.DEFAULT;
      boolean boolean0 = secondaryConfig0.getAllowPopulate();
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = SecondaryConfig.DEFAULT;
      secondaryConfig0.setKeyCreator((SecondaryKeyCreator) null);
      //  // Unstable assertion: assertFalse(secondaryConfig0.getAllowPopulate());
  }

  @Test
  public void test24()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      secondaryConfig0.setMultiKeyCreator((SecondaryMultiKeyCreator) null);
      assertFalse(secondaryConfig0.getOverrideBtreeComparator());
  }

  @Test
  public void test25()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = SecondaryConfig.DEFAULT;
      // Undeclared exception!
      try { 
        secondaryConfig0.setForeignKeyDeleteAction((ForeignKeyDeleteAction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // foreignKeyDeleteAction cannot be null
         //
         assertThrownBy("com.sleepycat.je.DatabaseUtil", e);
      }
  }
}
