/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 08:31:24 KST 2017
 */

package com.sleepycat.compat;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.File;
import java.util.Comparator;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.Cursor;
import com.sleepycat.je.CursorConfig;
import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;
import com.sleepycat.je.LockMode;
import com.sleepycat.je.SecondaryConfig;
import com.sleepycat.je.SecondaryCursor;
import com.sleepycat.je.Transaction;
import com.sleepycat.je.TransactionConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class DbCompat_ESTest3 extends DbCompat_ESTest_scaffolding3 {

  @Test
  public void test00()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      secondaryConfig0.setSortedDuplicates(true);
      boolean boolean0 = DbCompat.getSortedDuplicates(secondaryConfig0);
      assertTrue(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      DatabaseConfig databaseConfig0 = new DatabaseConfig();
      // Undeclared exception!
      try { 
        DbCompat.setRecordLength(databaseConfig0, 3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test03()  throws Throwable  {
      TransactionConfig transactionConfig0 = new TransactionConfig();
      DbCompat.setSerializableIsolation(transactionConfig0, true);
      assertTrue(transactionConfig0.getSerializableIsolation());
  }

  @Test
  public void test04()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      File file0 = null;
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig();
      Environment environment0 = null;
      try {
        environment0 = new Environment(file0, environmentConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // envHome cannot be null
         //
         assertThrownBy("com.sleepycat.je.DatabaseUtil", e);
      }
  }

  @Test
  public void test05()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      boolean boolean0 = DbCompat.getSortedDuplicates(secondaryConfig0);
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      DatabaseConfig databaseConfig0 = DatabaseConfig.DEFAULT;
      File file0 = null;
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig();
      Environment environment0 = null;
      try {
        environment0 = new Environment(file0, environmentConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // envHome cannot be null
         //
         assertThrownBy("com.sleepycat.je.DatabaseUtil", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      Environment environment0 = null;
      Transaction transaction0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        DbCompat.openDatabase((Environment) null, (Transaction) null, "", "", (DatabaseConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      TransactionConfig transactionConfig0 = new TransactionConfig();
      DbCompat.setSerializableIsolation(transactionConfig0, false);
      assertFalse(transactionConfig0.getSerializableIsolation());
  }

  @Test
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbCompat.setSortedDuplicates((DatabaseConfig) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbCompat.cloneCursorConfig((CursorConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DatabaseConfig databaseConfig0 = DatabaseConfig.DEFAULT;
      // Undeclared exception!
      try { 
        DbCompat.setRecordLength(databaseConfig0, (-280));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      DbCompat.setRecordLength(secondaryConfig0, 0);
      assertFalse(secondaryConfig0.getExclusiveCreate());
  }

  @Test
  public void test13()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      // Undeclared exception!
      try { 
        DbCompat.setUnsortedDuplicates(secondaryConfig0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      DbCompat.setUnsortedDuplicates(secondaryConfig0, false);
      assertFalse(secondaryConfig0.getAllowCreate());
  }

  @Test
  public void test15()  throws Throwable  {
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig();
      // Undeclared exception!
      try { 
        DbCompat.setInitializeCDB(environmentConfig0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test16()  throws Throwable  {
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig();
      DbCompat.setInitializeCDB(environmentConfig0, false);
      assertFalse(environmentConfig0.getTxnNoSync());
  }

  @Test
  public void test17()  throws Throwable  {
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig();
      // Undeclared exception!
      try { 
        DbCompat.setInitializeLocking(environmentConfig0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test18()  throws Throwable  {
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig();
      DbCompat.setInitializeLocking(environmentConfig0, true);
      assertTrue(environmentConfig0.getLocking());
  }

  @Test
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbCompat.setInitializeCache((EnvironmentConfig) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test20()  throws Throwable  {
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig();
      DbCompat.setInitializeCache(environmentConfig0, true);
      assertFalse(environmentConfig0.getTxnSerializableIsolation());
  }

  @Test
  public void test21()  throws Throwable  {
      CursorConfig cursorConfig0 = CursorConfig.READ_COMMITTED;
      // Undeclared exception!
      try { 
        DbCompat.setWriteCursor(cursorConfig0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test22()  throws Throwable  {
      CursorConfig cursorConfig0 = CursorConfig.READ_COMMITTED;
      DbCompat.setWriteCursor(cursorConfig0, false);
      assertTrue(cursorConfig0.getReadCommitted());
  }

  @Test
  public void test23()  throws Throwable  {
      CursorConfig cursorConfig0 = CursorConfig.READ_COMMITTED;
      boolean boolean0 = DbCompat.getWriteCursor(cursorConfig0);
      assertFalse(boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      // Undeclared exception!
      try { 
        DbCompat.append((Database) null, (Transaction) null, databaseEntry0, databaseEntry0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test25()  throws Throwable  {
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig();
      boolean boolean0 = DbCompat.getInitializeLocking(environmentConfig0);
      assertTrue(boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      DatabaseConfig databaseConfig0 = DatabaseConfig.DEFAULT;
      DbCompat.setSortedDuplicates(databaseConfig0, true);
      assertTrue(databaseConfig0.getSortedDuplicates());
  }

  @Test
  public void test27()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      // Undeclared exception!
      try { 
        DbCompat.setTypeHash(secondaryConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbCompat.getSortedDuplicates((DatabaseConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test29()  throws Throwable  {
      DatabaseConfig databaseConfig0 = DatabaseConfig.DEFAULT;
      // Undeclared exception!
      try { 
        DbCompat.setRecordPad(databaseConfig0, (-455));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test30()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      DbCompat.setReadUncommitted(secondaryConfig0, false);
      assertFalse(secondaryConfig0.getAllowCreate());
  }

  @Test
  public void test31()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      // Undeclared exception!
      try { 
        DbCompat.getRecordNumber(databaseEntry0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test32()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      // Undeclared exception!
      try { 
        DbCompat.openSecondaryDatabase((Environment) null, (Transaction) null, (String) null, (String) null, (Database) null, secondaryConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbCompat.getThreadTransaction((Environment) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test34()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      // Undeclared exception!
      try { 
        DbCompat.setRenumbering(secondaryConfig0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test35()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      // Undeclared exception!
      try { 
        DbCompat.setRecordNumber(databaseEntry0, (byte)53);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test36()  throws Throwable  {
      DatabaseConfig databaseConfig0 = DatabaseConfig.DEFAULT;
      boolean boolean0 = DbCompat.isTypeRecno(databaseConfig0);
      assertFalse(boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      DbCompat dbCompat0 = new DbCompat();
  }

  @Test
  public void test38()  throws Throwable  {
      DatabaseConfig databaseConfig0 = DatabaseConfig.DEFAULT;
      // Undeclared exception!
      try { 
        DbCompat.setTypeRecno(databaseConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte) (-98), (int) (byte) (-71));
      // Undeclared exception!
      try { 
        DbCompat.putBefore((Cursor) null, databaseEntry0, databaseEntry0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test40()  throws Throwable  {
      DatabaseConfig databaseConfig0 = DatabaseConfig.DEFAULT;
      boolean boolean0 = DbCompat.isTypeHash(databaseConfig0);
      assertFalse(boolean0);
  }

  @Test
  public void test41()  throws Throwable  {
      DatabaseConfig databaseConfig0 = DatabaseConfig.DEFAULT;
      boolean boolean0 = DbCompat.isTypeBtree(databaseConfig0);
      assertTrue(boolean0);
  }

  @Test
  public void test42()  throws Throwable  {
      boolean boolean0 = DbCompat.getUnsortedDuplicates((DatabaseConfig) null);
      assertFalse(boolean0);
  }

  @Test
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbCompat.setSerializableIsolation((TransactionConfig) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test44()  throws Throwable  {
      CursorConfig cursorConfig0 = CursorConfig.READ_COMMITTED;
      CursorConfig cursorConfig1 = DbCompat.cloneCursorConfig(cursorConfig0);
      assertTrue(cursorConfig1.getReadCommitted());
      assertNotSame(cursorConfig1, cursorConfig0);
  }

  @Test
  public void test45()  throws Throwable  {
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig();
      boolean boolean0 = DbCompat.getInitializeCDB(environmentConfig0);
      assertFalse(boolean0);
  }

  @Test
  public void test46()  throws Throwable  {
      DatabaseConfig databaseConfig0 = new DatabaseConfig();
      // Undeclared exception!
      try { 
        DbCompat.setTypeQueue(databaseConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte)24, (int) (byte)0);
      LockMode lockMode0 = LockMode.READ_COMMITTED;
      // Undeclared exception!
      try { 
        DbCompat.getSearchRecordNumber((SecondaryCursor) null, databaseEntry0, databaseEntry0, databaseEntry0, lockMode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test48()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LockMode lockMode0 = LockMode.DIRTY_READ;
      // Undeclared exception!
      try { 
        DbCompat.getSearchRecordNumber((Cursor) null, databaseEntry0, databaseEntry0, lockMode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        DbCompat.putAfter((Cursor) null, (DatabaseEntry) null, (DatabaseEntry) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test50()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LockMode lockMode0 = LockMode.READ_UNCOMMITTED;
      // Undeclared exception!
      try { 
        DbCompat.getCurrentRecordNumber((Cursor) null, databaseEntry0, lockMode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test51()  throws Throwable  {
      String string0 = DbCompat.getDatabaseFile((Database) null);
      assertNull(string0);
  }

  @Test
  public void test52()  throws Throwable  {
      boolean boolean0 = DbCompat.getReadUncommitted((DatabaseConfig) null);
      assertTrue(boolean0);
  }

  @Test
  public void test53()  throws Throwable  {
      DatabaseConfig databaseConfig0 = DatabaseConfig.DEFAULT;
      // Undeclared exception!
      try { 
        DbCompat.setBtreeRecordNumbers(databaseConfig0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test54()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      // Undeclared exception!
      try { 
        DbCompat.setBtreeComparator(secondaryConfig0, (Comparator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test55()  throws Throwable  {
      EnvironmentConfig environmentConfig0 = new EnvironmentConfig();
      DbCompat.setLockDetectModeOldest(environmentConfig0);
      assertTrue(environmentConfig0.getLocking());
  }

  @Test
  public void test56()  throws Throwable  {
      DatabaseConfig databaseConfig0 = DatabaseConfig.DEFAULT;
      boolean boolean0 = DbCompat.getBtreeRecordNumbers(databaseConfig0);
      assertFalse(boolean0);
  }

  @Test
  public void test57()  throws Throwable  {
      SecondaryConfig secondaryConfig0 = new SecondaryConfig();
      DbCompat.getRenumbering(secondaryConfig0);
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      // Undeclared exception!
      try { 
        DbCompat.getRecordNumber(databaseEntry0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.compat.DbCompat", e);
      }
  }

  @Test
  public void test59()  throws Throwable  {
      DatabaseConfig databaseConfig0 = new DatabaseConfig();
      boolean boolean0 = DbCompat.isTypeQueue(databaseConfig0);
      assertFalse(boolean0);
  }
}
