/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 20:01:52 KST 2017
 */

package com.sleepycat.je.log.entry;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.log.FileHeader;
import com.sleepycat.je.log.LogEntryType;
import com.sleepycat.je.tree.LN;
import com.sleepycat.je.tree.MapLN;
import com.sleepycat.je.tree.NameLN;
import com.sleepycat.je.txn.Txn;

import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class DeletedDupLNLogEntry_ESTest1 extends DeletedDupLNLogEntry_ESTest_scaffolding1 {

  @Test
  public void test00()  throws Throwable  {
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(false);
      byte[] byteArray0 = deletedDupLNLogEntry0.getDupKey();
      assertNull(byteArray0);
  }

  @Test
  public void test01()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      LogEntryType logEntryType0 = mapLN0.getLogType();
      byte[] byteArray0 = new byte[0];
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, (LN) mapLN0, (DatabaseId) null, byteArray0, byteArray0, 0L, false, (Txn) null);
      deletedDupLNLogEntry0.getDupKey();
      //  // Unstable assertion: assertEquals(3L, mapLN0.getLastId());
  }

  @Test
  public void test02()  throws Throwable  {
      FileHeader fileHeader0 = new FileHeader();
      LogEntryType logEntryType0 = fileHeader0.getLogType();
      NameLN nameLN0 = new NameLN((DatabaseId) null);
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = new byte[6];
      Txn txn0 = new Txn();
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, (LN) nameLN0, (DatabaseId) null, byteArray0, byteArray1, (long) (byte)19, true, txn0);
      //  // Unstable assertion: assertEquals(1L, deletedDupLNLogEntry0.getNodeId());
  }

  @Test
  public void test03()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DUP_BIN_DELTA;
      LN lN0 = new LN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[1];
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, lN0, databaseId0, byteArray0, byteArray0, (long) (byte)31, true, (Txn) null);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("DupBINDelta/0");
      // Undeclared exception!
      try { 
        deletedDupLNLogEntry0.writeToLog(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DUP_BIN_DELTA;
      LN lN0 = new LN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[1];
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, lN0, databaseId0, byteArray0, byteArray0, (long) (byte)55, false, (Txn) null);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("<com.sleepycat.je.tree.LN/0");
      CharBuffer charBuffer0 = mS949_0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = mS949_0.encode(charBuffer0);
      deletedDupLNLogEntry0.readEntry(byteBuffer1, 1, (byte)0, false);
      // Undeclared exception!
      try { 
        deletedDupLNLogEntry0.writeToLog(byteBuffer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test05()  throws Throwable  {
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(true);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("1!$B");
      // Undeclared exception!
      try { 
        deletedDupLNLogEntry0.readEntry(byteBuffer0, 832, (byte)25, false);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(true);
      // Undeclared exception!
      try { 
        deletedDupLNLogEntry0.readEntry((ByteBuffer) null, 8, (byte)0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(true);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("tOD@Xt<I");
      // Undeclared exception!
      try { 
        deletedDupLNLogEntry0.readEntry(byteBuffer0, 172, (byte) (-7), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(false);
      // Undeclared exception!
      try { 
        deletedDupLNLogEntry0.getLogSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_NAMELN;
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[6];
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = null;
      try {
        deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, (LN) null, databaseId0, byteArray0, byteArray0, 3701L, false, (Txn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DUP_BIN_DELTA;
      LN lN0 = new LN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[1];
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, lN0, databaseId0, byteArray0, byteArray0, (long) (byte)31, true, (Txn) null);
      byte[] byteArray1 = deletedDupLNLogEntry0.getDupKey();
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test
  public void test11()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DUP_BIN_DELTA;
      LN lN0 = new LN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[1];
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, lN0, databaseId0, byteArray0, byteArray0, (long) (byte)31, true, (Txn) null);
      int int0 = deletedDupLNLogEntry0.getLogSize();
      assertEquals(23, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(true);
      // Undeclared exception!
      try { 
        deletedDupLNLogEntry0.dumpEntry((StringBuffer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DUP_BIN_DELTA;
      LN lN0 = new LN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[1];
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, lN0, databaseId0, byteArray0, byteArray0, (long) (byte)31, true, (Txn) null);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("Environment was opened for read-write access.");
      deletedDupLNLogEntry0.writeToLog(byteBuffer0);
      assertEquals(22, byteBuffer0.remaining());
  }

  @Test
  public void test14()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DUP_BIN_DELTA;
      LN lN0 = new LN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[1];
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, lN0, databaseId0, byteArray0, byteArray0, (long) (byte)31, true, (Txn) null);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      deletedDupLNLogEntry0.dumpEntry(stringBuffer0, false);
      assertEquals("<ln><node>0</node></ln><dbId id=\"0\"/><key v=\"0 \"/><key v=\"0 \"/>", stringBuffer0.toString());
      assertEquals("<ln><node>0</node></ln><dbId id=\"0\"/><key v=\"0 \"/><key v=\"0 \"/>", stringWriter0.toString());
  }
}
