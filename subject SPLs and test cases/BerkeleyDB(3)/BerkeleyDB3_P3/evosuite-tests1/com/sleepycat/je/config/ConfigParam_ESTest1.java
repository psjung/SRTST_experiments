/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 19:14:18 KST 2017
 */

package com.sleepycat.je.config;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class ConfigParam_ESTest1 extends ConfigParam_ESTest_scaffolding1 {

  @Test
  public void test00()  throws Throwable  {
      ConfigParam configParam0 = new ConfigParam("X0!9Y/;``:c", "X0!9Y/;``:c", true, "X0!9Y/;``:c");
      assertEquals("X0!9Y/;``:c", configParam0.toString());
      assertEquals("X0!9Y/;``:c", configParam0.getName());
      
      configParam0.name = "X0!9Y/;``:c";
      configParam0.name = "X0!9Y/;``:c";
      configParam0.name = null;
      configParam0.toString();
      assertTrue(configParam0.isMutable());
      assertEquals("X0!9Y/;``:c", configParam0.getDescription());
      assertEquals("X0!9Y/;``:c", configParam0.getDefault());
  }

  @Test
  public void test01()  throws Throwable  {
      ConfigParam configParam0 = new ConfigParam("D=Zk2xCj5<Xf", "D=Zk2xCj5<Xf", false, "D=Zk2xCj5<Xf");
      boolean boolean0 = configParam0.isMutable();
      assertEquals("D=Zk2xCj5<Xf", configParam0.getName());
      assertEquals("D=Zk2xCj5<Xf", configParam0.getDescription());
      assertFalse(boolean0);
      assertEquals("D=Zk2xCj5<Xf", configParam0.getDefault());
  }

  @Test
  public void test02()  throws Throwable  {
      ConfigParam configParam0 = new ConfigParam(";", "I<t{P$hLS#<;R,", true, "I<t{P$hLS#<;R,");
      assertEquals(";", configParam0.toString());
      
      configParam0.name = "h(wtcfAy7RZLur=V?ZY";
      configParam0.name = "je.log.fileMax";
      configParam0.name = null;
      String string0 = configParam0.getName();
      assertEquals("I<t{P$hLS#<;R,", configParam0.getDescription());
      assertTrue(configParam0.isMutable());
      assertEquals("I<t{P$hLS#<;R,", configParam0.getDefault());
      assertNull(string0);
  }

  @Test
  public void test03()  throws Throwable  {
      ConfigParam configParam0 = new ConfigParam("L2%_=XO>'%TL)(h3", "L2%_=XO>'%TL)(h3", true, (String) null);
      String string0 = configParam0.getDescription();
      assertNull(string0);
      assertTrue(configParam0.isMutable());
      assertEquals("L2%_=XO>'%TL)(h3", configParam0.getName());
      assertEquals("L2%_=XO>'%TL)(h3", configParam0.getDefault());
  }

  @Test
  public void test04()  throws Throwable  {
      ConfigParam configParam0 = new ConfigParam("N<O`,>CG\"", (String) null, true, "+3bcRV-vW)4j?}fTD(J");
      String string0 = configParam0.getDefault();
      assertEquals("N<O`,>CG\"", configParam0.getName());
      assertTrue(configParam0.isMutable());
      assertNull(string0);
      assertEquals("+3bcRV-vW)4j?}fTD(J", configParam0.getDescription());
  }

  @Test
  public void test05()  throws Throwable  {
      ConfigParam configParam0 = new ConfigParam("dbx,@egc(", "dbx,@egc(", true, "dbx,@egc(");
      configParam0.name = "dbx,@egc(";
      configParam0.validate();
      assertEquals("dbx,@egc(", configParam0.getDescription());
      assertEquals("dbx,@egc(", configParam0.getName());
      assertTrue(configParam0.isMutable());
      assertEquals("dbx,@egc(", configParam0.getDefault());
  }

  @Test
  public void test06()  throws Throwable  {
      ConfigParam configParam0 = new ConfigParam("L2%_=XO>'%TL)(h3", "L2%_=XO>'%TL)(h3", true, (String) null);
      assertEquals("L2%_=XO>'%TL)(h3", configParam0.getName());
      
      configParam0.name = null;
      String string0 = configParam0.getDefault();
      assertEquals("L2%_=XO>'%TL)(h3", string0);
      assertTrue(configParam0.isMutable());
      assertNotNull(string0);
  }

  @Test
  public void test07()  throws Throwable  {
      ConfigParam configParam0 = null;
      try {
        configParam0 = new ConfigParam("", "", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  A configuration parameter name can't be null or 0 length
         //
         assertThrownBy("com.sleepycat.je.config.ConfigParam", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      ConfigParam configParam0 = new ConfigParam("6w&^4T-@aC.gBa,v", "6w&^4T-@aC.gBa,v", true, "6w&^4T-@aC.gBa,v");
      String string0 = configParam0.getName();
      assertTrue(configParam0.isMutable());
      assertEquals("6w&^4T-@aC.gBa,v", configParam0.getDefault());
      assertEquals("6w&^4T-@aC.gBa,v", string0);
      assertNotNull(string0);
      assertEquals("6w&^4T-@aC.gBa,v", configParam0.getDescription());
  }

  @Test
  public void test09()  throws Throwable  {
      ConfigParam configParam0 = new ConfigParam("# Transactions have the Serializable (Degree 3) isolation level.  The\n# default is false, which implies the Repeatable Read isolation level.", "# Transactions have the Serializable (Degree 3) isolation level.  The\n# default is false, which implies the Repeatable Read isolation level.", true, (String) null);
      configParam0.validateValue((String) null);
      assertEquals("# Transactions have the Serializable (Degree 3) isolation level.  The\n# default is false, which implies the Repeatable Read isolation level.", configParam0.getDefault());
      assertTrue(configParam0.isMutable());
      assertEquals("# Transactions have the Serializable (Degree 3) isolation level.  The\n# default is false, which implies the Repeatable Read isolation level.", configParam0.getName());
  }

  @Test
  public void test10()  throws Throwable  {
      ConfigParam configParam0 = new ConfigParam("dbx,@egc(", "dbx,@egc(", true, "dbx,@egc(");
      configParam0.name = "dbx,@egc(";
      configParam0.name = "dbx,@egc(";
      configParam0.name = "";
      try { 
        configParam0.validate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  A configuration parameter name can't be null or 0 length
         //
         assertThrownBy("com.sleepycat.je.config.ConfigParam", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ConfigParam configParam0 = null;
      try {
        configParam0 = new ConfigParam((String) null, (String) null, true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  A configuration parameter name can't be null or 0 length
         //
         assertThrownBy("com.sleepycat.je.config.ConfigParam", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      ConfigParam configParam0 = new ConfigParam(";", "I<t{P$hLS#<;R,", true, "I<t{P$hLS#<;R,");
      String string0 = configParam0.getDescription();
      assertTrue(configParam0.isMutable());
      assertEquals("I<t{P$hLS#<;R,", string0);
      assertEquals(";", configParam0.toString());
      assertEquals("I<t{P$hLS#<;R,", configParam0.getDefault());
  }

  @Test
  public void test13()  throws Throwable  {
      ConfigParam configParam0 = new ConfigParam("X0!9Y/;``:c", "X0!9Y/;``:c", true, "X0!9Y/;``:c");
      String string0 = configParam0.toString();
      assertTrue(configParam0.isMutable());
      assertEquals("X0!9Y/;``:c", string0);
      assertEquals("X0!9Y/;``:c", configParam0.getDescription());
      assertEquals("X0!9Y/;``:c", configParam0.getDefault());
      assertNotNull(string0);
      assertEquals("X0!9Y/;``:c", configParam0.getName());
  }

  @Test
  public void test14()  throws Throwable  {
      ConfigParam configParam0 = new ConfigParam("dbx,@egc(", "dbx,@egc(", true, "dbx,@egc(");
      configParam0.getExtraDescription();
      assertTrue(configParam0.isMutable());
      assertEquals("dbx,@egc(", configParam0.getName());
      assertEquals("dbx,@egc(", configParam0.getDefault());
      assertEquals("dbx,@egc(", configParam0.getDescription());
  }

  @Test
  public void test15()  throws Throwable  {
      ConfigParam configParam0 = new ConfigParam(";", "I<t{P$hLS#<;R,", true, "I<t{P$hLS#<;R,");
      boolean boolean0 = configParam0.isMutable();
      assertEquals(";", configParam0.getName());
      assertEquals("I<t{P$hLS#<;R,", configParam0.getDescription());
      assertTrue(boolean0);
      assertEquals("I<t{P$hLS#<;R,", configParam0.getDefault());
  }
}
