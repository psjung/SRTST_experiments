/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 19:04:59 KST 2017
 */

package com.sleepycat.je.cleaner;

import static org.junit.Assert.assertNull;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.tree.DupCountLN;
import com.sleepycat.je.tree.LN;
import com.sleepycat.je.tree.MapLN;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class LNInfo_ESTest1 extends LNInfo_ESTest_scaffolding1 {

  @Test
  public void test00()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId((-1));
      byte[] byteArray0 = new byte[3];
      LNInfo lNInfo0 = new LNInfo((LN) null, databaseId0, byteArray0, byteArray0);
      LN lN0 = lNInfo0.getLN();
      assertNull(lN0);
  }

  @Test
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LN lN0 = new LN(databaseEntry0);
      DatabaseId databaseId0 = new DatabaseId();
      LNInfo lNInfo0 = new LNInfo(lN0, databaseId0, byteArray0, byteArray0);
      LN lN1 = lNInfo0.getLN();
      //  // Unstable assertion: assertEquals(31L, lN1.getLastId());
  }

  @Test
  public void test02()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      byte[] byteArray0 = new byte[0];
      LNInfo lNInfo0 = new LNInfo((LN) mapLN0, (DatabaseId) null, byteArray0, byteArray0);
      lNInfo0.getKey();
      //  // Unstable assertion: assertEquals(28L, mapLN0.getLastId());
  }

  @Test
  public void test03()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      byte[] byteArray0 = new byte[0];
      LNInfo lNInfo0 = new LNInfo((LN) mapLN0, (DatabaseId) null, byteArray0, byteArray0);
      lNInfo0.getDupKey();
      //  // Unstable assertion: assertEquals(25L, mapLN0.getLastId());
  }

  @Test
  public void test04()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      byte[] byteArray0 = new byte[0];
      LNInfo lNInfo0 = new LNInfo((LN) mapLN0, (DatabaseId) null, byteArray0, byteArray0);
      lNInfo0.getDbId();
      //  // Unstable assertion: assertEquals(22L, mapLN0.getLastId());
  }

  @Test
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LN lN0 = new LN(databaseEntry0);
      DatabaseId databaseId0 = new DatabaseId();
      LNInfo lNInfo0 = new LNInfo(lN0, databaseId0, byteArray0, byteArray0);
      lNInfo0.getDbId();
      //  // Unstable assertion: assertEquals(19L, lN0.getNodeId());
      //  // Unstable assertion: assertEquals(19L, lN0.getLastId());
  }

  @Test
  public void test06()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN((-1709));
      DatabaseId databaseId0 = new DatabaseId((-1709));
      byte[] byteArray0 = new byte[1];
      LNInfo lNInfo0 = new LNInfo((LN) dupCountLN0, databaseId0, byteArray0, byteArray0);
      lNInfo0.getDbId();
      //  // Unstable assertion: assertEquals(16L, dupCountLN0.getLastId());
      //  // Unstable assertion: assertEquals(16L, dupCountLN0.getNodeId());
  }

  @Test
  public void test07()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[2];
      LNInfo lNInfo0 = new LNInfo((LN) mapLN0, (DatabaseId) null, byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals(13L, mapLN0.getLastId());
  }

  @Test
  public void test08()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      DatabaseId databaseId0 = new DatabaseId(3240);
      byte[] byteArray0 = new byte[9];
      LNInfo lNInfo0 = new LNInfo((LN) mapLN0, databaseId0, byteArray0, byteArray0);
      lNInfo0.getKey();
      //  // Unstable assertion: assertEquals(10L, mapLN0.getLastId());
  }

  @Test
  public void test09()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      byte[] byteArray0 = new byte[0];
      LNInfo lNInfo0 = new LNInfo((LN) mapLN0, (DatabaseId) null, byteArray0, byteArray0);
      MapLN mapLN1 = (MapLN)lNInfo0.getLN();
      //  // Unstable assertion: assertEquals(7L, mapLN1.getLastId());
  }

  @Test
  public void test10()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      DatabaseId databaseId0 = new DatabaseId(3240);
      byte[] byteArray0 = new byte[9];
      LNInfo lNInfo0 = new LNInfo((LN) mapLN0, databaseId0, byteArray0, byteArray0);
      lNInfo0.getDupKey();
      //  // Unstable assertion: assertEquals(4L, mapLN0.getLastId());
  }

  @Test
  public void test11()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      DatabaseId databaseId0 = new DatabaseId(3240);
      byte[] byteArray0 = new byte[9];
      LNInfo lNInfo0 = new LNInfo((LN) mapLN0, databaseId0, byteArray0, byteArray0);
      lNInfo0.getDbId();
      //  // Unstable assertion: assertEquals(1L, mapLN0.getLastId());
  }
}
