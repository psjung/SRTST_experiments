/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 20:43:12 KST 2017
 */

package com.sleepycat.je.tree;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.File;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Map;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.EnvironmentConfig;
import com.sleepycat.je.cleaner.FileSummary;
import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.dbi.EnvironmentImpl;
import com.sleepycat.je.dbi.INList;
import com.sleepycat.je.log.LogEntryType;
import com.sleepycat.je.txn.Txn;

import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class LN_ESTest1 extends LN_ESTest_scaffolding1 {

  @Test
  public void test00()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      LogEntryType logEntryType0 = mapLN0.getTransactionalLogType();
      assertTrue(logEntryType0.isNodeType());
  }

  @Test
  public void test01()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      LogEntryType logEntryType0 = mapLN0.getLogType();
      assertTrue(logEntryType0.isNodeType());
  }

  @Test
  public void test02()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      byte[] byteArray0 = nameLN0.getData();
      assertNull(byteArray0);
  }

  @Test
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      LN lN0 = new LN(databaseEntry0);
      lN0.getData();
      //  // Unstable assertion: assertEquals(724L, lN0.getNodeId());
  }

  @Test
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      LN lN0 = new LN(databaseEntry0);
      lN0.copyData();
      //  // Unstable assertion: assertEquals(699L, lN0.getNodeId());
  }

  @Test
  public void test05()  throws Throwable  {
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      MapLN mapLN0 = new MapLN();
      byte[] byteArray0 = new byte[6];
      Txn txn0 = new Txn();
      // Undeclared exception!
      try { 
        mapLN0.delete(databaseImpl0, byteArray0, byteArray0, (byte)40, txn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.LN", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      databaseEntry0.setPartial(true);
      databaseEntry0.setPartialOffset((byte)26);
      LN lN0 = new LN(databaseEntry0);
      //  // Unstable assertion: assertEquals(626L, lN0.getNodeId());
  }

  @Test
  public void test08()  throws Throwable  {
      LN lN0 = new LN();
      long long0 = 0L;
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[1];
      Txn txn0 = new Txn();
      // Undeclared exception!
      try { 
        lN0.modify(byteArray0, databaseImpl0, byteArray0, (byte) (-93), txn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.LN", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      dupCountLN0.dumpLogAdditional(stringBuffer0, true);
      assertEquals(16, stringBuffer0.capacity());
  }

  @Test
  public void test11()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(26);
      NameLN nameLN0 = new NameLN(databaseId0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("");
      // Undeclared exception!
      try { 
        nameLN0.writeToLog(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("<com.sleepycat.je.tree.MapLN/0");
      // Undeclared exception!
      try { 
        mapLN0.writeToLog(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      // Undeclared exception!
      try { 
        mapLN0.readFromLog((ByteBuffer) null, (byte)77);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test15()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN();
      // Undeclared exception!
      try { 
        dupCountLN0.getLogSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.LogUtils", e);
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId(227);
      NameLN nameLN0 = new NameLN(databaseId0);
      // Undeclared exception!
      try { 
        nameLN0.dumpString(227, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 227
         //
         assertThrownBy("java.lang.String", e);
      }
  }

  @Test
  public void test17()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      // Undeclared exception!
      try { 
        nameLN0.dumpLog((StringBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.LN", e);
      }
  }

  @Test
  public void test18()  throws Throwable  {
      LN lN0 = new LN();
      // Undeclared exception!
      try { 
        lN0.copyData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.LN", e);
      }
  }

  @Test
  public void test19()  throws Throwable  {
      LN lN0 = null;
      try {
        lN0 = new LN((DatabaseEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.LN", e);
      }
  }

  @Test
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte) (-51), (int) (byte) (-82));
      LN lN0 = null;
      try {
        lN0 = new LN(databaseEntry0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.LN", e);
      }
  }

  @Test
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte)32, (int) (byte)32);
      LN lN0 = null;
      try {
        lN0 = new LN(databaseEntry0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.lang.System", e);
      }
  }

  @Test
  public void test22()  throws Throwable  {
      LN lN0 = new LN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("<com.sleepycat.je.tree.LN/0");
      lN0.readFromLog(byteBuffer0, (byte) (-62));
      assertTrue(byteBuffer0.hasArray());
  }

  @Test
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      LN lN0 = new LN(byteArray0);
      lN0.dumpString((byte)0, true);
      //  // Unstable assertion: assertEquals(437L, lN0.getLastId());
  }

  @Test
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      LN lN0 = new LN(byteArray0);
      boolean boolean0 = lN0.isDeleted();
      //  // Unstable assertion: assertEquals(393L, lN0.getLastId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      LN lN0 = new LN();
      boolean boolean0 = lN0.isDeleted();
      assertTrue(boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      LN lN0 = new LN();
      String string0 = lN0.endTag();
      assertEquals("</ln>", string0);
  }

  @Test
  public void test27()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LN lN0 = new LN(databaseEntry0);
      lN0.beginTag();
      //  // Unstable assertion: assertEquals(390L, lN0.getLastId());
  }

  @Test
  public void test28()  throws Throwable  {
      LN lN0 = new LN();
      LogEntryType logEntryType0 = lN0.getLogType();
      assertTrue(logEntryType0.isNodeType());
  }

  @Test
  public void test29()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(1073741824);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      dupCountLN0.dumpLog(stringBuffer0, false);
      //  // Unstable assertion: assertEquals(142, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(362L, dupCountLN0.getLastId());
  }

  @Test
  public void test30()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      NameLN nameLN0 = new NameLN(databaseId0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("je.cleaner.trackDetail");
      nameLN0.readFromLog(byteBuffer0, (byte) (-30));
      // Undeclared exception!
      try { 
        nameLN0.readFromLog(byteBuffer0, (byte)40);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test31()  throws Throwable  {
      LN lN0 = new LN();
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("V~y*p\"]+X?!G/;?");
      lN0.writeToLog(byteBuffer0);
      assertFalse(lN0.logEntryIsTransactional());
  }

  @Test
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte)1, (int) (byte)0);
      LN lN0 = new LN(databaseEntry0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("# If true, create the environment read only.");
      lN0.writeToLog(byteBuffer0);
      //  // Unstable assertion: assertEquals(13, byteBuffer0.position());
      //  // Unstable assertion: assertEquals(310L, lN0.getLastId());
  }

  @Test
  public void test33()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(3132);
      byte[] byteArray0 = dupCountLN0.copyData();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray1 = new byte[6];
      Txn txn0 = new Txn();
      // Undeclared exception!
      try { 
        dupCountLN0.modify(byteArray0, databaseImpl0, byteArray1, (byte) (-25), txn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.LN", e);
      }
  }

  @Test
  public void test34()  throws Throwable  {
      LN lN0 = new LN();
      String string0 = lN0.toString();
      assertEquals("<ln>\n  <node>0</node>\n</ln>", string0);
  }

  @Test
  public void test35()  throws Throwable  {
      LN lN0 = new LN();
      String string0 = lN0.dumpString(2, false);
      assertEquals("    <node>0</node>\n", string0);
  }

  @Test
  public void test36()  throws Throwable  {
      LN lN0 = new LN();
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      // Undeclared exception!
      try { 
        lN0.delete(databaseImpl0, byteArray0, byteArray0, (-7L), txn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.LN", e);
      }
  }

  @Test
  public void test37()  throws Throwable  {
      LN lN0 = new LN();
      assertTrue(lN0.isDeleted());
      
      int int0 = lN0.getLogSize();
      assertEquals(9, int0);
  }

  @Test
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte)1, (int) (byte)0);
      LN lN0 = new LN(databaseEntry0);
      int int0 = lN0.getLogSize();
      //  // Unstable assertion: assertEquals(154L, lN0.getLastId());
      //  // Unstable assertion: assertEquals(13, int0);
  }

  @Test
  public void test39()  throws Throwable  {
      LN lN0 = new LN((byte[]) null);
      assertEquals(0L, lN0.getTransactionId());
  }

  @Test
  public void test40()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LN lN0 = new LN(databaseEntry0);
      boolean boolean0 = lN0.countAsObsoleteWhenLogged();
      //  // Unstable assertion: assertEquals(149L, lN0.getLastId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test41()  throws Throwable  {
      FileSummary fileSummary0 = new FileSummary();
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN(fileSummary0);
      fileSummaryLN0.rebuildINList((INList) null);
      //  // Unstable assertion: assertEquals(129L, fileSummaryLN0.getLastId());
  }

  @Test
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte)1, (int) (byte)0);
      LN lN0 = new LN(databaseEntry0);
      boolean boolean0 = lN0.canBeAncestor(true);
      //  // Unstable assertion: assertEquals(108L, lN0.getLastId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test43()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(1073741824);
      boolean boolean0 = dupCountLN0.isSoughtNode(1073741824, false);
      //  // Unstable assertion: assertEquals(87L, dupCountLN0.getLastId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte)1, (int) (byte)0);
      LN lN0 = new LN(databaseEntry0);
      long long0 = lN0.getTransactionId();
      //  // Unstable assertion: assertEquals(65L, lN0.getLastId());
      //  // Unstable assertion: assertEquals(0L, long0);
  }

  @Test
  public void test45()  throws Throwable  {
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      fileSummaryLN0.makeDeleted();
      //  // Unstable assertion: assertEquals(64L, fileSummaryLN0.getLastId());
  }

  @Test
  public void test46()  throws Throwable  {
      LN lN0 = new LN();
      LogEntryType logEntryType0 = lN0.getTransactionalLogType();
      assertTrue(logEntryType0.isNodeType());
  }

  @Test
  public void test47()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      LN lN0 = new LN(databaseEntry0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      lN0.dumpLog(stringBuffer0, true);
      //  // Unstable assertion: assertEquals(34, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(54L, lN0.getNodeId());
  }

  @Test
  public void test48()  throws Throwable  {
      LN lN0 = new LN();
      DatabaseId databaseId0 = new DatabaseId((-2829));
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        lN0.logProvisional((EnvironmentImpl) null, databaseId0, byteArray0, (byte)85);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.tree.LN", e);
      }
  }

  @Test
  public void test50()  throws Throwable  {
      DatabaseId databaseId0 = new DatabaseId();
      NameLN nameLN0 = new NameLN(databaseId0);
      nameLN0.getData();
      //  // Unstable assertion: assertEquals(25L, nameLN0.getLastId());
  }

  @Test
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte)1, (int) (byte)0);
      LN lN0 = new LN(databaseEntry0);
      boolean boolean0 = lN0.logEntryIsTransactional();
      //  // Unstable assertion: assertEquals(1L, lN0.getLastId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test52()  throws Throwable  {
      NameLN nameLN0 = new NameLN();
      nameLN0.addToDirtyMap((Map) null);
      assertEquals("</nameLN>", nameLN0.endTag());
  }

  @Test
  public void test53()  throws Throwable  {
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      boolean boolean0 = fileSummaryLN0.isValidForDelete();
      assertFalse(boolean0);
  }
}
