/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 01:13:18 KST 2017
 */

package com.sleepycat.je.log.entry;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.log.LogEntryType;
import com.sleepycat.je.tree.DBIN;
import com.sleepycat.je.tree.DupCountLN;
import com.sleepycat.je.tree.FileSummaryLN;
import com.sleepycat.je.tree.LN;
import com.sleepycat.je.tree.MapLN;
import com.sleepycat.je.txn.Txn;

import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class DeletedDupLNLogEntry_ESTest2 extends DeletedDupLNLogEntry_ESTest_scaffolding2 {

  @Test
  public void test00()  throws Throwable  {
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(false);
      byte[] byteArray0 = deletedDupLNLogEntry0.getDupKey();
      assertNull(byteArray0);
  }

  @Test
  public void test01()  throws Throwable  {
      DBIN dBIN0 = new DBIN();
      LogEntryType logEntryType0 = dBIN0.getLogType();
      MapLN mapLN0 = new MapLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[5];
      Txn txn0 = new Txn();
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, (LN) mapLN0, databaseId0, byteArray0, byteArray0, (-782L), true, txn0);
      deletedDupLNLogEntry0.getDupKey();
      //  // Unstable assertion: assertEquals(27L, mapLN0.getLastId());
      //  // Unstable assertion: assertEquals(27L, dBIN0.getLastId());
  }

  @Test
  public void test02()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DEL_DUPLN_TRANSACTIONAL;
      LN lN0 = new LN((byte[]) null);
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, lN0, databaseId0, (byte[]) null, byteArray0, (-1238L), false, txn0);
      //  // Unstable assertion: assertEquals(25L, deletedDupLNLogEntry0.getNodeId());
  }

  @Test
  public void test03()  throws Throwable  {
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(false);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode(",CwNUtDyCG:J@!OMr0");
      // Undeclared exception!
      try { 
        deletedDupLNLogEntry0.writeToLog(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      MapLN mapLN0 = new MapLN();
      LogEntryType logEntryType0 = mapLN0.getLogType();
      DatabaseId databaseId0 = new DatabaseId(0);
      byte[] byteArray0 = new byte[3];
      Txn txn0 = new Txn();
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, (LN) mapLN0, databaseId0, byteArray0, byteArray0, (-1907L), true, txn0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("");
      // Undeclared exception!
      try { 
        deletedDupLNLogEntry0.readEntry(byteBuffer0, 131072, (byte)1, true);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test05()  throws Throwable  {
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(false);
      // Undeclared exception!
      try { 
        deletedDupLNLogEntry0.readEntry((ByteBuffer) null, 0, (byte)1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(true);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("JWnB[HB!(M9Y 1Mo5C");
      // Undeclared exception!
      try { 
        deletedDupLNLogEntry0.readEntry(byteBuffer0, 588, (byte)55, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(true);
      // Undeclared exception!
      try { 
        deletedDupLNLogEntry0.getLogSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test08()  throws Throwable  {
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(false);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        deletedDupLNLogEntry0.dumpEntry(stringBuffer0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_LN;
      DatabaseId databaseId0 = new DatabaseId(0);
      byte[] byteArray0 = new byte[3];
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = null;
      try {
        deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, (LN) null, databaseId0, byteArray0, byteArray0, (-663L), true, (Txn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(1);
      LogEntryType logEntryType0 = dupCountLN0.getLogType();
      DatabaseId databaseId0 = new DatabaseId((-976));
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, (LN) dupCountLN0, databaseId0, byteArray0, byteArray0, (long) (-976), true, txn0);
      deletedDupLNLogEntry0.getDupKey();
      //  // Unstable assertion: assertEquals(7L, deletedDupLNLogEntry0.getNodeId());
  }

  @Test
  public void test11()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_TXN_ABORT;
      byte[] byteArray0 = new byte[3];
      LN lN0 = new LN();
      DatabaseId databaseId0 = new DatabaseId();
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, lN0, databaseId0, byteArray0, byteArray0, (long) (byte) (-42), false, (Txn) null);
      int int0 = deletedDupLNLogEntry0.getLogSize();
      assertEquals(27, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(false);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode(",CwNUtDyCG:J@!OMr0");
      deletedDupLNLogEntry0.readEntry(byteBuffer0, 0, (byte)1, false);
      assertEquals(18, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
  }

  @Test
  public void test13()  throws Throwable  {
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode(",CwNUtDyCG:J@!OMr0");
      LogEntryType logEntryType0 = LogEntryType.LOG_BIN;
      FileSummaryLN fileSummaryLN0 = new FileSummaryLN();
      DatabaseId databaseId0 = new DatabaseId((int) (byte)0);
      byte[] byteArray0 = new byte[3];
      Txn txn0 = new Txn();
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, (LN) fileSummaryLN0, databaseId0, byteArray0, byteArray0, (long) (byte)0, true, txn0);
      // Undeclared exception!
      try { 
        deletedDupLNLogEntry0.writeToLog(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.HeapByteBuffer", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      DupCountLN dupCountLN0 = new DupCountLN(1);
      LogEntryType logEntryType0 = dupCountLN0.getLogType();
      DatabaseId databaseId0 = new DatabaseId((-976));
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      DeletedDupLNLogEntry deletedDupLNLogEntry0 = new DeletedDupLNLogEntry(logEntryType0, (LN) dupCountLN0, databaseId0, byteArray0, byteArray0, (long) (-976), true, txn0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = deletedDupLNLogEntry0.dumpEntry(stringBuffer0, false);
      //  // Unstable assertion: assertEquals("<dupCountLN><node>1</node><data></data><count v=\"1\"/></dupCountLN><dbId id=\"-976\"/><key v=\"\"/><DbLsn val=\"0xffffffff/0xfffffc30\"/><knownDeleted val=\"true\"/><txn id=\"0__Txn\"><DbLsn val=\"0xffffffff/0xffffffff\"/></txn><key v=\"\"/>", stringBuffer1.toString());
  }
}
