/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 21:51:33 KST 2017
 */

package com.sleepycat.je.cleaner;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sleepycat.je.cleaner.TrackedFileSummary;
import com.sleepycat.je.cleaner.UtilizationTracker;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class TrackedFileSummary_ESTest2 extends TrackedFileSummary_ESTest_scaffolding2 {

  @Test
  public void test00()  throws Throwable  {
      TrackedFileSummary trackedFileSummary0 = new TrackedFileSummary((UtilizationTracker) null, 0, true);
      trackedFileSummary0.getFileNumber();
      assertTrue(trackedFileSummary0.getAllowFlush());
  }

  @Test
  public void test01()  throws Throwable  {
      TrackedFileSummary trackedFileSummary0 = new TrackedFileSummary((UtilizationTracker) null, 1164L, false);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("# Number of times to retry a compression run if a deadlock occurs.");
      trackedFileSummary0.readFromLog(byteBuffer0, (byte)92);
      // Undeclared exception!
      try { 
        trackedFileSummary0.hook169();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.cleaner.TrackedFileSummary", e);
      }
  }

  @Test
  public void test02()  throws Throwable  {
      TrackedFileSummary trackedFileSummary0 = new TrackedFileSummary((UtilizationTracker) null, 1164L, false);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("# Number of times to retry a compression run if a deadlock occurs.");
      trackedFileSummary0.readFromLog(byteBuffer0, (byte)92);
      int int0 = trackedFileSummary0.getMemorySize();
      assertEquals(0, int0);
      assertEquals(1164L, trackedFileSummary0.getFileNumber());
      assertTrue(trackedFileSummary0.getAllowFlush());
  }

  @Test
  public void test03()  throws Throwable  {
      TrackedFileSummary trackedFileSummary0 = new TrackedFileSummary((UtilizationTracker) null, 1164L, false);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("# Number of times to retry a compression run if a deadlock occurs.");
      trackedFileSummary0.readFromLog(byteBuffer0, (byte)92);
      trackedFileSummary0.hook168();
      assertTrue(trackedFileSummary0.getAllowFlush());
      assertEquals(1164L, trackedFileSummary0.getFileNumber());
  }

  @Test
  public void test04()  throws Throwable  {
      TrackedFileSummary.TrackedFileSummary_trackObsolete trackedFileSummary_TrackedFileSummary_trackObsolete0 = new TrackedFileSummary.TrackedFileSummary_trackObsolete((TrackedFileSummary) null, (-2398L));
  }

  @Test
  public void test05()  throws Throwable  {
      TrackedFileSummary trackedFileSummary0 = new TrackedFileSummary((UtilizationTracker) null, 67108908L, false);
      TrackedFileSummary trackedFileSummary1 = new TrackedFileSummary((UtilizationTracker) null, 0, false);
      trackedFileSummary1.addTrackedSummary(trackedFileSummary0);
      assertEquals(67108908L, trackedFileSummary0.getFileNumber());
      assertTrue(trackedFileSummary1.getAllowFlush());
  }

  @Test
  public void test06()  throws Throwable  {
      TrackedFileSummary trackedFileSummary0 = new TrackedFileSummary((UtilizationTracker) null, 67108864L, true);
      // Undeclared exception!
      try { 
        trackedFileSummary0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.cleaner.TrackedFileSummary", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      TrackedFileSummary trackedFileSummary0 = new TrackedFileSummary((UtilizationTracker) null, 67108874L, false);
      TrackedFileSummary.TrackedFileSummary_trackObsolete trackedFileSummary_TrackedFileSummary_trackObsolete0 = new TrackedFileSummary.TrackedFileSummary_trackObsolete(trackedFileSummary0, 0);
      trackedFileSummary_TrackedFileSummary_trackObsolete0.execute();
      assertEquals(67108874L, trackedFileSummary0.getFileNumber());
      assertTrue(trackedFileSummary0.getAllowFlush());
  }

  @Test
  public void test08()  throws Throwable  {
      TrackedFileSummary trackedFileSummary0 = new TrackedFileSummary((UtilizationTracker) null, 1161L, false);
      // Undeclared exception!
      try { 
        trackedFileSummary0.addTrackedSummary((TrackedFileSummary) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.cleaner.FileSummary", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      TrackedFileSummary trackedFileSummary0 = new TrackedFileSummary((UtilizationTracker) null, 1164L, false);
      trackedFileSummary0.trackObsolete(0L);
      assertTrue(trackedFileSummary0.getAllowFlush());
      assertEquals(1164L, trackedFileSummary0.getFileNumber());
  }

  @Test
  public void test10()  throws Throwable  {
      TrackedFileSummary trackedFileSummary0 = new TrackedFileSummary((UtilizationTracker) null, 1164L, false);
      boolean boolean0 = trackedFileSummary0.containsObsoleteOffset((-1L));
      assertTrue(trackedFileSummary0.getAllowFlush());
      assertFalse(boolean0);
      assertEquals(1164L, trackedFileSummary0.getFileNumber());
  }

  @Test
  public void test11()  throws Throwable  {
      TrackedFileSummary trackedFileSummary0 = new TrackedFileSummary((UtilizationTracker) null, 67108908L, false);
      trackedFileSummary0.getObsoleteOffsets();
      assertTrue(trackedFileSummary0.getAllowFlush());
      assertEquals(67108908L, trackedFileSummary0.getFileNumber());
  }

  @Test
  public void test12()  throws Throwable  {
      TrackedFileSummary trackedFileSummary0 = new TrackedFileSummary((UtilizationTracker) null, 1164L, false);
      long long0 = trackedFileSummary0.getFileNumber();
      assertEquals(1164L, long0);
      assertTrue(trackedFileSummary0.getAllowFlush());
  }

  @Test
  public void test13()  throws Throwable  {
      TrackedFileSummary trackedFileSummary0 = new TrackedFileSummary((UtilizationTracker) null, 67108864L, false);
      assertTrue(trackedFileSummary0.getAllowFlush());
      
      trackedFileSummary0.setAllowFlush(false);
      boolean boolean0 = trackedFileSummary0.getAllowFlush();
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      TrackedFileSummary trackedFileSummary0 = new TrackedFileSummary((UtilizationTracker) null, 67108864L, false);
      boolean boolean0 = trackedFileSummary0.getAllowFlush();
      assertTrue(boolean0);
      assertEquals(67108864L, trackedFileSummary0.getFileNumber());
  }

  @Test
  public void test15()  throws Throwable  {
      TrackedFileSummary trackedFileSummary0 = new TrackedFileSummary((UtilizationTracker) null, 67108864L, false);
      TrackedFileSummary.TrackedFileSummary_trackObsolete trackedFileSummary_TrackedFileSummary_trackObsolete0 = new TrackedFileSummary.TrackedFileSummary_trackObsolete(trackedFileSummary0, 0);
      trackedFileSummary_TrackedFileSummary_trackObsolete0.hook172();
      assertTrue(trackedFileSummary0.getAllowFlush());
      assertEquals(67108864L, trackedFileSummary0.getFileNumber());
  }

  @Test
  public void test16()  throws Throwable  {
      TrackedFileSummary trackedFileSummary0 = new TrackedFileSummary((UtilizationTracker) null, 67108864L, true);
      // Undeclared exception!
      try { 
        trackedFileSummary0.trackObsolete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.cleaner.TrackedFileSummary$TrackedFileSummary_trackObsolete", e);
      }
  }
}
