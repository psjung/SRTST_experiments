/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 22 01:16:52 KST 2017
 */

package com.sleepycat.je.log.entry;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.dbi.DatabaseId;
import com.sleepycat.je.dbi.DatabaseImpl;
import com.sleepycat.je.log.FileHeader;
import com.sleepycat.je.log.LogEntryType;
import com.sleepycat.je.tree.DupCountLN;
import com.sleepycat.je.tree.LN;
import com.sleepycat.je.tree.MapLN;
import com.sleepycat.je.tree.NameLN;
import com.sleepycat.je.txn.Txn;

import sun.nio.cs.ext.MS949;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class LNLogEntry_ESTest2 extends LNLogEntry_ESTest_scaffolding2 {

  @Test
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      lNLogEntry0.isTransactional();
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
  }

  @Test
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      lNLogEntry0.getNodeId();
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
  }

  @Test
  public void test02()  throws Throwable  {
      Class<String> class0 = String.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, true);
      lNLogEntry0.getMainItem();
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
      assertTrue(lNLogEntry0.isTransactional());
  }

  @Test
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, true);
      lNLogEntry0.getLogType();
      assertTrue(lNLogEntry0.isTransactional());
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
  }

  @Test
  public void test04()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_IN_DUPDELETE_INFO;
      NameLN nameLN0 = new NameLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[8];
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (long) (byte) (-66), true, (Txn) null);
      lNLogEntry0.getLogType();
      assertEquals((-66L), lNLogEntry0.getAbortLsn());
      assertTrue(lNLogEntry0.getAbortKnownDeleted());
  }

  @Test
  public void test05()  throws Throwable  {
      Class<String> class0 = String.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      lNLogEntry0.getLN();
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
  }

  @Test
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, true);
      lNLogEntry0.getKey();
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
      assertTrue(lNLogEntry0.isTransactional());
  }

  @Test
  public void test07()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_CKPT_START;
      DatabaseId databaseId0 = new DatabaseId(4761);
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[8];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (-2881L), true, txn0);
      lNLogEntry0.getKey();
      //  // Unstable assertion: assertEquals(284L, lNLogEntry0.getNodeId());
  }

  @Test
  public void test08()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DIN;
      NameLN nameLN0 = new NameLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[8];
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (long) (byte) (-66), true, (Txn) null);
      lNLogEntry0.getDupKey();
      assertEquals((-66L), lNLogEntry0.getAbortLsn());
      assertTrue(lNLogEntry0.getAbortKnownDeleted());
  }

  @Test
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, true);
      lNLogEntry0.getDbId();
      assertTrue(lNLogEntry0.isTransactional());
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
  }

  @Test
  public void test10()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_FILESUMMARYLN;
      DatabaseImpl databaseImpl0 = new DatabaseImpl();
      MapLN mapLN0 = new MapLN(databaseImpl0);
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[1];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) mapLN0, databaseId0, byteArray0, (-1068L), false, txn0);
      lNLogEntry0.getDbId();
      //  // Unstable assertion: assertEquals(267L, lNLogEntry0.getNodeId());
  }

  @Test
  public void test11()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_CKPT_START;
      byte[] byteArray0 = new byte[8];
      Txn txn0 = new Txn();
      DupCountLN dupCountLN0 = new DupCountLN((int) (byte) (-78));
      DatabaseId databaseId0 = new DatabaseId(92);
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) dupCountLN0, databaseId0, byteArray0, (long) (byte)16, true, txn0);
      long long0 = lNLogEntry0.getAbortLsn();
      //  // Unstable assertion: assertEquals(256L, lNLogEntry0.getNodeId());
      //  // Unstable assertion: assertEquals(16L, long0);
  }

  @Test
  public void test12()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_CKPT_START;
      DatabaseId databaseId0 = new DatabaseId(4761);
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[8];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (-2881L), true, txn0);
      boolean boolean0 = lNLogEntry0.getAbortKnownDeleted();
      //  // Unstable assertion: assertEquals(246L, lNLogEntry0.getNodeId());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_IN_DUPDELETE_INFO;
      NameLN nameLN0 = new NameLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[8];
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (long) (byte) (-66), true, (Txn) null);
      lNLogEntry0.countAsObsoleteWhenLogged();
      assertEquals((-66L), lNLogEntry0.getAbortLsn());
      assertTrue(lNLogEntry0.getAbortKnownDeleted());
  }

  @Test
  public void test14()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_CKPT_START;
      DatabaseId databaseId0 = new DatabaseId(4761);
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[8];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (long) (byte)10, false, txn0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      lNLogEntry0.dumpEntry(stringBuffer0, false);
      //  // Unstable assertion: assertEquals(286, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(213L, nameLN0.getNodeId());
  }

  @Test
  public void test15()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_CKPT_START;
      DatabaseId databaseId0 = new DatabaseId(4761);
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[8];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (-2881L), false, txn0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("OrDB9FS<p-J~");
      CharBuffer charBuffer0 = mS949_0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = mS949_0.encode(charBuffer0);
      lNLogEntry0.readEntry(byteBuffer1, (byte)0, (byte)0, false);
      //  // Unstable assertion: assertEquals(193L, nameLN0.getLastId());
      //  // Unstable assertion: assertEquals(193L, nameLN0.getNodeId());
  }

  @Test
  public void test16()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_BIN;
      NameLN nameLN0 = new NameLN();
      DatabaseId databaseId0 = new DatabaseId(0);
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (long) 0, true, txn0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("X_vNLt-04]`Ym4");
      // Undeclared exception!
      try { 
        lNLogEntry0.readEntry(byteBuffer0, (-2791), (byte) (-7), true);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test17()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_CKPT_START;
      DatabaseId databaseId0 = new DatabaseId(4761);
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[8];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (long) (byte)10, false, txn0);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("aJod#N$}{Efp");
      // Undeclared exception!
      try { 
        lNLogEntry0.writeToLog(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Class<String> class0 = String.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("#raXC$E=h3");
      // Undeclared exception!
      try { 
        lNLogEntry0.writeToLog(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Class<String> class0 = String.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("");
      // Undeclared exception!
      try { 
        lNLogEntry0.readEntry(byteBuffer0, 2339, (byte)0, false);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Class<String> class0 = String.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      // Undeclared exception!
      try { 
        lNLogEntry0.readEntry((ByteBuffer) null, 0, (byte)0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("");
      // Undeclared exception!
      try { 
        lNLogEntry0.readEntry(byteBuffer0, (-2373), (byte) (-93), true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to com.sleepycat.je.tree.LN
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test22()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, true);
      // Undeclared exception!
      try { 
        lNLogEntry0.postLogWork(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      // Undeclared exception!
      try { 
        lNLogEntry0.marshallOutsideWriteLatch();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test24()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, true);
      // Undeclared exception!
      try { 
        lNLogEntry0.getTxnId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Class<String> class0 = String.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, true);
      // Undeclared exception!
      try { 
        lNLogEntry0.getLogSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test26()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      // Undeclared exception!
      try { 
        lNLogEntry0.getDupKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test27()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        lNLogEntry0.dumpEntry(stringBuffer0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test28()  throws Throwable  {
      Class<String> class0 = String.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      // Undeclared exception!
      try { 
        lNLogEntry0.countAsObsoleteWhenLogged();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test29()  throws Throwable  {
      FileHeader fileHeader0 = new FileHeader();
      LogEntryType logEntryType0 = fileHeader0.getLogType();
      DatabaseId databaseId0 = new DatabaseId(0);
      byte[] byteArray0 = new byte[5];
      LNLogEntry lNLogEntry0 = null;
      try {
        lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) null, databaseId0, byteArray0, (long) (byte)0, false, (Txn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test30()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_CKPT_START;
      DatabaseId databaseId0 = new DatabaseId(4761);
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[8];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (-2881L), false, txn0);
      lNLogEntry0.getUserTxn();
      //  // Unstable assertion: assertEquals(173L, lNLogEntry0.getNodeId());
  }

  @Test
  public void test31()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      lNLogEntry0.getUserTxn();
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
  }

  @Test
  public void test32()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_CKPT_START;
      DatabaseId databaseId0 = new DatabaseId(4761);
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[8];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (-2881L), false, txn0);
      lNLogEntry0.getTxnId();
      //  // Unstable assertion: assertEquals(163L, lNLogEntry0.getNodeId());
  }

  @Test
  public void test33()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      lNLogEntry0.getTxnId();
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
  }

  @Test
  public void test34()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_LN;
      byte[] byteArray0 = new byte[8];
      LN lN0 = new LN(byteArray0);
      DatabaseId databaseId0 = new DatabaseId();
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, lN0, databaseId0, byteArray0, 0L, true, txn0);
      lNLogEntry0.getDupKey();
      //  // Unstable assertion: assertEquals(153L, lNLogEntry0.getNodeId());
  }

  @Test
  public void test35()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_CKPT_START;
      DatabaseId databaseId0 = new DatabaseId(4761);
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[9];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (long) (byte) (-78), false, txn0);
      int int0 = lNLogEntry0.getLogSize();
      //  // Unstable assertion: assertEquals(117L, lNLogEntry0.getNodeId());
      //  // Unstable assertion: assertEquals(60, int0);
  }

  @Test
  public void test36()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_CKPT_START;
      DatabaseId databaseId0 = new DatabaseId(4761);
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[8];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (-2881L), false, txn0);
      lNLogEntry0.postLogWork((byte)0);
      lNLogEntry0.getUserTxn();
      //  // Unstable assertion: assertEquals(104L, lNLogEntry0.getNodeId());
  }

  @Test
  public void test37()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      lNLogEntry0.postLogWork((-1197L));
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
  }

  @Test
  public void test38()  throws Throwable  {
      Class<String> class0 = String.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, true);
      // Undeclared exception!
      try { 
        lNLogEntry0.getTransactionId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test39()  throws Throwable  {
      Class<String> class0 = String.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      assertFalse(lNLogEntry0.isTransactional());
      
      long long0 = lNLogEntry0.getTransactionId();
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
      assertEquals(0L, long0);
  }

  @Test
  public void test40()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_CKPT_START;
      DatabaseId databaseId0 = new DatabaseId(4761);
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[8];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (-2881L), true, txn0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      lNLogEntry0.dumpEntry(stringBuffer0, true);
      //  // Unstable assertion: assertEquals(286, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(71L, nameLN0.getLastId());
  }

  @Test
  public void test41()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_CKPT_START;
      DatabaseId databaseId0 = new DatabaseId(4761);
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[8];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (long) (byte) (-1), false, txn0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      lNLogEntry0.dumpEntry(stringBuffer0, false);
      //  // Unstable assertion: assertEquals(286, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(39L, nameLN0.getNodeId());
  }

  @Test
  public void test42()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_IN_DUPDELETE_INFO;
      NameLN nameLN0 = new NameLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[8];
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (long) (byte) (-66), true, (Txn) null);
      StringWriter stringWriter0 = new StringWriter((int) (byte)0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      lNLogEntry0.dumpEntry(stringBuffer0, true);
      assertEquals("<nameLN><node>0</node><dbId id=\"0\"/></nameLN><dbId id=\"0\"/><key v=\"0 0 0 0 0 0 0 0 \"/>", stringBuffer0.toString());
      assertTrue(lNLogEntry0.getAbortKnownDeleted());
  }

  @Test
  public void test43()  throws Throwable  {
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode("");
      Class<Integer> class0 = Integer.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, true);
      try { 
        lNLogEntry0.readEntry(byteBuffer0, (byte) (-93), (byte)3, true);
        fail("Expecting exception: DatabaseException");
      
      } catch(DatabaseException e) {
         //
         // java.lang.InstantiationException: java.lang.Integer
         //
         assertThrownBy("com.sleepycat.je.log.entry.LNLogEntry", e);
      }
  }

  @Test
  public void test44()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      MS949 mS949_0 = (MS949)Charset.defaultCharset();
      ByteBuffer byteBuffer0 = mS949_0.encode(" currentLsn=");
      // Undeclared exception!
      try { 
        lNLogEntry0.readEntry(byteBuffer0, 16, (byte)53, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.nio.Buffer", e);
      }
  }

  @Test
  public void test45()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_CKPT_START;
      DatabaseId databaseId0 = new DatabaseId(4761);
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[8];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (-2881L), false, txn0);
      boolean boolean0 = lNLogEntry0.getAbortKnownDeleted();
      //  // Unstable assertion: assertEquals(28L, lNLogEntry0.getNodeId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test46()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_BIN;
      NameLN nameLN0 = new NameLN();
      DatabaseId databaseId0 = new DatabaseId(0);
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (long) 0, true, txn0);
      lNLogEntry0.getKey();
      assertTrue(lNLogEntry0.isTransactional());
      assertTrue(lNLogEntry0.getAbortKnownDeleted());
  }

  @Test
  public void test47()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_TXN_COMMIT;
      LN lN0 = new LN();
      DatabaseId databaseId0 = new DatabaseId((-708));
      byte[] byteArray0 = new byte[2];
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, lN0, databaseId0, byteArray0, 16L, true, (Txn) null);
      lNLogEntry0.countAsObsoleteWhenLogged();
      assertEquals(16L, lNLogEntry0.getAbortLsn());
      assertFalse(lNLogEntry0.isTransactional());
      assertTrue(lNLogEntry0.getAbortKnownDeleted());
  }

  @Test
  public void test48()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DIN;
      NameLN nameLN0 = new NameLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[8];
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (long) (byte) (-66), true, (Txn) null);
      lNLogEntry0.marshallOutsideWriteLatch();
      assertEquals((-66L), lNLogEntry0.getAbortLsn());
      assertTrue(lNLogEntry0.getAbortKnownDeleted());
      assertFalse(lNLogEntry0.isTransactional());
  }

  @Test
  public void test49()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DIN;
      NameLN nameLN0 = new NameLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[8];
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (long) (byte) (-66), true, (Txn) null);
      long long0 = lNLogEntry0.getAbortLsn();
      assertEquals((-66L), long0);
      assertFalse(lNLogEntry0.isTransactional());
      assertTrue(lNLogEntry0.getAbortKnownDeleted());
  }

  @Test
  public void test50()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, false);
      LNLogEntry lNLogEntry1 = (LNLogEntry)lNLogEntry0.clone();
      assertEquals((-1L), lNLogEntry1.getAbortLsn());
      assertFalse(lNLogEntry1.isTransactional());
  }

  @Test
  public void test51()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_BIN;
      NameLN nameLN0 = new NameLN();
      DatabaseId databaseId0 = new DatabaseId(0);
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (long) 0, true, txn0);
      lNLogEntry0.getMainItem();
      assertTrue(lNLogEntry0.isTransactional());
      assertTrue(lNLogEntry0.getAbortKnownDeleted());
  }

  @Test
  public void test52()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_BIN;
      NameLN nameLN0 = new NameLN();
      DatabaseId databaseId0 = new DatabaseId(0);
      byte[] byteArray0 = new byte[0];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (long) 0, true, txn0);
      lNLogEntry0.getLN();
      assertTrue(lNLogEntry0.getAbortKnownDeleted());
      assertTrue(lNLogEntry0.isTransactional());
  }

  @Test
  public void test53()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_CKPT_START;
      DatabaseId databaseId0 = new DatabaseId(4761);
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[9];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (long) (byte) (-78), false, txn0);
      lNLogEntry0.getDbId();
      //  // Unstable assertion: assertEquals(18L, lNLogEntry0.getNodeId());
  }

  @Test
  public void test54()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_DIN;
      NameLN nameLN0 = new NameLN();
      DatabaseId databaseId0 = new DatabaseId();
      byte[] byteArray0 = new byte[8];
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (long) (byte) (-66), true, (Txn) null);
      lNLogEntry0.getLogType();
      assertTrue(lNLogEntry0.getAbortKnownDeleted());
      assertFalse(lNLogEntry0.isTransactional());
      assertEquals((-66L), lNLogEntry0.getAbortLsn());
  }

  @Test
  public void test55()  throws Throwable  {
      LogEntryType logEntryType0 = LogEntryType.LOG_CKPT_START;
      DatabaseId databaseId0 = new DatabaseId(4761);
      NameLN nameLN0 = new NameLN(databaseId0);
      byte[] byteArray0 = new byte[8];
      Txn txn0 = new Txn();
      LNLogEntry lNLogEntry0 = new LNLogEntry(logEntryType0, (LN) nameLN0, databaseId0, byteArray0, (-2881L), false, txn0);
      long long0 = lNLogEntry0.getNodeId();
      //  // Unstable assertion: assertEquals(1L, long0);
  }

  @Test
  public void test56()  throws Throwable  {
      Class<String> class0 = String.class;
      LNLogEntry lNLogEntry0 = new LNLogEntry((Class) class0, true);
      boolean boolean0 = lNLogEntry0.isTransactional();
      assertEquals((-1L), lNLogEntry0.getAbortLsn());
      assertTrue(boolean0);
  }
}
