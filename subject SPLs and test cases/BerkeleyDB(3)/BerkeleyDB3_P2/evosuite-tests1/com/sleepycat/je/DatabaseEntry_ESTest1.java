/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 21 18:33:29 KST 2017
 */

package com.sleepycat.je;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class DatabaseEntry_ESTest1 extends DatabaseEntry_ESTest_scaffolding1 {

  @Test
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      int int0 = databaseEntry0.getSize();
      assertEquals(2, int0);
      assertEquals(0, databaseEntry0.getPartialOffset());
      assertEquals(0, databaseEntry0.getPartialLength());
      assertFalse(databaseEntry0.getPartial());
  }

  @Test
  public void test01()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      databaseEntry0.setSize((-3764));
      int int0 = databaseEntry0.getSize();
      assertEquals((-3764), int0);
  }

  @Test
  public void test02()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      databaseEntry0.setPartialOffset(64);
      int int0 = databaseEntry0.getPartialOffset();
      assertEquals(64, int0);
  }

  @Test
  public void test03()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      databaseEntry0.setPartial((-1), 0, false);
      int int0 = databaseEntry0.getPartialOffset();
      assertEquals((-1), int0);
  }

  @Test
  public void test04()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      databaseEntry0.setPartialLength(467);
      int int0 = databaseEntry0.getPartialLength();
      assertEquals(467, int0);
  }

  @Test
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (-1), (-1));
      databaseEntry0.setPartial((-1), (-968), false);
      int int0 = databaseEntry0.getPartialLength();
      assertEquals((-968), int0);
  }

  @Test
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte) (-49), (int) (byte) (-49));
      databaseEntry0.setPartial(21, (int) (byte) (-49), true);
      boolean boolean0 = databaseEntry0.getPartial();
      assertEquals(-49, databaseEntry0.getPartialLength());
      assertTrue(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      byte[] byteArray0 = new byte[0];
      databaseEntry0.setData(byteArray0, 1, 1);
      int int0 = databaseEntry0.getOffset();
      assertEquals(1, databaseEntry0.getSize());
      assertEquals(1, int0);
  }

  @Test
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte) (-87), 987);
      int int0 = databaseEntry0.getOffset();
      assertEquals((-87), int0);
      assertEquals(987, databaseEntry0.getSize());
      assertEquals(0, databaseEntry0.getPartialOffset());
      assertEquals(0, databaseEntry0.getPartialLength());
      assertFalse(databaseEntry0.getPartial());
  }

  @Test
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      assertEquals(0, databaseEntry0.getSize());
      
      databaseEntry0.setData(byteArray0);
      databaseEntry0.getData();
      assertFalse(databaseEntry0.getPartial());
  }

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, 1625, 1625);
      databaseEntry0.getData();
      assertEquals(1625, databaseEntry0.getOffset());
      assertEquals(0, databaseEntry0.getPartialLength());
      assertEquals(0, databaseEntry0.getPartialOffset());
      assertFalse(databaseEntry0.getPartial());
      assertEquals(1625, databaseEntry0.getSize());
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[1] = (byte)101;
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      assertEquals(0, databaseEntry0.getSize());
      
      databaseEntry0.setData(byteArray0);
      databaseEntry0.hashCode();
      assertEquals(0, databaseEntry0.getPartialOffset());
  }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (-1), (-1));
      databaseEntry0.hashCode();
      assertEquals(0, databaseEntry0.getPartialLength());
      assertEquals(-1, databaseEntry0.getSize());
      assertFalse(databaseEntry0.getPartial());
      assertEquals(0, databaseEntry0.getPartialOffset());
      assertEquals(-1, databaseEntry0.getOffset());
  }

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      DatabaseEntry databaseEntry1 = new DatabaseEntry(byteArray0);
      assertEquals(0, databaseEntry1.getOffset());
      
      boolean boolean0 = databaseEntry0.equals(databaseEntry1);
      assertTrue(boolean0);
      assertEquals(0, databaseEntry1.getPartialOffset());
      assertEquals(0, databaseEntry1.getPartialLength());
      assertFalse(databaseEntry1.getPartial());
  }

  @Test
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, databaseEntry0.getSize());
      
      databaseEntry0.setData(byteArray0);
      boolean boolean0 = databaseEntry0.equals(databaseEntry0);
      assertTrue(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, 1300, (-4694));
      boolean boolean0 = databaseEntry0.equals(databaseEntry0);
      assertEquals(0, databaseEntry0.getPartialLength());
      assertFalse(databaseEntry0.getPartial());
      assertEquals(1300, databaseEntry0.getOffset());
      assertEquals(0, databaseEntry0.getPartialOffset());
      assertTrue(boolean0);
      assertEquals(-4694, databaseEntry0.getSize());
  }

  @Test
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, databaseEntry0.getSize());
      
      DatabaseEntry databaseEntry1 = new DatabaseEntry(byteArray0, (int) (byte)0, (int) (byte)0);
      databaseEntry0.setData(byteArray0);
      boolean boolean0 = databaseEntry0.equals(databaseEntry1);
      assertFalse(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      databaseEntry0.setPartial(true);
      byte[] byteArray0 = new byte[8];
      DatabaseEntry databaseEntry1 = new DatabaseEntry(byteArray0);
      databaseEntry1.setPartial(1208, (int) (byte)0, true);
      boolean boolean0 = databaseEntry0.equals(databaseEntry1);
      assertEquals(1208, databaseEntry1.getPartialOffset());
      assertFalse(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      databaseEntry0.setPartial(true);
      databaseEntry0.setPartialLength((-397));
      DatabaseEntry databaseEntry1 = new DatabaseEntry();
      databaseEntry1.setPartial(true);
      boolean boolean0 = databaseEntry1.equals(databaseEntry0);
      assertEquals(-397, databaseEntry0.getPartialLength());
      assertFalse(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, 1642, (int) (byte)0);
      databaseEntry0.setData(byteArray0);
      databaseEntry0.setOffset((byte) (-7));
      // Undeclared exception!
      try { 
        databaseEntry0.hashCode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -7
         //
         assertThrownBy("com.sleepycat.je.DatabaseEntry", e);
      }
  }

  @Test
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte) (-1), 1);
      // Undeclared exception!
      try { 
        databaseEntry0.equals(databaseEntry0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         assertThrownBy("com.sleepycat.je.DatabaseEntry", e);
      }
  }

  @Test
  public void test21()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      databaseEntry0.hashCode();
      assertEquals(0, databaseEntry0.getOffset());
      assertEquals(0, databaseEntry0.getSize());
      assertEquals(0, databaseEntry0.getPartialLength());
      assertEquals(0, databaseEntry0.getPartialOffset());
      assertFalse(databaseEntry0.getPartial());
  }

  @Test
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte)0, (int) (byte)0);
      DatabaseEntry databaseEntry1 = new DatabaseEntry(byteArray0);
      boolean boolean0 = databaseEntry0.equals(databaseEntry1);
      assertFalse(databaseEntry1.getPartial());
      assertFalse(boolean0);
      assertEquals(0, databaseEntry1.getPartialLength());
      assertFalse(databaseEntry0.getPartial());
      assertEquals(0, databaseEntry0.getSize());
      assertEquals(0, databaseEntry0.getOffset());
      assertEquals(0, databaseEntry0.getPartialOffset());
      assertFalse(databaseEntry1.equals((Object)databaseEntry0));
      assertEquals(0, databaseEntry0.getPartialLength());
      assertEquals(0, databaseEntry1.getOffset());
      assertEquals(0, databaseEntry1.getPartialOffset());
  }

  @Test
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      DatabaseEntry databaseEntry1 = new DatabaseEntry(byteArray0, 0, 0);
      boolean boolean0 = databaseEntry1.equals(databaseEntry0);
      assertFalse(databaseEntry0.getPartial());
      assertFalse(databaseEntry0.equals((Object)databaseEntry1));
      assertEquals(0, databaseEntry0.getPartialOffset());
      assertFalse(boolean0);
      assertEquals(0, databaseEntry1.getOffset());
      assertEquals(0, databaseEntry1.getSize());
      assertEquals(0, databaseEntry0.getPartialLength());
      assertEquals(0, databaseEntry1.getPartialLength());
      assertEquals(0, databaseEntry1.getPartialOffset());
      assertFalse(databaseEntry1.getPartial());
      assertEquals(0, databaseEntry0.getOffset());
      assertEquals(0, databaseEntry0.getSize());
  }

  @Test
  public void test24()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      byte[] byteArray0 = new byte[2];
      DatabaseEntry databaseEntry1 = new DatabaseEntry(byteArray0);
      boolean boolean0 = databaseEntry0.equals(databaseEntry1);
      assertEquals(0, databaseEntry0.getOffset());
      assertFalse(boolean0);
      assertEquals(0, databaseEntry1.getPartialLength());
      assertFalse(databaseEntry1.getPartial());
      assertEquals(0, databaseEntry0.getPartialLength());
      assertEquals(0, databaseEntry0.getPartialOffset());
      assertEquals(0, databaseEntry0.getSize());
      assertEquals(0, databaseEntry1.getPartialOffset());
      assertEquals(0, databaseEntry1.getOffset());
      assertFalse(databaseEntry0.getPartial());
      assertFalse(databaseEntry1.equals((Object)databaseEntry0));
  }

  @Test
  public void test25()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      boolean boolean0 = databaseEntry0.equals(databaseEntry0);
      assertEquals(0, databaseEntry0.getOffset());
      assertTrue(boolean0);
      assertFalse(databaseEntry0.getPartial());
      assertEquals(0, databaseEntry0.getSize());
      assertEquals(0, databaseEntry0.getPartialOffset());
      assertEquals(0, databaseEntry0.getPartialLength());
  }

  @Test
  public void test26()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      databaseEntry0.setPartial(true);
      byte[] byteArray0 = new byte[8];
      DatabaseEntry databaseEntry1 = new DatabaseEntry(byteArray0);
      databaseEntry1.setPartial((int) (byte) (-26), (int) (byte)0, true);
      boolean boolean0 = databaseEntry0.equals(databaseEntry1);
      assertEquals(-26, databaseEntry1.getPartialOffset());
      assertFalse(boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      databaseEntry0.setPartial(true);
      databaseEntry0.setPartialLength((-397));
      DatabaseEntry databaseEntry1 = new DatabaseEntry();
      databaseEntry1.setPartial(true);
      boolean boolean0 = databaseEntry0.equals(databaseEntry1);
      assertEquals(-397, databaseEntry0.getPartialLength());
      assertFalse(boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      assertFalse(databaseEntry0.getPartial());
      
      databaseEntry0.setPartial(true);
      DatabaseEntry databaseEntry1 = new DatabaseEntry();
      boolean boolean0 = databaseEntry1.equals(databaseEntry0);
      assertTrue(databaseEntry0.getPartial());
      assertFalse(boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte)0, (int) (byte)0);
      databaseEntry0.setPartial((int) (byte)0, (-877), true);
      boolean boolean0 = databaseEntry0.equals(databaseEntry0);
      assertEquals(-877, databaseEntry0.getPartialLength());
      assertTrue(boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      Integer integer0 = new Integer((int) (byte)6);
      boolean boolean0 = databaseEntry0.equals(integer0);
      assertEquals(0, databaseEntry0.getOffset());
      assertEquals(0, databaseEntry0.getPartialLength());
      assertEquals(0, databaseEntry0.getPartialOffset());
      assertFalse(boolean0);
      assertFalse(databaseEntry0.getPartial());
  }

  @Test
  public void test31()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      databaseEntry0.setData((byte[]) null);
      assertEquals(0, databaseEntry0.getSize());
      assertFalse(databaseEntry0.getPartial());
      assertEquals(0, databaseEntry0.getPartialLength());
      assertEquals(0, databaseEntry0.getPartialOffset());
      assertEquals(0, databaseEntry0.getOffset());
  }

  @Test
  public void test32()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry((byte[]) null);
      assertEquals(0, databaseEntry0.getPartialOffset());
      assertFalse(databaseEntry0.getPartial());
      assertEquals(0, databaseEntry0.getPartialLength());
      assertEquals(0, databaseEntry0.getOffset());
      assertEquals(0, databaseEntry0.getSize());
  }

  @Test
  public void test33()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      databaseEntry0.getData();
      assertEquals(0, databaseEntry0.getOffset());
      assertEquals(0, databaseEntry0.getPartialOffset());
      assertEquals(0, databaseEntry0.getPartialLength());
      assertEquals(0, databaseEntry0.getSize());
      assertFalse(databaseEntry0.getPartial());
  }

  @Test
  public void test34()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      int int0 = databaseEntry0.getSize();
      assertEquals(0, databaseEntry0.getOffset());
      assertEquals(0, databaseEntry0.getPartialOffset());
      assertFalse(databaseEntry0.getPartial());
      assertEquals(0, databaseEntry0.getPartialLength());
      assertEquals(0, int0);
  }

  @Test
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (-1), (-1));
      int int0 = databaseEntry0.getPartialOffset();
      assertEquals(-1, databaseEntry0.getOffset());
      assertFalse(databaseEntry0.getPartial());
      assertEquals(0, databaseEntry0.getPartialLength());
      assertEquals(0, int0);
      assertEquals(-1, databaseEntry0.getSize());
  }

  @Test
  public void test36()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      int int0 = databaseEntry0.getPartialLength();
      assertEquals(0, databaseEntry0.getSize());
      assertFalse(databaseEntry0.getPartial());
      assertEquals(0, databaseEntry0.getOffset());
      assertEquals(0, databaseEntry0.getPartialOffset());
      assertEquals(0, int0);
  }

  @Test
  public void test37()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      String string0 = databaseEntry0.toString();
      assertFalse(databaseEntry0.getPartial());
      assertEquals("<DatabaseEntry dlen=0 doff=0 doff=0 offset=0 size=0>", string0);
  }

  @Test
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0);
      databaseEntry0.setData(byteArray0, 1, (-1970));
      assertEquals(-1970, databaseEntry0.getSize());
  }

  @Test
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      DatabaseEntry databaseEntry0 = new DatabaseEntry(byteArray0, (int) (byte) (-87), 987);
      boolean boolean0 = databaseEntry0.getPartial();
      assertEquals(0, databaseEntry0.getPartialOffset());
      assertEquals(0, databaseEntry0.getPartialLength());
      assertEquals(987, databaseEntry0.getSize());
      assertFalse(boolean0);
      assertEquals(-87, databaseEntry0.getOffset());
  }

  @Test
  public void test40()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      int int0 = databaseEntry0.getOffset();
      assertEquals(0, databaseEntry0.getSize());
      assertEquals(0, int0);
      assertEquals(0, databaseEntry0.getPartialLength());
      assertFalse(databaseEntry0.getPartial());
      assertEquals(0, databaseEntry0.getPartialOffset());
  }

  @Test
  public void test41()  throws Throwable  {
      DatabaseEntry databaseEntry0 = new DatabaseEntry();
      databaseEntry0.dumpData();
      assertEquals(0, databaseEntry0.getOffset());
      assertEquals(0, databaseEntry0.getSize());
      assertEquals(0, databaseEntry0.getPartialLength());
      assertFalse(databaseEntry0.getPartial());
      assertEquals(0, databaseEntry0.getPartialOffset());
  }
}
