/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sun Jul 01 14:42:34 KST 2018
 */

package it.yup.ui;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;

@EvoSuiteClassExclude
public class UILayout_ESTest_scaffolding6 {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "it.yup.ui.UILayout"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 


  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(UILayout_ESTest_scaffolding6.class.getClassLoader() ,
      "lampiro.screens.AlbumScreen",
      "lampiro.screens.MUCComposer",
      "it.yup.ui.UIHLayout",
      "it.yup.xmpp.Roster$3",
      "it.yup.util.ResourceManager",
      "it.yup.xmlstream.PacketListener",
      "it.yup.xmpp.Roster$1",
      "it.yup.xmpp.Roster$2",
      "it.yup.xmpp.packets.Iq",
      "it.yup.xml.Element",
      "it.yup.ui.UIUtils",
      "it.yup.ui.UIPanel",
      "lampiro.screens.ChatScreen$1",
      "it.yup.ui.UICombobox",
      "it.yup.ui.UITextField",
      "lampiro.screens.MUCScreen",
      "lampiro.screens.SimpleComposerScreen",
      "it.yup.ui.UIScreen",
      "lampiro.screens.ChatScreen",
      "it.yup.ui.UIRadioButtons",
      "lampiro.screens.RosterScreen$MUCStateHandler",
      "it.yup.xmpp.packets.Presence",
      "it.yup.xmpp.packets.Message",
      "it.yup.ui.UICombobox$UIComboScreen",
      "it.yup.util.MetaVector",
      "lampiro.screens.ChatScreen$UICutLabel",
      "it.yup.ui.UIMenu",
      "it.yup.ui.UICheckbox",
      "it.yup.xmpp.Group",
      "it.yup.xmpp.IQResultListener",
      "it.yup.xmpp.Roster",
      "it.yup.ui.UIEmoLabel",
      "lampiro.screens.ChatScreen$ForwardScreen",
      "it.yup.ui.UIIContainer",
      "it.yup.ui.UILabel",
      "it.yup.ui.UIRadioButtons$UIRadioButton",
      "it.yup.ui.UICanvas",
      "it.yup.ui.UIButton",
      "it.yup.ui.UIConfig",
      "it.yup.xmpp.packets.Stanza",
      "it.yup.xmpp.Contact",
      "it.yup.ui.UIItem",
      "it.yup.ui.Semaphore",
      "it.yup.ui.UIVLayout",
      "it.yup.ui.UILayout",
      "lampiro.screens.ChatScreen$MUCUpdateListener",
      "it.yup.ui.UITextPanel",
      "it.yup.ui.UIAccordion",
      "it.yup.ui.UISeparator",
      "it.yup.ui.UICanvas$1",
      "it.yup.xmpp.MUC"
    );
  } 
}
