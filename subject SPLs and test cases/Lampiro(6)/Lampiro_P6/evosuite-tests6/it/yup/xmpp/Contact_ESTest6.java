/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 01 15:57:15 KST 2018
 */

package it.yup.xmpp;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import it.yup.xml.Element;
import it.yup.xmpp.packets.Message;
import it.yup.xmpp.packets.Presence;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class Contact_ESTest6 extends Contact_ESTest_scaffolding6 {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      Presence presence0 = new Presence((String) null, "", "", "", 0);
      // Undeclared exception!
      try { 
        contact0.updatePresence(presence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xmpp.Contact", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      Element element0 = new Element("", "");
      contact0.handleError(element0);
      assertFalse(contact0.pending_tasks);
      assertEquals(5, contact0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      Presence presence0 = new Presence("", "", "", 0);
      // Undeclared exception!
      try { 
        contact0.updateExistingPresence(presence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xmpp.Contact", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = Contact.userhost("s");
      assertEquals("s", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = Contact.resource("7/r");
      assertEquals("r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      Presence[] presenceArray0 = new Presence[5];
      Presence presence0 = new Presence("", "", "", 0);
      presenceArray0[0] = presence0;
      contact0.resources = presenceArray0;
      Presence presence1 = contact0.getPresence();
      assertFalse(contact0.pending_tasks);
      assertNotNull(presence1);
      assertEquals(5, contact0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      String[] stringArray1 = contact0.getGroups();
      assertEquals(5, contact0.getAvailability());
      assertEquals(8, stringArray1.length);
      assertFalse(contact0.pending_tasks);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      Contact contact1 = new Contact("", "L", "", contact0.availability_mapping);
      int int0 = contact0.compareTo(contact1);
      assertEquals(1, int0);
      assertEquals(5, contact1.getAvailability());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Contact contact0 = new Contact("", "r", "", (String[]) null);
      Contact contact1 = new Contact("", "", "", contact0.availability_mapping);
      int int0 = contact0.compareTo(contact1);
      assertEquals((-1), int0);
      assertEquals(5, contact1.getAvailability());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Contact.user((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xmpp.Contact", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Contact.resource((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xmpp.Contact", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Contact contact0 = new Contact("", "", "", (String[]) null);
      Message message0 = new Message("", "");
      // Undeclared exception!
      try { 
        contact0.handleResult(message0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xmpp.Contact", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Contact.domain((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xmpp.Contact", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = Contact.domain("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = Contact.resource("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = Contact.userhost("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      int int0 = contact0.getAvailability("");
      assertEquals(5, contact0.getAvailability());
      assertEquals(5, int0);
      assertFalse(contact0.pending_tasks);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      Presence[] presenceArray0 = new Presence[5];
      Presence presence0 = new Presence("", "", "", 0);
      presenceArray0[0] = presence0;
      presenceArray0[2] = presenceArray0[0];
      contact0.getCapabilities(presenceArray0[2]);
      assertFalse(contact0.pending_tasks);
      assertEquals(5, contact0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Contact contact0 = new Contact((String) null, "", "", (String[]) null);
      String string0 = contact0.getPrintableName();
      assertNull(string0);
      assertFalse(contact0.pending_tasks);
      assertEquals(5, contact0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Contact contact0 = new Contact((String) null, "!", "", (String[]) null);
      String string0 = contact0.getPrintableName();
      assertEquals(5, contact0.getAvailability());
      assertEquals("!", string0);
      assertFalse(contact0.pending_tasks);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Contact contact0 = new Contact("", "", "", (String[]) null);
      contact0.getMessageHistory("");
      assertFalse(contact0.pending_tasks);
      assertEquals(5, contact0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      contact0.getAllPresences();
      assertFalse(contact0.pending_tasks);
      assertEquals(5, contact0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Contact contact0 = new Contact("", "", "", stringArray0);
      boolean boolean0 = contact0.supportsMUC((Presence) null);
      assertEquals(5, contact0.getAvailability());
      assertFalse(boolean0);
      assertFalse(contact0.pending_tasks);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Contact contact0 = new Contact("", "", "", (String[]) null);
      Presence presence0 = new Presence();
      boolean boolean0 = contact0.supportsMUC(presence0);
      assertEquals(5, contact0.getAvailability());
      assertFalse(boolean0);
      assertFalse(contact0.pending_tasks);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Contact contact0 = new Contact("", "", "", stringArray0);
      boolean boolean0 = contact0.setGroups(contact0.availability_mapping);
      assertTrue(boolean0);
      assertFalse(contact0.pending_tasks);
      assertEquals(5, contact0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      boolean boolean0 = contact0.setGroups(stringArray0);
      assertFalse(contact0.pending_tasks);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      int int0 = contact0.mapAvailability((String) null);
      assertEquals(5, contact0.getAvailability());
      assertFalse(contact0.pending_tasks);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Contact contact0 = new Contact("", "", "", (String[]) null);
      int int0 = contact0.mapAvailability("");
      assertFalse(contact0.pending_tasks);
      assertEquals((-1), int0);
      assertEquals(5, contact0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = Contact.user("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = Contact.resource("7/");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Contact contact0 = new Contact("", "", "", (String[]) null);
      contact0.getPresence("");
      assertEquals(5, contact0.getAvailability());
      assertFalse(contact0.pending_tasks);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Contact contact0 = new Contact((String) null, "", "", (String[]) null);
      // Undeclared exception!
      try { 
        contact0.askCapabilities((Presence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xmpp.Contact", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      contact0.getCapabilities((Presence) null);
      assertFalse(contact0.pending_tasks);
      assertEquals(5, contact0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Contact contact0 = new Contact("", "", "", stringArray0);
      contact0.getPresence();
      assertEquals(5, contact0.getAvailability());
      assertFalse(contact0.pending_tasks);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      Task[] taskArray0 = contact0.getTasks();
      assertEquals(0, taskArray0.length);
      assertFalse(contact0.pending_tasks);
      assertEquals(5, contact0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      assertFalse(contact0.pending_tasks);
      
      contact0.addTask((Task) null);
      assertTrue(contact0.pending_tasks);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      Presence[] presenceArray0 = new Presence[5];
      contact0.resources = presenceArray0;
      boolean boolean0 = contact0.isVisible();
      assertFalse(contact0.pending_tasks);
      assertEquals(5, contact0.getAvailability());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      boolean boolean0 = contact0.isVisible();
      assertEquals(5, contact0.getAvailability());
      assertFalse(boolean0);
      assertFalse(contact0.pending_tasks);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      Presence[] presenceArray0 = new Presence[5];
      contact0.resources = presenceArray0;
      // Undeclared exception!
      try { 
        contact0.getFullJid();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xmpp.Contact", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Contact contact0 = new Contact((String) null, "", "", (String[]) null);
      contact0.getFullJid();
      assertEquals(5, contact0.getAvailability());
      assertFalse(contact0.pending_tasks);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Contact contact0 = new Contact("", "r", "", (String[]) null);
      int int0 = contact0.compareTo(contact0);
      assertEquals("r", contact0.getPrintableName());
      assertEquals(5, contact0.getAvailability());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "dnd";
      stringArray0[2] = "";
      stringArray0[3] = "y&<720_>7!oYrJ?{hx";
      stringArray0[4] = "";
      Contact contact0 = new Contact("", ")Jk*e=C", "y&<720_>7!oYrJ?{hx", stringArray0);
      XMPPClient.NS_IQ_DISCO_INFO = "code";
      Message message0 = new Message("&oDn", "S|AHzzd");
      message0.queueTime = (-1L);
      message0.setAttribute("unavailable", "y&<720_>7!oYrJ?{hx");
      message0.addElementAndContent(")Jk*e=C", "", "dnd");
      contact0.compileMessage("y&<720_>7!oYrJ?{hx", message0, "message");
      boolean boolean0 = contact0.unread_msg();
      assertFalse(boolean0);
      
      int int0 = contact0.getHistoryLength(stringArray0[4]);
      assertEquals(0, int0);
      
      contact0.getAllPresences();
      assertEquals(")Jk*e=C", contact0.getPrintableName());
      assertEquals(5, contact0.getAvailability());
      assertFalse(contact0.pending_tasks);
      
      String string0 = "bnm4.!^(";
      String string1 = Contact.userhost(string0);
      assertEquals("bnm4.!^(", string1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Contact contact0 = new Contact("", "", (String) null, stringArray0);
      Message message0 = new Message((String) null, (String) null);
      contact0.addMessageToHistory("", message0);
      assertFalse(contact0.pending_tasks);
      assertEquals(5, contact0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Contact contact0 = new Contact("", (String) null, "", stringArray0);
      // Undeclared exception!
      try { 
        contact0.addMessageToHistory((String) null, (Message) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xmpp.Contact", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      Message message0 = new Message("", "");
      contact0.addMessageToHistory("", message0);
      assertEquals(5, contact0.getAvailability());
      assertFalse(contact0.pending_tasks);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      contact0.store();
      assertFalse(contact0.pending_tasks);
      assertEquals(5, contact0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Contact contact0 = new Contact("", "", "", stringArray0);
      Contact contact1 = new Contact((String) null, "", (String) null, contact0.availability_mapping);
      // Undeclared exception!
      try { 
        contact0.compareTo(contact1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xmpp.Contact", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Contact contact0 = null;
      try {
        contact0 = new Contact("", (String) null, "", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Contact contact0 = new Contact("", "", "", stringArray0);
      boolean boolean0 = contact0.unread_msg();
      assertFalse(boolean0);
      assertFalse(contact0.pending_tasks);
      assertEquals(5, contact0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      int int0 = contact0.getAvailability();
      assertFalse(contact0.pending_tasks);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      contact0.getAllConvs();
      assertFalse(contact0.pending_tasks);
      assertEquals(5, contact0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      Contact contact0 = new Contact("", "", "", stringArray0);
      // Undeclared exception!
      try { 
        contact0.resetMessageHistory("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xmpp.Contact", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Contact contact0 = new Contact("", "", "", (String[]) null);
      String[] stringArray0 = contact0.getGroups();
      assertEquals(5, contact0.getAvailability());
      assertEquals(0, stringArray0.length);
      assertFalse(contact0.pending_tasks);
  }
}
