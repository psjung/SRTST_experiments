/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 01 17:07:55 KST 2018
 */

package com.jcraft.jzlib;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jcraft.jzlib.ZInputStream;
import com.jcraft.jzlib.ZStreamException;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class ZInputStream_ESTest5 extends ZInputStream_ESTest_scaffolding5 {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZInputStream zInputStream0 = new ZInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        zInputStream0.skip(513L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jcraft.jzlib.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZInputStream zInputStream0 = new ZInputStream(byteArrayInputStream0);
      zInputStream0.bufsize = 0;
      long long0 = zInputStream0.skip(0L);
      assertEquals(0L, long0);
      assertEquals(0, zInputStream0.getFlushMode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (-1));
      ZInputStream zInputStream0 = new ZInputStream(byteArrayInputStream0, true);
      try { 
        zInputStream0.read();
        fail("Expecting exception: ZStreamException");
      
      } catch(ZStreamException e) {
         //
         // inflating: invalid stored block lengths
         //
         verifyException("com.jcraft.jzlib.ZInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZInputStream zInputStream0 = new ZInputStream(byteArrayInputStream0);
      long long0 = zInputStream0.skip(1L);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ZInputStream zInputStream0 = new ZInputStream(sequenceInputStream0);
      zInputStream0.skip(0L);
      assertEquals(0, zInputStream0.getFlushMode());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZInputStream zInputStream0 = new ZInputStream(byteArrayInputStream0);
      assertEquals(0, zInputStream0.getFlushMode());
      
      zInputStream0.setFlushMode(1);
      int int0 = zInputStream0.getFlushMode();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ZInputStream zInputStream0 = new ZInputStream(bufferedInputStream0, true);
      zInputStream0.setFlushMode((-1));
      int int0 = zInputStream0.getFlushMode();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZInputStream zInputStream0 = new ZInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        zInputStream0.skip((-1L));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jcraft.jzlib.ZInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      ZInputStream zInputStream0 = new ZInputStream(pipedInputStream0);
      try { 
        zInputStream0.skip(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZInputStream zInputStream0 = new ZInputStream(byteArrayInputStream0, 10);
      // Undeclared exception!
      zInputStream0.read(byteArray0, 0, (-1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZInputStream zInputStream0 = new ZInputStream((InputStream) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        zInputStream0.read(byteArray0, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jcraft.jzlib.ZInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZInputStream zInputStream0 = new ZInputStream(byteArrayInputStream0);
      zInputStream0.bufsize = (-1);
      // Undeclared exception!
      try { 
        zInputStream0.read(zInputStream0.z.next_out, (int) (byte)0, (int) (byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZInputStream zInputStream0 = new ZInputStream(byteArrayInputStream0, (byte)0);
      // Undeclared exception!
      try { 
        zInputStream0.read(byteArray0, (int) (byte)1, (int) (byte)2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      ZInputStream zInputStream0 = new ZInputStream(fileInputStream0, 0);
      byte[] byteArray0 = new byte[1];
      try { 
        zInputStream0.read(byteArray0, 0, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream Closed
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 1);
      ZInputStream zInputStream0 = new ZInputStream(pushbackInputStream0, 10);
      // Undeclared exception!
      zInputStream0.read();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZInputStream zInputStream0 = new ZInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        zInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jcraft.jzlib.ZInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZInputStream zInputStream0 = new ZInputStream(byteArrayInputStream0, 0);
      zInputStream0.buf = byteArray0;
      // Undeclared exception!
      try { 
        zInputStream0.read();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 1);
      ZInputStream zInputStream0 = new ZInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        zInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      ZInputStream zInputStream0 = new ZInputStream(pushbackInputStream0, 0);
      zInputStream0.close();
      try { 
        zInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZInputStream zInputStream0 = new ZInputStream(byteArrayInputStream0, 0);
      zInputStream0.z = null;
      // Undeclared exception!
      try { 
        zInputStream0.getTotalOut();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jcraft.jzlib.ZInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZInputStream zInputStream0 = new ZInputStream((InputStream) null, false);
      // Undeclared exception!
      try { 
        zInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jcraft.jzlib.ZInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZInputStream zInputStream0 = new ZInputStream(byteArrayInputStream0);
      try { 
        zInputStream0.read(zInputStream0.z.next_out, (int) (byte)0, (int) (byte)1);
        fail("Expecting exception: ZStreamException");
      
      } catch(ZStreamException e) {
         //
         // inflating: unknown compression method
         //
         verifyException("com.jcraft.jzlib.ZInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ZInputStream zInputStream0 = new ZInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        zInputStream0.skip(512L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jcraft.jzlib.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pushbackInputStream0);
      ZInputStream zInputStream0 = new ZInputStream(sequenceInputStream0, 0);
      zInputStream0.close();
      zInputStream0.setFlushMode(5);
      byte[] byteArray0 = new byte[4];
      try { 
        zInputStream0.read(byteArray0, (int) (byte)0, (-1));
        fail("Expecting exception: ZStreamException");
      
      } catch(ZStreamException e) {
         //
         // deflating: null
         //
         verifyException("com.jcraft.jzlib.ZInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZInputStream zInputStream0 = new ZInputStream(byteArrayInputStream0, 0);
      int int0 = zInputStream0.read();
      assertEquals(1L, zInputStream0.getTotalOut());
      assertEquals(120, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte) (-1));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 1);
      ZInputStream zInputStream0 = new ZInputStream(bufferedInputStream0, (byte)10);
      assertEquals(0, zInputStream0.getFlushMode());
      
      zInputStream0.read(byteArray0, 0, (int) (byte)1);
      int int0 = zInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZInputStream zInputStream0 = new ZInputStream(byteArrayInputStream0);
      int int0 = zInputStream0.read(byteArray0, 0, 0);
      assertEquals(0, int0);
      assertEquals(0, zInputStream0.getFlushMode());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZInputStream zInputStream0 = new ZInputStream(byteArrayInputStream0, 0);
      zInputStream0.getTotalIn();
      assertEquals(0, zInputStream0.getFlushMode());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      ZInputStream zInputStream0 = new ZInputStream(pipedInputStream0);
      int int0 = zInputStream0.getFlushMode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      ZInputStream zInputStream0 = new ZInputStream(pipedInputStream0);
      zInputStream0.getTotalOut();
      assertEquals(0, zInputStream0.getFlushMode());
  }
}
