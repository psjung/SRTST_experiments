/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 01 12:02:21 KST 2018
 */

package it.yup.xml;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class Element_ESTest2 extends Element_ESTest_scaffolding2 {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String[][] stringArray0 = new String[3][3];
      String[] stringArray1 = new String[4];
      stringArray1[2] = " ";
      stringArray0[0] = stringArray1;
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.toXml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String[][] stringArray0 = new String[3][3];
      String[] stringArray1 = new String[4];
      stringArray1[2] = "\"";
      stringArray0[0] = stringArray1;
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.toXml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String[][] stringArray0 = new String[3][0];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      element0.nchildren = (-1);
      element0.resetText();
      assertEquals(0L, element0.queueTime);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Element element0 = new Element("", "");
      element0.nchildren = (-1);
      String string0 = element0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String[][] stringArray0 = new String[3][0];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      element0.nchildren = (-1);
      Element[] elementArray0 = element0.getChildren();
      assertEquals(0, elementArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String[][] stringArray0 = new String[3][0];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      element0.nchildren = (-1);
      Element[] elementArray0 = element0.getChildrenByName("", "");
      assertEquals(0, elementArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String[][] stringArray0 = new String[3][0];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      element0.nchildren = (-1);
      Element element1 = element0.getChildByName("", "");
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String[][] stringArray0 = new String[3][0];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      element0.nchildren = (-1);
      element0.removeChild(element0);
      assertEquals(0L, element0.queueTime);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "E";
      String[][] stringArray0 = new String[0][4];
      Element element0 = new Element("E", "E", objectArray0, stringArray0);
      element0.getText();
      Element element1 = new Element(element0);
      Element element2 = element1.clone();
      element1.attributes = stringArray0;
      Element[] elementArray0 = element1.getChildrenByName("E", "{v~eycrTb/o0o@t");
      Element element3 = new Element((String) null, "{v~eycrTb/o0o@t");
      element0.ensureCapacity(0, (byte) (-16));
      element1.addElement(element3);
      element0.setAttribute("5TN9nZPR(Sm/#Aw", "&apos;");
      element0.removeChild("XK+_^Z", "E");
      element1.children = (Object[]) elementArray0;
      element2.ensureCapacity(0, (byte) (-79));
      element2.delAttribute("E");
      // Undeclared exception!
      try { 
        element1.addText("2oISA4Edb3jHD");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "SHA-1";
      Element element0 = new Element("", "");
      Element element1 = element0.addElementAndContent(string0, element0.name, string0);
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "Z#2D477.?nz0B<viKTY";
      Element element0 = new Element("", "");
      element0.delAttribute(string0);
      String string1 = element0.getAttribute(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "'S<Qp@m`{3?zD3";
      String string1 = "1QjM:s%a`#A(gJf ";
      Element element0 = new Element("'S<Qp@m`{3?zD3", "1QjM:s%a`#A(gJf ");
      String string2 = "";
      element0.addElementAndContent(string1, string2, string0);
      element0.delAttribute(string0);
      Element element1 = new Element(element0);
      Object[] objectArray0 = new Object[0];
      element1.children = objectArray0;
      String string3 = Element.createUniqueId();
      String string4 = "n*\\lA<-)'ue[~/";
      Element element2 = element0.addElement(string4, string3);
      element2.removeAllElements();
      element2.removeChild(element0);
      element1.delAttribute(string0);
      // Undeclared exception!
      try { 
        element1.setAttribute(element0.uri, element0.uri);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String[][] stringArray0 = new String[9][7];
      String[] stringArray1 = new String[8];
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray0[0] = stringArray1;
      Element element0 = new Element("", "", objectArray0, stringArray0);
      String string0 = element0.getAttribute("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      String[][] stringArray0 = new String[3][3];
      String[] stringArray1 = new String[4];
      stringArray1[2] = "";
      stringArray0[0] = stringArray1;
      stringArray0[1] = stringArray1;
      stringArray0[2] = stringArray1;
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.toXml();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to it.yup.xml.Element
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String[][] stringArray0 = new String[3][2];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.toXml();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Element element0 = new Element("", "Em2Y");
      Element element1 = element0.clone();
      element0.attributes = null;
      element1.toXml();
      element1.addElement(element0);
      element0.addElement(".3Baf", "");
      element0.getText();
      Element.createUniqueId();
      element0.resetText();
      element1.getAttribute("");
      element0.toXml();
      element1.addElement("http://", "");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "520";
      stringArray0[1] = "Em2Y";
      // Undeclared exception!
      try { 
        element0.setAttributes(stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String[][] stringArray0 = new String[3][0];
      String[] stringArray1 = new String[7];
      stringArray1[1] = "";
      stringArray0[0] = stringArray1;
      stringArray0[1] = stringArray1;
      stringArray0[2] = stringArray0[0];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.setAttributes(stringArray0[0], stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Element element0 = new Element("", "");
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "md5";
      objectArray0[2] = (Object) "md5";
      objectArray0[3] = (Object) element0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) ":7";
      String[][] stringArray0 = new String[8][5];
      String[] stringArray1 = new String[8];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "md5";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "md5";
      stringArray1[6] = "md5";
      stringArray1[7] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[2];
      stringArray2[0] = ":7";
      stringArray2[1] = "";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[1];
      stringArray3[0] = "";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[8];
      stringArray4[0] = "md5";
      stringArray4[1] = ":7";
      stringArray4[2] = "";
      stringArray4[3] = ":7";
      stringArray4[4] = "";
      stringArray4[5] = "md5";
      stringArray4[6] = "md5";
      stringArray4[7] = "";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[4];
      stringArray5[0] = "";
      stringArray5[1] = ":7";
      stringArray5[2] = "";
      stringArray5[3] = ":7";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[2];
      stringArray6[0] = "";
      stringArray6[1] = "";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[7];
      stringArray7[0] = ":7";
      stringArray7[1] = "";
      stringArray7[2] = "";
      stringArray7[3] = "md5";
      stringArray7[4] = "";
      stringArray7[5] = ":7";
      stringArray7[6] = "";
      stringArray0[6] = stringArray7;
      String[] stringArray8 = new String[4];
      stringArray8[0] = "md5";
      stringArray8[1] = ":7";
      stringArray8[2] = "</";
      stringArray8[3] = ":7";
      stringArray0[7] = stringArray8;
      Element element1 = new Element("md5", "md5", objectArray0, stringArray0);
      element0.removeChild(element1);
      element0.queueTime = (-4013L);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) element0;
      objectArray1[1] = (Object) element0;
      objectArray1[2] = (Object) element0;
      objectArray1[3] = (Object) element0;
      element0.children = objectArray1;
      element0.addText(":7");
      element0.resetText();
      element0.toXml();
      Element element2 = new Element(" e1+[%'", "");
      element2.clone();
      element2.setAttribute("_biPb$IPJI8dVe", "");
      element0.removeChild(element2);
      Element.createUniqueId();
      Element.createUniqueId();
      String string0 = Element.createUniqueId();
      assertEquals("5", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      Object object0 = new Object();
      objectArray0[7] = object0;
      String[][] stringArray0 = new String[6][2];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.removeChild("", "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to it.yup.xml.Element
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      String[][] stringArray0 = new String[3][0];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      element0.nchildren = 5;
      // Undeclared exception!
      try { 
        element0.removeChild("", "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String[][] stringArray0 = new String[1][2];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      Object[] objectArray1 = new Object[9];
      objectArray1[1] = (Object) element0;
      Element element1 = new Element("", "", objectArray1, stringArray0);
      element1.removeChild(element0);
      assertFalse(element0.equals((Object)element1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      String[][] stringArray0 = new String[3][0];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      element0.nchildren = 5;
      // Undeclared exception!
      try { 
        element0.getText();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      String[][] stringArray0 = new String[4][9];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.getChildrenByName("", "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to it.yup.xml.Element
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      String[][] stringArray0 = new String[0][0];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.getChildren();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to it.yup.xml.Element
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      String[][] stringArray0 = new String[0][2];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.getChildByName("", (String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to it.yup.xml.Element
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "E";
      String[][] stringArray0 = new String[0][4];
      Element element0 = new Element("E", "E", objectArray0, stringArray0);
      element0.getText();
      Element element1 = new Element(element0);
      Element element2 = element1.clone();
      element1.attributes = stringArray0;
      Element[] elementArray0 = element1.getChildrenByName("E", "{v~eycrTb/o0o@t");
      Element element3 = new Element((String) null, "{v~eycrTb/o0o@t");
      element0.ensureCapacity(0, (byte) (-16));
      element1.addElement(element3);
      element0.setAttribute("5TN9nZPR(Sm/#Aw", "&apos;");
      element0.removeChild("XK+_^Z", "E");
      element1.children = (Object[]) elementArray0;
      element2.ensureCapacity(0, (byte) (-79));
      element2.delAttribute("E");
      element2.addElement("", "?xKGIn");
      // Undeclared exception!
      try { 
        element1.getChildByName("YYg[w$,$?xuW4#", "lOd[R;o");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String[][] stringArray0 = new String[6][5];
      Element element0 = new Element((String) null, (String) null, objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.getAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[][] stringArray0 = new String[6][1];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.getAttribute("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      String[][] stringArray0 = new String[9][5];
      Element element0 = new Element((String) null, "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.delAttribute("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[][] stringArray0 = new String[0][4];
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.clone();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to it.yup.xml.Element
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String[][] stringArray0 = new String[7][3];
      String[] stringArray1 = new String[0];
      stringArray0[0] = stringArray1;
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.clone();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[][] stringArray0 = new String[1][1];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      element0.addText("");
      assertEquals(0, element0.maxWait);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      String[][] stringArray0 = new String[6][0];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      Element element1 = element0.addElementAndContent("", "", "");
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String[][] stringArray0 = new String[6][4];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      Element element1 = element0.addElement("", "");
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Element element0 = new Element("&lt;", "&lt;");
      element0.queueTime = 0L;
      element0.ensureCapacity((-4158), (byte)107);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "&lt;";
      stringArray0[1] = "&lt;";
      stringArray0[2] = "&lt;";
      stringArray0[3] = "&lt;";
      element0.toXml();
      stringArray0[4] = "&lt;";
      stringArray0[5] = "&lt;";
      stringArray0[6] = "&lt;";
      stringArray0[7] = "&lt;";
      element0.children = (Object[]) stringArray0;
      stringArray0[8] = "<";
      element0.setAttributes(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.addElement("&lt;", "&lt;");
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // it.yup.xml.Element
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "E";
      String[][] stringArray0 = new String[0][4];
      Element element0 = new Element("E", "E", objectArray0, stringArray0);
      element0.getText();
      Element element1 = new Element(element0);
      Element element2 = element1.clone();
      element1.attributes = stringArray0;
      element0.name = "";
      Element[] elementArray0 = element1.getChildrenByName("", "{v~eycrTb/o0o@t");
      Element element3 = new Element((String) null, "{v~eycrTb/o0o@t");
      element3.attributes = stringArray0;
      element0.ensureCapacity(0, (byte) (-16));
      element1.addElement(element3);
      element0.setAttribute("5TN9nZPR(Sm/#Aw", "&apos;");
      element0.removeChild("XK+_^Z", "E");
      element1.children = (Object[]) elementArray0;
      element2.ensureCapacity(0, (byte) (-79));
      element2.delAttribute("E");
      // Undeclared exception!
      try { 
        element1.addElement("hGzR~;[(QL#]FC>~ ", "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String[][] stringArray0 = new String[1][5];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      element0.addElement(element0);
      assertEquals(0, element0.maxWait);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Element element0 = new Element("!.Hs;~IW%", "SHA-1");
      element0.getText();
      element0.queueTime = 4584L;
      int int0 = 647;
      byte byte0 = (byte)0;
      element0.ensureCapacity(647, (byte)0);
      Element element1 = element0.clone();
      element1.nchildren = 127;
      // Undeclared exception!
      try { 
        element1.addElement(element0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Element element0 = new Element("id", "<");
      String string0 = "id";
      Object[] objectArray0 = new Object[0];
      String[][] stringArrayArray0 = null;
      Element element1 = null;
      try {
        element1 = new Element(string0, element0.name, objectArray0, stringArrayArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String[][] stringArray0 = new String[9][3];
      String[] stringArray1 = new String[2];
      stringArray0[0] = stringArray1;
      Element element0 = new Element("", "", objectArray0, stringArray0);
      Element element1 = null;
      try {
        element1 = new Element(element0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String[][] stringArray0 = new String[3][0];
      String[] stringArray1 = new String[7];
      stringArray1[1] = "";
      stringArray0[0] = stringArray1;
      stringArray0[1] = stringArray1;
      stringArray0[2] = stringArray0[0];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      element0.delAttribute("");
      element0.setAttribute("g", (String) null);
      assertEquals(0, element0.maxWait);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      String[][] stringArray0 = new String[2][4];
      String[] stringArray1 = new String[9];
      stringArray1[1] = "";
      stringArray0[0] = stringArray1;
      Element element0 = new Element("", "", objectArray0, stringArray0);
      element0.setAttribute("", "");
      assertEquals(0L, element0.queueTime);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      String[][] stringArray0 = new String[1][6];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.setAttribute("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String[][] stringArray0 = new String[3][3];
      String[] stringArray1 = new String[4];
      stringArray1[0] = "C";
      stringArray1[2] = "";
      stringArray0[0] = stringArray1;
      stringArray0[1] = stringArray1;
      stringArray0[2] = stringArray1;
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.toXml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String[][] stringArray0 = new String[3][3];
      String[] stringArray1 = new String[4];
      stringArray1[0] = "";
      stringArray0[0] = stringArray1;
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.toXml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Element element0 = new Element("", "");
      Element element1 = element0.addElement(element0.name, element0.name);
      byte[] byteArray0 = element0.toXml();
      assertEquals(19, byteArray0.length);
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String[][] stringArray0 = new String[3][3];
      String[] stringArray1 = new String[4];
      stringArray1[2] = "";
      stringArray0[0] = stringArray1;
      stringArray0[1] = stringArray1;
      String[] stringArray2 = new String[6];
      stringArray2[2] = "";
      stringArray0[2] = stringArray2;
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.toXml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) ">";
      String[][] stringArray0 = new String[0][1];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.toXml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[][] stringArray0 = new String[0][2];
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "<";
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.toXml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "'";
      String[][] stringArray0 = new String[0][1];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.toXml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "&";
      String[][] stringArray0 = new String[0][1];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.toXml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "";
      String[][] stringArray0 = new String[0][1];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      Element element1 = element0.addElementAndContent(element0.uri, element0.uri, string0);
      element0.resetText();
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      String[][] stringArray0 = new String[0][1];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.resetText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String[][] stringArray0 = new String[0][4];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.getText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Element element0 = new Element("", "");
      element0.addElementAndContent("", "", "");
      Element[] elementArray0 = element0.getChildren();
      assertEquals(1, elementArray0.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      String[][] stringArray0 = new String[0][1];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.getChildren();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Element element0 = new Element((String) null, "");
      Element element1 = element0.addElement("", "");
      Element[] elementArray0 = element0.getChildrenByName((String) null, "q");
      assertNotSame(element0, element1);
      assertEquals(0, elementArray0.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Element element0 = new Element((String) null, "");
      Element element1 = element0.addElement("", "");
      Element[] elementArray0 = element0.getChildrenByName((String) null, "");
      assertEquals(1, elementArray0.length);
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String[][] stringArray0 = new String[0][4];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.getChildrenByName("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "1}raI/A!8@q9.h ZA";
      Element element0 = new Element("1}raI/A!8@q9.h ZA", "");
      Element element1 = element0.addElement(string0, string0);
      String string1 = null;
      Element element2 = element0.getChildByName(string1, element0.uri);
      assertSame(element2, element1);
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "1}raI/A!8@q9.h ZA";
      Element element0 = new Element("", "");
      Element element1 = element0.addElement(string0, string0);
      Element element2 = element0.getChildByName(element1.name, element1.uri);
      assertNotNull(element2);
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "1}raI/A!8@q9.h ZA";
      Element element0 = new Element("", "");
      Element element1 = element0.addElement(string0, string0);
      Element element2 = element0.getChildByName(element0.uri, element0.uri);
      assertNull(element2);
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String[][] stringArray0 = new String[0][4];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.getChildByName("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      String[][] stringArray0 = new String[2][4];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      element0.removeChild((Element) null);
      assertEquals(0L, element0.queueTime);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "[aEA,5`#z*jr";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      String[][] stringArray0 = new String[2][4];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      Element element1 = element0.addElementAndContent(element0.name, element0.uri, string0);
      Element element2 = element0.removeChild(string0, element0.uri);
      assertNull(element2);
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Element element0 = new Element((String) null, "");
      Element element1 = element0.addElement("", "");
      Element element2 = element0.removeChild((String) null, "");
      assertSame(element2, element1);
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = "[aEA,5`#z*jr";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      String[][] stringArray0 = new String[2][4];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      element0.addElementAndContent(string0, string0, string0);
      Element element1 = element0.removeChild(string0, string0);
      assertEquals(0, element1.maxWait);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String[][] stringArray0 = new String[0][4];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.removeChild("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "[aEA,5`#z*jr";
      Object[] objectArray0 = new Object[7];
      String[][] stringArray0 = new String[2][4];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      element0.ensureCapacity(8, (byte)99);
      Element element1 = element0.addElementAndContent(element0.name, string0, string0);
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String[][] stringArray0 = new String[0][1];
      Element element0 = new Element("", (String) null, objectArray0, stringArray0);
      Element element1 = element0.addElementAndContent((String) null, (String) null, "");
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String[][] stringArray0 = new String[9][2];
      String[] stringArray1 = new String[9];
      Element element0 = new Element((String) null, (String) null, objectArray0, stringArray0);
      Element element1 = element0.addElement(stringArray1[3], "");
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String[][] stringArray0 = new String[3][0];
      String[] stringArray1 = new String[7];
      stringArray1[1] = "f";
      stringArray0[0] = stringArray1;
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.delAttribute("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = "&lt;";
      Element element0 = new Element("", "");
      String[] stringArray0 = new String[9];
      stringArray0[0] = element0.name;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = element0.uri;
      stringArray0[5] = element0.uri;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      element0.setAttributes(stringArray0, stringArray0);
      String string1 = element0.getAttribute(stringArray0[7]);
      assertNotNull(string1);
      assertEquals("&lt;", string1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      String[][] stringArray0 = new String[2][4];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      element0.ensureCapacity(0, (byte)99);
      assertEquals(0, element0.maxWait);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      String[][] stringArray0 = new String[3][5];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      Element element1 = null;
      try {
        element1 = new Element(element0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to it.yup.xml.Element
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      String[][] stringArray0 = new String[0][1];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      Element element1 = null;
      try {
        element1 = new Element(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String[][] stringArray0 = new String[7][3];
      Element element0 = new Element("", "", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        element0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }
}
