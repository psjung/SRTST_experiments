/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 01 00:46:16 KST 2018
 */

package it.yup.transport;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.util.Timer;
import java.util.Vector;

import javax.microedition.io.StreamConnection;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import it.yup.util.Utils;
import it.yup.xml.Element;
import it.yup.xmlstream.AccountRegistration;
import it.yup.xmlstream.BasicXmlStream;
import it.yup.xmlstream.EventQuery;
import it.yup.xmlstream.EventQueryRegistration;
import it.yup.xmlstream.SocketStream;
import static org.evosuite.runtime.EvoAssertions.*;
@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class SocketChannel_ESTest1 extends SocketChannel_ESTest_scaffolding1 {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "Connection failed: ";
      SocketStream socketStream0 = new SocketStream();
      BasicXmlStream.STREAM_AUTHENTICATED = "lU{LUB|@v7_B}g";
      SocketChannel socketChannel0 = new SocketChannel("Connection failed: ", socketStream0);
      BaseChannel.Sender baseChannel_Sender0 = socketChannel0.new Sender(socketChannel0);
      socketChannel0.sender = baseChannel_Sender0;
      Integer integer0 = new Integer(102);
      socketStream0.gotStreamEvent("Connection failed: ", integer0);
      socketChannel0.KEEP_ALIVE = (-1266L);
      socketChannel0.getOutputStream();
      BasicXmlStream.STREAM_CONNECTED = "";
      String string1 = "Connecting to ";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-89);
      // Undeclared exception!
      try { 
        socketChannel0.sendContent(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative delay.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "MGZFL8$H.lSGZ";
      stringArray0[1] = "G";
      stringArray0[2] = "";
      EventQuery eventQuery0 = new EventQuery("{.rO.z|_*KLdWQ", stringArray0, stringArray0);
      BasicXmlStream.STREAM_AUTHENTICATED = "MGZFL8$H.lSGZ";
      EventQueryRegistration eventQueryRegistration0 = BasicXmlStream.addEventListener(eventQuery0, "G");
      BasicXmlStream.removeEventListener(eventQueryRegistration0);
      BasicXmlStream.NOT_AUTHORIZED = "";
      SocketChannel socketChannel0 = new SocketChannel("", socketStream0);
      socketChannel0.getReader();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)73;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      socketChannel0.inputStream = (InputStream) byteArrayInputStream0;
      socketChannel0.getReader();
      socketChannel0.getOutputStream();
      socketChannel0.isOpen();
      socketChannel0.close();
      socketChannel0.close();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SocketChannel socketChannel0 = new SocketChannel("!NnTt'8f=E*uh3;", (TransportListener) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-93);
      socketChannel0.sendContent(byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("ty1N^IC),", socketStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      SocketChannel.UTFReader socketChannel_UTFReader0 = socketChannel0.new UTFReader(bufferedInputStream0);
      socketChannel_UTFReader0.close();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("r#/r.:evgv[", socketStream0);
      socketStream0.nextInitializer();
      InputStream inputStream0 = socketChannel0.inputStream;
      int int0 = 127;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0, int0);
      socketChannel0.inputStream = inputStream0;
      socketChannel0.inputStream = (InputStream) bufferedInputStream0;
      socketChannel0.getInputStream();
      socketChannel0.getInputStream();
      SocketChannel.UTFReader socketChannel_UTFReader0 = socketChannel0.getReader();
      char[] charArray0 = new char[1];
      char char0 = 'o';
      charArray0[0] = char0;
      try { 
        socketChannel_UTFReader0.read(charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unsupported method
         //
         verifyException("it.yup.transport.SocketChannel$UTFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("", socketStream0);
      socketChannel0.connectionUrl = "1.2.840.113549.1.9.7";
      socketChannel0.sendContent((byte[]) null);
      socketChannel0.open();
      BasicXmlStream.STREAM_AUTHENTICATED = "MGZFL8$H.lSGZ";
      BasicXmlStream.STREAM_ACCOUNT_REGISTERED = "c0z6KLqfQT";
      BasicXmlStream.STREAM_INITIALIZED = "G";
      socketChannel0.close();
      SocketChannel.UTFReader socketChannel_UTFReader0 = socketChannel0.getReader();
      BasicXmlStream.REGISTRATION_FAILED = "";
      socketChannel0.close();
      socketChannel0.pollAlive();
      socketChannel0.getInputStream();
      socketChannel0.getReader();
      // Undeclared exception!
      try { 
        socketChannel_UTFReader0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.transport.SocketChannel$UTFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("", socketStream0);
      socketChannel0.getInputStream();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SocketChannel socketChannel0 = new SocketChannel("NGDj^6mj](Kv", (TransportListener) null);
      socketChannel0.exiting = true;
      socketChannel0.close();
      socketChannel0.getInputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)18;
      socketChannel0.sendContent(byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("LLPIchY_lq@^B", socketStream0);
      SocketChannel.UTFReader socketChannel_UTFReader0 = socketChannel0.getReader();
      // Undeclared exception!
      try { 
        socketChannel_UTFReader0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.transport.SocketChannel$UTFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("Connecting to ", socketStream0);
      socketChannel0.close();
      Vector<InputStream> vector0 = new Vector<InputStream>();
      socketChannel0.packets = vector0;
      BaseChannel.Sender baseChannel_Sender0 = socketChannel0.new Sender(socketChannel0);
      socketChannel0.sender = baseChannel_Sender0;
      byte[] byteArray0 = new byte[0];
      socketChannel0.sendContent(byteArray0);
      socketChannel0.sendContent(byteArray0);
      SocketChannel.UTFReader socketChannel_UTFReader0 = socketChannel0.getReader();
      socketChannel_UTFReader0.ready();
      baseChannel_Sender0.exiting = true;
      try { 
        socketChannel_UTFReader0.read((char[]) null, 2616, 255);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unsupported method
         //
         verifyException("it.yup.transport.SocketChannel$UTFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "_C";
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel((String) null, socketStream0);
      StreamConnection streamConnection0 = socketChannel0.connection;
      socketChannel0.connection = null;
      socketChannel0.transportType = "_VbO%V$=j-MW";
      BasicXmlStream.STREAM_ERROR = "";
      socketStream0.connectionLost(socketChannel0);
      SocketChannel socketChannel1 = new SocketChannel(string0, socketStream0);
      socketChannel1.close();
      SocketChannel.UTFReader socketChannel_UTFReader0 = socketChannel1.getReader();
      socketChannel1.connectionUrl = socketStream0.UNMATCHED_STANZA;
      socketChannel1.listener = (TransportListener) socketStream0;
      StreamConnection streamConnection1 = socketChannel0.connection;
      socketChannel1.connection = streamConnection1;
      socketChannel1.open();
      // Undeclared exception!
      try { 
        socketChannel_UTFReader0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.transport.SocketChannel$UTFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      socketStream0.run();
      SocketChannel socketChannel0 = new SocketChannel("fLD0a", socketStream0);
      socketChannel0.KEEP_ALIVE = 0L;
      SocketChannel.UTFReader socketChannel_UTFReader0 = socketChannel0.getReader();
      // Undeclared exception!
      try { 
        socketChannel_UTFReader0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.transport.SocketChannel$UTFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      BasicXmlStream.STREAM_TERMINATED = "/";
      BasicXmlStream.COMPRESSION_INITIALIZED = "";
      BasicXmlStream.COMPRESSION_INITIALIZED = "";
      SocketChannel socketChannel0 = new SocketChannel("/", socketStream0);
      socketChannel0.isOpen();
      socketChannel0.getReader();
      socketChannel0.packets = socketStream0.eventListeners;
      BasicXmlStream.STREAM_CONNECTED = "1.2.840.113549.1.9.7";
      SocketChannel.UTFReader socketChannel_UTFReader0 = socketChannel0.getReader();
      socketChannel0.close();
      socketChannel0.isOpen();
      boolean boolean0 = false;
      try { 
        socketChannel_UTFReader0.mark((-1979));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("", socketStream0);
      socketChannel0.getOutputStream();
      socketChannel0.open();
      FileInputStream fileInputStream0 = null;
      try {
        fileInputStream0 = new FileInputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      AccountRegistration accountRegistration0 = new AccountRegistration();
      socketStream0.removeInitializer(accountRegistration0);
      SocketChannel socketChannel0 = new SocketChannel("", socketStream0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel((String) null, socketStream0);
      socketChannel0.isOpen();
      socketChannel0.close();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      socketChannel0.sendContent(byteArray0);
      SocketChannel.UTFReader socketChannel_UTFReader0 = socketChannel0.getReader();
      char[] charArray0 = new char[4];
      charArray0[0] = 'T';
      charArray0[1] = '8';
      charArray0[2] = '>';
      charArray0[3] = 'T';
      try { 
        socketChannel_UTFReader0.read(charArray0, (int) (byte)0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unsupported method
         //
         verifyException("it.yup.transport.SocketChannel$UTFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("OID.", socketStream0);
      socketChannel0.getOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SocketChannel.UTFReader socketChannel_UTFReader0 = socketChannel0.new UTFReader(pipedInputStream0);
      try { 
        socketChannel_UTFReader0.read((char[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unsupported method
         //
         verifyException("it.yup.transport.SocketChannel$UTFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel((String) null, socketStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "LUT`!RYo-~1^JnrnaWc";
      objectArray0[2] = (Object) socketStream0;
      objectArray0[3] = (Object) "LUT`!RYo-~1^JnrnaWc";
      String[][] stringArray0 = new String[9][6];
      String[] stringArray1 = new String[7];
      stringArray1[0] = null;
      stringArray1[1] = "LUT`!RYo-~1^JnrnaWc";
      stringArray1[2] = "";
      stringArray1[3] = "+^1q~";
      stringArray1[4] = null;
      stringArray1[5] = "";
      stringArray1[6] = "|)R'L6]aj!9p$O-9";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[2];
      stringArray2[0] = "|)R'L6]aj!9p$O-9";
      stringArray2[1] = null;
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[9];
      stringArray3[0] = null;
      stringArray3[1] = "tgBtU0t]P 9/FC h@";
      stringArray3[2] = "+^1q~";
      stringArray3[3] = "";
      stringArray3[4] = "LUT`!RYo-~1^JnrnaWc";
      stringArray3[5] = "]AHrd.:wq+";
      stringArray3[6] = "LUT`!RYo-~1^JnrnaWc";
      stringArray3[7] = null;
      stringArray3[8] = null;
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[1];
      stringArray4[0] = "tgBtU0t]P 9/FC h@";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[1];
      stringArray5[0] = null;
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[1];
      stringArray6[0] = "1.2.840.113549.1.9.7";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[4];
      stringArray7[0] = "/";
      stringArray7[1] = "|)R'L6]aj!9p$O-9";
      stringArray7[2] = "+^1q~";
      stringArray7[3] = "|)R'L6]aj!9p$O-9";
      stringArray0[6] = stringArray7;
      String[] stringArray8 = new String[7];
      stringArray8[0] = "|)R'L6]aj!9p$O-9";
      stringArray8[1] = "|)R'L6]aj!9p$O-9";
      stringArray8[2] = "";
      stringArray8[3] = null;
      stringArray8[4] = "|)R'L6]aj!9p$O-9";
      stringArray8[5] = "";
      stringArray8[6] = "tgBtU0t]P 9/FC h@";
      stringArray0[7] = stringArray8;
      String[] stringArray9 = new String[5];
      stringArray9[0] = "DIRECT_SOCKET";
      stringArray9[1] = null;
      stringArray9[2] = null;
      stringArray9[3] = null;
      stringArray9[4] = "";
      stringArray0[8] = stringArray9;
      Element element0 = new Element("", "LUT`!RYo-~1^JnrnaWc", objectArray0, stringArray0);
      // Undeclared exception!
      try { 
        socketStream0.send(element0, 579);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("71vv=7i!pZ&IT? ", socketStream0);
      socketChannel0.open();
      socketChannel0.pollAlive();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("i!GUe", socketStream0);
      socketChannel0.exiting = false;
      socketChannel0.open();
      socketChannel0.close();
      socketChannel0.getOutputStream();
      Timer timer0 = new Timer(false);
      Utils.tasks = timer0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-109);
      socketChannel0.sendContent(byteArray0);
      SocketChannel.UTFReader socketChannel_UTFReader0 = socketChannel0.getReader();
      try { 
        socketChannel_UTFReader0.read((char[]) null, (int) (byte) (-109), 931);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unsupported method
         //
         verifyException("it.yup.transport.SocketChannel$UTFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel((String) null, socketStream0);
      socketChannel0.getOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-20);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SocketChannel.UTFReader socketChannel_UTFReader0 = socketChannel0.new UTFReader(byteArrayInputStream0);
      int int0 = socketChannel_UTFReader0.read();
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(38, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("", socketStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)117;
      socketChannel0.sendContent(byteArray0);
      socketChannel0.getReader();
      boolean boolean0 = socketChannel0.pollAlive();
      assertEquals(300000L, socketChannel0.KEEP_ALIVE);
      assertTrue(boolean0);
  }
}
