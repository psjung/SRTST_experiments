/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 01 01:18:37 KST 2018
 */

package it.yup.ui;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.util.Vector;

import javax.microedition.lcdui.Image;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;
import static org.evosuite.runtime.EvoAssertions.*;
@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class UIUtils_ESTest1 extends UIUtils_ESTest_scaffolding1 {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = UIUtils.colorize(131072, 898);
      assertEquals(149551601, int0);
      
      UIHLayout uIHLayout0 = new UIHLayout(149551601);
      assertNotNull(uIHLayout0);
      assertTrue(uIHLayout0.isGroup());
      assertEquals(0, uIHLayout0.getLayoutHeight());
      assertEquals((-1), uIHLayout0.getGradientColor());
      assertEquals((-1), uIHLayout0.getGradientSelectedColor());
      assertEquals(8947848, uIHLayout0.getSelectedColor());
      assertEquals((-1), uIHLayout0.getFg_color());
      assertEquals((-1), uIHLayout0.getBg_color());
      assertEquals((-1), uIHLayout0.getWidth());
      assertEquals(0, uIHLayout0.getType());
      assertFalse(uIHLayout0.isSelected());
      assertEquals(0, uIHLayout0.getLayoutWidth());
      
      boolean boolean0 = uIHLayout0.contains((UIItem) null);
      assertTrue(boolean0);
      assertTrue(uIHLayout0.isGroup());
      assertEquals(0, uIHLayout0.getLayoutHeight());
      assertEquals((-1), uIHLayout0.getGradientColor());
      assertEquals((-1), uIHLayout0.getGradientSelectedColor());
      assertEquals(8947848, uIHLayout0.getSelectedColor());
      assertEquals((-1), uIHLayout0.getFg_color());
      assertEquals((-1), uIHLayout0.getBg_color());
      assertEquals((-1), uIHLayout0.getWidth());
      assertEquals(0, uIHLayout0.getType());
      assertFalse(uIHLayout0.isSelected());
      assertEquals(0, uIHLayout0.getLayoutWidth());
      
      // Undeclared exception!
      UIUtils.easyCenterLayout(uIHLayout0, 261);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UITextPanel uITextPanel0 = new UITextPanel();
      assertNotNull(uITextPanel0);
      assertEquals((-1), uITextPanel0.getGradientSelectedColor());
      assertFalse(uITextPanel0.isEnableEmoticons());
      assertTrue(uITextPanel0.isDirty());
      assertEquals(8947848, uITextPanel0.getSelectedColor());
      assertEquals(0, uITextPanel0.getType());
      assertEquals((-1), uITextPanel0.getBg_color());
      assertEquals((-1), uITextPanel0.getFg_color());
      assertFalse(uITextPanel0.isNeedScrollbar());
      assertFalse(uITextPanel0.isSelected());
      assertEquals(0, uITextPanel0.getLayoutHeight());
      assertFalse(uITextPanel0.isModal());
      assertEquals((-1), uITextPanel0.getGradientColor());
      assertFalse(uITextPanel0.isListMode());
      assertEquals((-1), uITextPanel0.getSelectedIndex());
      assertEquals("", uITextPanel0.getText());
      assertEquals(0, uITextPanel0.getFirstVisible());
      assertTrue(uITextPanel0.isFocusable());
      assertEquals((-1), uITextPanel0.getMaxHeight());
      assertEquals((-1), uITextPanel0.getWidth());
      assertEquals(0, uITextPanel0.getLayoutWidth());
      
      UITextPanel uITextPanel1 = (UITextPanel)uITextPanel0.getSelectedItem();
      assertSame(uITextPanel0, uITextPanel1);
      assertSame(uITextPanel1, uITextPanel0);
      assertNotNull(uITextPanel1);
      assertEquals((-1), uITextPanel0.getGradientSelectedColor());
      assertFalse(uITextPanel0.isEnableEmoticons());
      assertTrue(uITextPanel0.isDirty());
      assertEquals(8947848, uITextPanel0.getSelectedColor());
      assertEquals(0, uITextPanel0.getType());
      assertEquals((-1), uITextPanel0.getBg_color());
      assertEquals((-1), uITextPanel0.getFg_color());
      assertFalse(uITextPanel0.isNeedScrollbar());
      assertFalse(uITextPanel0.isSelected());
      assertEquals(0, uITextPanel0.getLayoutHeight());
      assertFalse(uITextPanel0.isModal());
      assertEquals((-1), uITextPanel0.getGradientColor());
      assertFalse(uITextPanel0.isListMode());
      assertEquals((-1), uITextPanel0.getSelectedIndex());
      assertEquals("", uITextPanel0.getText());
      assertEquals(0, uITextPanel0.getFirstVisible());
      assertTrue(uITextPanel0.isFocusable());
      assertEquals((-1), uITextPanel0.getMaxHeight());
      assertEquals((-1), uITextPanel0.getWidth());
      assertEquals(0, uITextPanel0.getLayoutWidth());
      assertEquals((-1), uITextPanel1.getGradientSelectedColor());
      assertEquals(0, uITextPanel1.getType());
      assertFalse(uITextPanel1.isEnableEmoticons());
      assertTrue(uITextPanel1.isFocusable());
      assertFalse(uITextPanel1.isModal());
      assertEquals((-1), uITextPanel1.getMaxHeight());
      assertEquals("", uITextPanel1.getText());
      assertEquals(0, uITextPanel1.getLayoutWidth());
      assertEquals(0, uITextPanel1.getFirstVisible());
      assertEquals(8947848, uITextPanel1.getSelectedColor());
      assertFalse(uITextPanel1.isNeedScrollbar());
      assertFalse(uITextPanel1.isSelected());
      assertEquals((-1), uITextPanel1.getWidth());
      assertEquals((-1), uITextPanel1.getBg_color());
      assertEquals((-1), uITextPanel1.getGradientColor());
      assertEquals(0, uITextPanel1.getLayoutHeight());
      assertEquals((-1), uITextPanel1.getFg_color());
      assertFalse(uITextPanel1.isListMode());
      assertEquals((-1), uITextPanel1.getSelectedIndex());
      assertTrue(uITextPanel1.isDirty());
      
      int int0 = 2168;
      UIHLayout uIHLayout0 = UIUtils.easyCenterLayout(uITextPanel1, 56);
      assertSame(uITextPanel0, uITextPanel1);
      assertSame(uITextPanel1, uITextPanel0);
      assertNotNull(uIHLayout0);
      assertEquals((-1), uITextPanel0.getGradientSelectedColor());
      assertFalse(uITextPanel0.isEnableEmoticons());
      assertTrue(uITextPanel0.isDirty());
      assertEquals(8947848, uITextPanel0.getSelectedColor());
      assertEquals(0, uITextPanel0.getType());
      assertEquals((-1), uITextPanel0.getBg_color());
      assertEquals((-1), uITextPanel0.getFg_color());
      assertFalse(uITextPanel0.isNeedScrollbar());
      assertFalse(uITextPanel0.isSelected());
      assertEquals(0, uITextPanel0.getLayoutHeight());
      assertFalse(uITextPanel0.isModal());
      assertEquals((-1), uITextPanel0.getGradientColor());
      assertFalse(uITextPanel0.isListMode());
      assertEquals(56, uITextPanel0.getLayoutWidth());
      assertEquals((-1), uITextPanel0.getSelectedIndex());
      assertEquals("", uITextPanel0.getText());
      assertEquals(0, uITextPanel0.getFirstVisible());
      assertTrue(uITextPanel0.isFocusable());
      assertEquals((-1), uITextPanel0.getMaxHeight());
      assertEquals((-1), uITextPanel0.getWidth());
      assertEquals((-1), uITextPanel1.getGradientSelectedColor());
      assertEquals(0, uITextPanel1.getType());
      assertFalse(uITextPanel1.isEnableEmoticons());
      assertTrue(uITextPanel1.isFocusable());
      assertFalse(uITextPanel1.isModal());
      assertEquals((-1), uITextPanel1.getMaxHeight());
      assertEquals("", uITextPanel1.getText());
      assertEquals(0, uITextPanel1.getFirstVisible());
      assertEquals(8947848, uITextPanel1.getSelectedColor());
      assertFalse(uITextPanel1.isNeedScrollbar());
      assertFalse(uITextPanel1.isSelected());
      assertEquals((-1), uITextPanel1.getWidth());
      assertEquals((-1), uITextPanel1.getBg_color());
      assertEquals((-1), uITextPanel1.getGradientColor());
      assertEquals(56, uITextPanel1.getLayoutWidth());
      assertEquals(0, uITextPanel1.getLayoutHeight());
      assertEquals((-1), uITextPanel1.getFg_color());
      assertFalse(uITextPanel1.isListMode());
      assertEquals((-1), uITextPanel1.getSelectedIndex());
      assertTrue(uITextPanel1.isDirty());
      assertEquals((-1), uIHLayout0.getWidth());
      assertEquals(0, uIHLayout0.getLayoutWidth());
      assertEquals((-1), uIHLayout0.getBg_color());
      assertEquals((-1), uIHLayout0.getFg_color());
      assertEquals(0, uIHLayout0.getType());
      assertTrue(uIHLayout0.isFocusable());
      assertFalse(uIHLayout0.isSelected());
      assertEquals((-1), uIHLayout0.getGradientSelectedColor());
      assertEquals(0, uIHLayout0.getLayoutHeight());
      assertEquals(8947848, uIHLayout0.getSelectedColor());
      assertEquals((-1), uIHLayout0.getGradientColor());
      assertFalse(uIHLayout0.isGroup());
      
      UIUtils uIUtils0 = new UIUtils();
      assertNotNull(uIUtils0);
      
      UIItem[] uIItemArray0 = new UIItem[5];
      uIItemArray0[0] = (UIItem) uITextPanel1;
      uIItemArray0[1] = (UIItem) uIHLayout0;
      uIItemArray0[2] = (UIItem) uITextPanel1;
      uIItemArray0[3] = (UIItem) uITextPanel0;
      uIItemArray0[4] = (UIItem) uITextPanel0;
      uIHLayout0.layoutItems = uIItemArray0;
      assertEquals((-1), uITextPanel0.getGradientSelectedColor());
      assertFalse(uITextPanel0.isEnableEmoticons());
      assertTrue(uITextPanel0.isDirty());
      assertEquals(8947848, uITextPanel0.getSelectedColor());
      assertEquals(0, uITextPanel0.getType());
      assertEquals((-1), uITextPanel0.getBg_color());
      assertEquals((-1), uITextPanel0.getFg_color());
      assertFalse(uITextPanel0.isNeedScrollbar());
      assertFalse(uITextPanel0.isSelected());
      assertEquals(0, uITextPanel0.getLayoutHeight());
      assertFalse(uITextPanel0.isModal());
      assertEquals((-1), uITextPanel0.getGradientColor());
      assertFalse(uITextPanel0.isListMode());
      assertEquals(56, uITextPanel0.getLayoutWidth());
      assertEquals((-1), uITextPanel0.getSelectedIndex());
      assertEquals("", uITextPanel0.getText());
      assertEquals(0, uITextPanel0.getFirstVisible());
      assertTrue(uITextPanel0.isFocusable());
      assertEquals((-1), uITextPanel0.getMaxHeight());
      assertEquals((-1), uITextPanel0.getWidth());
      assertEquals((-1), uITextPanel1.getGradientSelectedColor());
      assertEquals(0, uITextPanel1.getType());
      assertFalse(uITextPanel1.isEnableEmoticons());
      assertTrue(uITextPanel1.isFocusable());
      assertFalse(uITextPanel1.isModal());
      assertEquals((-1), uITextPanel1.getMaxHeight());
      assertEquals("", uITextPanel1.getText());
      assertEquals(0, uITextPanel1.getFirstVisible());
      assertEquals(8947848, uITextPanel1.getSelectedColor());
      assertFalse(uITextPanel1.isNeedScrollbar());
      assertFalse(uITextPanel1.isSelected());
      assertEquals((-1), uITextPanel1.getWidth());
      assertEquals((-1), uITextPanel1.getBg_color());
      assertEquals((-1), uITextPanel1.getGradientColor());
      assertEquals(56, uITextPanel1.getLayoutWidth());
      assertEquals(0, uITextPanel1.getLayoutHeight());
      assertEquals((-1), uITextPanel1.getFg_color());
      assertFalse(uITextPanel1.isListMode());
      assertEquals((-1), uITextPanel1.getSelectedIndex());
      assertTrue(uITextPanel1.isDirty());
      assertEquals((-1), uIHLayout0.getWidth());
      assertEquals(0, uIHLayout0.getLayoutWidth());
      assertEquals((-1), uIHLayout0.getBg_color());
      assertEquals((-1), uIHLayout0.getFg_color());
      assertEquals(0, uIHLayout0.getType());
      assertTrue(uIHLayout0.isFocusable());
      assertFalse(uIHLayout0.isSelected());
      assertEquals((-1), uIHLayout0.getGradientSelectedColor());
      assertEquals(0, uIHLayout0.getLayoutHeight());
      assertEquals(8947848, uIHLayout0.getSelectedColor());
      assertEquals((-1), uIHLayout0.getGradientColor());
      assertFalse(uIHLayout0.isGroup());
      
      int int1 = 1367;
      uIHLayout0.setType(1367);
      assertSame(uITextPanel0, uITextPanel1);
      assertSame(uITextPanel1, uITextPanel0);
      assertEquals((-1), uITextPanel0.getGradientSelectedColor());
      assertFalse(uITextPanel0.isEnableEmoticons());
      assertTrue(uITextPanel0.isDirty());
      assertEquals(8947848, uITextPanel0.getSelectedColor());
      assertEquals(0, uITextPanel0.getType());
      assertEquals((-1), uITextPanel0.getBg_color());
      assertEquals((-1), uITextPanel0.getFg_color());
      assertFalse(uITextPanel0.isNeedScrollbar());
      assertFalse(uITextPanel0.isSelected());
      assertEquals(0, uITextPanel0.getLayoutHeight());
      assertFalse(uITextPanel0.isModal());
      assertEquals((-1), uITextPanel0.getGradientColor());
      assertFalse(uITextPanel0.isListMode());
      assertEquals(56, uITextPanel0.getLayoutWidth());
      assertEquals((-1), uITextPanel0.getSelectedIndex());
      assertEquals("", uITextPanel0.getText());
      assertEquals(0, uITextPanel0.getFirstVisible());
      assertTrue(uITextPanel0.isFocusable());
      assertEquals((-1), uITextPanel0.getMaxHeight());
      assertEquals((-1), uITextPanel0.getWidth());
      assertEquals((-1), uITextPanel1.getGradientSelectedColor());
      assertEquals(0, uITextPanel1.getType());
      assertFalse(uITextPanel1.isEnableEmoticons());
      assertTrue(uITextPanel1.isFocusable());
      assertFalse(uITextPanel1.isModal());
      assertEquals((-1), uITextPanel1.getMaxHeight());
      assertEquals("", uITextPanel1.getText());
      assertEquals(0, uITextPanel1.getFirstVisible());
      assertEquals(8947848, uITextPanel1.getSelectedColor());
      assertFalse(uITextPanel1.isNeedScrollbar());
      assertFalse(uITextPanel1.isSelected());
      assertEquals((-1), uITextPanel1.getWidth());
      assertEquals((-1), uITextPanel1.getBg_color());
      assertEquals((-1), uITextPanel1.getGradientColor());
      assertEquals(56, uITextPanel1.getLayoutWidth());
      assertEquals(0, uITextPanel1.getLayoutHeight());
      assertEquals((-1), uITextPanel1.getFg_color());
      assertFalse(uITextPanel1.isListMode());
      assertEquals((-1), uITextPanel1.getSelectedIndex());
      assertTrue(uITextPanel1.isDirty());
      assertEquals(1367, uIHLayout0.getType());
      assertEquals((-1), uIHLayout0.getWidth());
      assertEquals(0, uIHLayout0.getLayoutWidth());
      assertEquals((-1), uIHLayout0.getBg_color());
      assertEquals((-1), uIHLayout0.getFg_color());
      assertTrue(uIHLayout0.isFocusable());
      assertFalse(uIHLayout0.isSelected());
      assertEquals((-1), uIHLayout0.getGradientSelectedColor());
      assertEquals(0, uIHLayout0.getLayoutHeight());
      assertEquals(8947848, uIHLayout0.getSelectedColor());
      assertEquals((-1), uIHLayout0.getGradientColor());
      assertFalse(uIHLayout0.isGroup());
      
      // Undeclared exception!
      UIUtils.easyMenu("", 56, 2168, 56, (UIItem) uIHLayout0, "Gr;--jF:b*m-hRCqaib", "P");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 400;
      intArray0[1] = 1752;
      intArray0[2] = (-2102);
      intArray0[3] = 16711680;
      intArray0[4] = 481;
      intArray0[5] = 0;
      intArray0[6] = 1138;
      intArray0[7] = (-734);
      intArray0[8] = 720;
      // Undeclared exception!
      try { 
        UIUtils.rescalaArray((int[]) null, intArray0, 1138, (-2026), 16711680, 203, (-5180), 16711680, (-2026));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.ui.UIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = (-2390);
      int int1 = 0;
      UIAccordion uIAccordion0 = new UIAccordion();
      assertNotNull(uIAccordion0);
      assertEquals(2, uIAccordion0.getSepSize());
      assertTrue(uIAccordion0.isDirty());
      assertEquals(0, uIAccordion0.getLayoutWidth());
      assertFalse(uIAccordion0.isSelected());
      assertEquals(12303291, uIAccordion0.getSepColor());
      assertEquals(8947848, uIAccordion0.getSelectedColor());
      assertEquals((-1), uIAccordion0.getWidth());
      assertFalse(uIAccordion0.isOneOpen());
      assertFalse(uIAccordion0.isListMode());
      assertEquals((-1), uIAccordion0.getSelectedIndex());
      assertEquals((-1), uIAccordion0.getMaxHeight());
      assertEquals(0, uIAccordion0.getLayoutHeight());
      assertTrue(uIAccordion0.isFocusable());
      assertEquals(0, uIAccordion0.getType());
      assertFalse(uIAccordion0.isModal());
      assertEquals((-1), uIAccordion0.getGradientSelectedColor());
      assertEquals(0, uIAccordion0.getFirstVisible());
      assertEquals((-1), uIAccordion0.getLabelGradientColor());
      assertEquals((-1), uIAccordion0.getGradientColor());
      assertEquals((-1), uIAccordion0.getBg_color());
      assertEquals((-1), uIAccordion0.getFg_color());
      assertEquals(11184810, uIAccordion0.getLabelColor());
      
      UIItem uIItem0 = uIAccordion0.getOpenedLabel();
      assertNull(uIItem0);
      assertEquals(2, uIAccordion0.getSepSize());
      assertTrue(uIAccordion0.isDirty());
      assertEquals(0, uIAccordion0.getLayoutWidth());
      assertFalse(uIAccordion0.isSelected());
      assertEquals(12303291, uIAccordion0.getSepColor());
      assertEquals(8947848, uIAccordion0.getSelectedColor());
      assertEquals((-1), uIAccordion0.getWidth());
      assertFalse(uIAccordion0.isOneOpen());
      assertFalse(uIAccordion0.isListMode());
      assertEquals((-1), uIAccordion0.getSelectedIndex());
      assertEquals((-1), uIAccordion0.getMaxHeight());
      assertEquals(0, uIAccordion0.getLayoutHeight());
      assertTrue(uIAccordion0.isFocusable());
      assertEquals(0, uIAccordion0.getType());
      assertFalse(uIAccordion0.isModal());
      assertEquals((-1), uIAccordion0.getGradientSelectedColor());
      assertEquals(0, uIAccordion0.getFirstVisible());
      assertEquals((-1), uIAccordion0.getLabelGradientColor());
      assertEquals((-1), uIAccordion0.getGradientColor());
      assertEquals((-1), uIAccordion0.getBg_color());
      assertEquals((-1), uIAccordion0.getFg_color());
      assertEquals(11184810, uIAccordion0.getLabelColor());
      
      UIMenu uIMenu0 = UIUtils.easyMenu("", (-2390), (-2390), 0, (UIItem) null);
      assertNotNull(uIMenu0);
      assertEquals((-1), uIMenu0.getGradientSelectedColor());
      assertEquals(0, uIMenu0.getLayoutWidth());
      assertFalse(uIMenu0.isOpenedState());
      assertEquals(0, uIMenu0.getLayoutHeight());
      assertEquals((-1), uIMenu0.getWidth());
      assertEquals((-1), uIMenu0.getSelectedIndex());
      assertTrue(uIMenu0.isFocusable());
      assertEquals((-1), uIMenu0.getGradientColor());
      assertEquals(8947848, uIMenu0.getSelectedColor());
      assertEquals(0, uIMenu0.getAbsoluteX());
      assertFalse(uIMenu0.isSelected());
      assertEquals(0, uIMenu0.getAbsoluteY());
      assertTrue(uIMenu0.isAutoClose());
      assertEquals((-1), uIMenu0.getBg_color());
      assertEquals(0, uIMenu0.getType());
      assertEquals((-1), uIMenu0.getFg_color());
      
      uIAccordion0.setLayoutHeight((-2390));
      assertEquals(2, uIAccordion0.getSepSize());
      assertTrue(uIAccordion0.isDirty());
      assertEquals(0, uIAccordion0.getLayoutWidth());
      assertFalse(uIAccordion0.isSelected());
      assertEquals(12303291, uIAccordion0.getSepColor());
      assertEquals((-2390), uIAccordion0.getLayoutHeight());
      assertEquals(8947848, uIAccordion0.getSelectedColor());
      assertEquals((-1), uIAccordion0.getWidth());
      assertFalse(uIAccordion0.isOneOpen());
      assertFalse(uIAccordion0.isListMode());
      assertEquals((-1), uIAccordion0.getSelectedIndex());
      assertEquals((-1), uIAccordion0.getMaxHeight());
      assertTrue(uIAccordion0.isFocusable());
      assertEquals(0, uIAccordion0.getType());
      assertFalse(uIAccordion0.isModal());
      assertEquals((-1), uIAccordion0.getGradientSelectedColor());
      assertEquals(0, uIAccordion0.getFirstVisible());
      assertEquals((-1), uIAccordion0.getLabelGradientColor());
      assertEquals((-1), uIAccordion0.getGradientColor());
      assertEquals((-1), uIAccordion0.getBg_color());
      assertEquals((-1), uIAccordion0.getFg_color());
      assertEquals(11184810, uIAccordion0.getLabelColor());
      
      int int2 = (-3461);
      uIAccordion0.setSelectedIndex((-3461));
      assertEquals(2, uIAccordion0.getSepSize());
      assertTrue(uIAccordion0.isDirty());
      assertEquals(0, uIAccordion0.getLayoutWidth());
      assertFalse(uIAccordion0.isSelected());
      assertEquals(12303291, uIAccordion0.getSepColor());
      assertEquals((-2390), uIAccordion0.getLayoutHeight());
      assertEquals(8947848, uIAccordion0.getSelectedColor());
      assertEquals((-1), uIAccordion0.getWidth());
      assertFalse(uIAccordion0.isOneOpen());
      assertFalse(uIAccordion0.isListMode());
      assertEquals((-1), uIAccordion0.getSelectedIndex());
      assertEquals((-1), uIAccordion0.getMaxHeight());
      assertTrue(uIAccordion0.isFocusable());
      assertEquals(0, uIAccordion0.getType());
      assertFalse(uIAccordion0.isModal());
      assertEquals((-1), uIAccordion0.getGradientSelectedColor());
      assertEquals(0, uIAccordion0.getFirstVisible());
      assertEquals((-1), uIAccordion0.getLabelGradientColor());
      assertEquals((-1), uIAccordion0.getGradientColor());
      assertEquals((-1), uIAccordion0.getBg_color());
      assertEquals((-1), uIAccordion0.getFg_color());
      assertEquals(11184810, uIAccordion0.getLabelColor());
      
      int int3 = (-1955);
      UIHLayout uIHLayout0 = UIUtils.easyCenterLayout(uIAccordion0, (-1955));
      assertNotNull(uIHLayout0);
      assertEquals(2, uIAccordion0.getSepSize());
      assertTrue(uIAccordion0.isDirty());
      assertFalse(uIAccordion0.isSelected());
      assertEquals(12303291, uIAccordion0.getSepColor());
      assertEquals((-2390), uIAccordion0.getLayoutHeight());
      assertEquals((-1955), uIAccordion0.getLayoutWidth());
      assertEquals(8947848, uIAccordion0.getSelectedColor());
      assertEquals((-1), uIAccordion0.getWidth());
      assertFalse(uIAccordion0.isOneOpen());
      assertFalse(uIAccordion0.isListMode());
      assertEquals((-1), uIAccordion0.getSelectedIndex());
      assertEquals((-1), uIAccordion0.getMaxHeight());
      assertTrue(uIAccordion0.isFocusable());
      assertEquals(0, uIAccordion0.getType());
      assertFalse(uIAccordion0.isModal());
      assertEquals((-1), uIAccordion0.getGradientSelectedColor());
      assertEquals(0, uIAccordion0.getFirstVisible());
      assertEquals((-1), uIAccordion0.getLabelGradientColor());
      assertEquals((-1), uIAccordion0.getGradientColor());
      assertEquals((-1), uIAccordion0.getBg_color());
      assertEquals((-1), uIAccordion0.getFg_color());
      assertEquals(11184810, uIAccordion0.getLabelColor());
      assertEquals(0, uIHLayout0.getLayoutWidth());
      assertEquals((-1), uIHLayout0.getFg_color());
      assertFalse(uIHLayout0.isSelected());
      assertEquals(8947848, uIHLayout0.getSelectedColor());
      assertEquals(0, uIHLayout0.getType());
      assertEquals((-1), uIHLayout0.getGradientSelectedColor());
      assertEquals((-1), uIHLayout0.getGradientColor());
      assertFalse(uIHLayout0.isGroup());
      assertEquals((-1), uIHLayout0.getWidth());
      assertEquals((-1), uIHLayout0.getBg_color());
      assertTrue(uIHLayout0.isFocusable());
      assertEquals(0, uIHLayout0.getLayoutHeight());
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertFalse(vector0.contains(int2));
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      // Undeclared exception!
      try { 
        uIAccordion0.removeItem(uIHLayout0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.ui.UIAccordion$AccordionItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = UIUtils.colorize(0, 0);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      UIUtils.rescalaArray(intArray0, intArray0, 0, 0, 0, 0, 0, (-271), 298);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      String string0 = "";
      int int1 = 120;
      UIScreen uIScreen0 = null;
      try {
        uIScreen0 = new UIScreen();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.ui.UIScreen", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = UIUtils.colorize(112, 0);
      assertEquals(112, int0);
      
      // Undeclared exception!
      UIUtils.rescalaArray((int[]) null, (int[]) null, (-2281), (-140), (-2281), 13369344, 13369344, 0, (-140));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 12;
      // Undeclared exception!
      try { 
        UIUtils.easyCenterLayout((UIItem) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.ui.UIHLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UILabel uILabel0 = new UILabel((String) null);
      assertNotNull(uILabel0);
      assertFalse(uILabel0.isFocusable());
      assertFalse(uILabel0.isSelected());
      assertEquals(0, uILabel0.getLayoutWidth());
      assertEquals(8947848, uILabel0.getSelectedColor());
      assertEquals(0, uILabel0.getLayoutHeight());
      assertEquals((-1), uILabel0.getWidth());
      assertFalse(uILabel0.isWrappable());
      assertEquals(0, uILabel0.getType());
      assertNull(uILabel0.getText());
      assertFalse(uILabel0.isFlip());
      assertEquals((-1), uILabel0.getGradientSelectedColor());
      assertEquals((-1), uILabel0.getGradientColor());
      assertEquals((-1), uILabel0.getFg_color());
      assertEquals((-1), uILabel0.getBg_color());
      assertEquals(20, uILabel0.getAnchorPoint());
      assertEquals((-1), uILabel0.getImgAnchorPoint());
      
      UIMenu uIMenu0 = UIUtils.easyMenu((String) null, (-61), (-61), (-1), (UIItem) uILabel0);
      assertNotNull(uIMenu0);
      assertEquals(0, uILabel0.getLayoutWidth());
      assertEquals(11322072, uILabel0.getBg_color());
      assertEquals(8947848, uILabel0.getSelectedColor());
      assertTrue(uILabel0.isSelected());
      assertEquals(0, uILabel0.getLayoutHeight());
      assertEquals((-1), uILabel0.getWidth());
      assertFalse(uILabel0.isWrappable());
      assertEquals(0, uILabel0.getType());
      assertNull(uILabel0.getText());
      assertFalse(uILabel0.isFlip());
      assertEquals((-1), uILabel0.getGradientSelectedColor());
      assertEquals((-1), uILabel0.getGradientColor());
      assertEquals((-1), uILabel0.getFg_color());
      assertEquals(20, uILabel0.getAnchorPoint());
      assertTrue(uILabel0.isFocusable());
      assertEquals((-1), uILabel0.getImgAnchorPoint());
      assertEquals((-1), uIMenu0.getFg_color());
      assertTrue(uIMenu0.isAutoClose());
      assertFalse(uIMenu0.isSelected());
      assertEquals(0, uIMenu0.getType());
      assertEquals((-1), uIMenu0.getGradientColor());
      assertEquals((-1), uIMenu0.getBg_color());
      assertTrue(uIMenu0.isFocusable());
      assertEquals(0, uIMenu0.getLayoutWidth());
      assertEquals(0, uIMenu0.getAbsoluteX());
      assertEquals(0, uIMenu0.getAbsoluteY());
      assertEquals(8947848, uIMenu0.getSelectedColor());
      assertEquals(0, uIMenu0.getLayoutHeight());
      assertEquals((-1), uIMenu0.getGradientSelectedColor());
      assertEquals((-1), uIMenu0.getWidth());
      assertEquals(0, uIMenu0.getSelectedIndex());
      assertFalse(uIMenu0.isOpenedState());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = UIUtils.medColor((-857), (-443));
      assertEquals(16776566, int0);
      
      UISeparator uISeparator0 = new UISeparator((-2555), (-1114));
      assertNotNull(uISeparator0);
      assertEquals((-1), uISeparator0.getGradientColor());
      assertEquals(0, uISeparator0.getLayoutHeight());
      assertEquals((-1), uISeparator0.getGradientSelectedColor());
      assertEquals(8947848, uISeparator0.getSelectedColor());
      assertFalse(uISeparator0.isFocusable());
      assertEquals((-1114), uISeparator0.getFg_color());
      assertEquals(0, uISeparator0.getLayoutWidth());
      assertEquals(0, uISeparator0.getType());
      assertFalse(uISeparator0.isSelected());
      assertEquals((-1), uISeparator0.getWidth());
      assertEquals((-1), uISeparator0.getBg_color());
      
      UIHLayout uIHLayout0 = UIUtils.easyCenterLayout(uISeparator0, (-857));
      assertNotNull(uIHLayout0);
      assertEquals((-857), uISeparator0.getLayoutWidth());
      assertEquals((-1), uISeparator0.getGradientColor());
      assertEquals(0, uISeparator0.getLayoutHeight());
      assertEquals((-1), uISeparator0.getGradientSelectedColor());
      assertEquals(8947848, uISeparator0.getSelectedColor());
      assertFalse(uISeparator0.isFocusable());
      assertEquals((-1114), uISeparator0.getFg_color());
      assertEquals(0, uISeparator0.getType());
      assertFalse(uISeparator0.isSelected());
      assertEquals((-1), uISeparator0.getWidth());
      assertEquals((-1), uISeparator0.getBg_color());
      assertEquals((-1), uIHLayout0.getGradientColor());
      assertFalse(uIHLayout0.isGroup());
      assertFalse(uIHLayout0.isFocusable());
      assertEquals((-1), uIHLayout0.getGradientSelectedColor());
      assertFalse(uIHLayout0.isSelected());
      assertEquals(8947848, uIHLayout0.getSelectedColor());
      assertEquals(0, uIHLayout0.getType());
      assertEquals((-1), uIHLayout0.getWidth());
      assertEquals(0, uIHLayout0.getLayoutWidth());
      assertEquals(0, uIHLayout0.getLayoutHeight());
      assertEquals((-1), uIHLayout0.getBg_color());
      assertEquals((-1), uIHLayout0.getFg_color());
      
      UIMenu uIMenu0 = UIUtils.easyMenu("", (-2555), 16776566, (-2555), (UIItem) uIHLayout0, "`#U;@|FEw'OS>", "`#U;@|FEw'OS>");
      assertNotNull(uIMenu0);
      assertEquals((-857), uISeparator0.getLayoutWidth());
      assertEquals((-1), uISeparator0.getGradientColor());
      assertEquals(0, uISeparator0.getLayoutHeight());
      assertEquals((-1), uISeparator0.getGradientSelectedColor());
      assertEquals(8947848, uISeparator0.getSelectedColor());
      assertFalse(uISeparator0.isFocusable());
      assertEquals((-1114), uISeparator0.getFg_color());
      assertEquals(11322072, uISeparator0.getBg_color());
      assertEquals(0, uISeparator0.getType());
      assertFalse(uISeparator0.isSelected());
      assertEquals((-1), uISeparator0.getWidth());
      assertEquals((-1), uIHLayout0.getGradientColor());
      assertFalse(uIHLayout0.isGroup());
      assertTrue(uIHLayout0.isSelected());
      assertEquals((-1), uIHLayout0.getGradientSelectedColor());
      assertEquals(8947848, uIHLayout0.getSelectedColor());
      assertEquals(0, uIHLayout0.getType());
      assertEquals(11322072, uIHLayout0.getBg_color());
      assertEquals((-1), uIHLayout0.getWidth());
      assertEquals(0, uIHLayout0.getLayoutWidth());
      assertEquals(0, uIHLayout0.getLayoutHeight());
      assertTrue(uIHLayout0.isFocusable());
      assertEquals((-1), uIHLayout0.getFg_color());
      assertTrue(uIMenu0.isAutoClose());
      assertEquals(16776566, uIMenu0.getAbsoluteY());
      assertEquals((-1), uIMenu0.getWidth());
      assertEquals((-1), uIMenu0.getFg_color());
      assertEquals(0, uIMenu0.getLayoutHeight());
      assertTrue(uIMenu0.isFocusable());
      assertEquals(0, uIMenu0.getType());
      assertEquals(8947848, uIMenu0.getSelectedColor());
      assertEquals((-1), uIMenu0.getGradientSelectedColor());
      assertFalse(uIMenu0.isOpenedState());
      assertEquals((-1), uIMenu0.getBg_color());
      assertEquals(0, uIMenu0.getAbsoluteX());
      assertFalse(uIMenu0.isSelected());
      assertEquals(0, uIMenu0.getLayoutWidth());
      assertEquals(0, uIMenu0.getSelectedIndex());
      assertEquals((-1), uIMenu0.getGradientColor());
      
      UIMenu uIMenu1 = UIUtils.easyMenu("", 16776566, (-857), (-1114), (UIItem) uIMenu0);
      assertNotSame(uIMenu0, uIMenu1);
      assertNotSame(uIMenu1, uIMenu0);
      assertNotNull(uIMenu1);
      assertFalse(uIMenu1.equals((Object)uIMenu0));
      assertEquals((-857), uISeparator0.getLayoutWidth());
      assertEquals((-1), uISeparator0.getGradientColor());
      assertEquals(0, uISeparator0.getLayoutHeight());
      assertEquals((-1), uISeparator0.getGradientSelectedColor());
      assertEquals(8947848, uISeparator0.getSelectedColor());
      assertFalse(uISeparator0.isFocusable());
      assertEquals((-1114), uISeparator0.getFg_color());
      assertEquals(11322072, uISeparator0.getBg_color());
      assertEquals(0, uISeparator0.getType());
      assertFalse(uISeparator0.isSelected());
      assertEquals((-1), uISeparator0.getWidth());
      assertEquals((-1), uIHLayout0.getGradientColor());
      assertFalse(uIHLayout0.isGroup());
      assertTrue(uIHLayout0.isSelected());
      assertEquals((-1), uIHLayout0.getGradientSelectedColor());
      assertEquals(8947848, uIHLayout0.getSelectedColor());
      assertEquals(0, uIHLayout0.getType());
      assertEquals(11322072, uIHLayout0.getBg_color());
      assertEquals((-1), uIHLayout0.getWidth());
      assertEquals(0, uIHLayout0.getLayoutWidth());
      assertEquals(0, uIHLayout0.getLayoutHeight());
      assertTrue(uIHLayout0.isFocusable());
      assertEquals((-1), uIHLayout0.getFg_color());
      assertTrue(uIMenu0.isAutoClose());
      assertEquals(16776566, uIMenu0.getAbsoluteY());
      assertEquals((-1), uIMenu0.getWidth());
      assertEquals((-1), uIMenu0.getFg_color());
      assertEquals(0, uIMenu0.getLayoutHeight());
      assertTrue(uIMenu0.isFocusable());
      assertEquals(0, uIMenu0.getType());
      assertEquals(8947848, uIMenu0.getSelectedColor());
      assertEquals((-1), uIMenu0.getGradientSelectedColor());
      assertFalse(uIMenu0.isOpenedState());
      assertEquals(0, uIMenu0.getAbsoluteX());
      assertTrue(uIMenu0.isSelected());
      assertEquals(0, uIMenu0.getLayoutWidth());
      assertEquals(0, uIMenu0.getSelectedIndex());
      assertEquals((-1), uIMenu0.getGradientColor());
      assertEquals(11322072, uIMenu0.getBg_color());
      assertFalse(uIMenu1.isOpenedState());
      assertEquals(0, uIMenu1.getLayoutWidth());
      assertTrue(uIMenu1.isFocusable());
      assertEquals((-1), uIMenu1.getWidth());
      assertEquals((-1), uIMenu1.getGradientColor());
      assertTrue(uIMenu1.isAutoClose());
      assertEquals((-1), uIMenu1.getBg_color());
      assertEquals(16776566, uIMenu1.getAbsoluteX());
      assertEquals((-1), uIMenu1.getFg_color());
      assertEquals(0, uIMenu1.getLayoutHeight());
      assertEquals(0, uIMenu1.getSelectedIndex());
      assertFalse(uIMenu1.isSelected());
      assertEquals(0, uIMenu1.getAbsoluteY());
      assertEquals(0, uIMenu1.getType());
      assertEquals((-1), uIMenu1.getGradientSelectedColor());
      assertEquals(8947848, uIMenu1.getSelectedColor());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UIMenu uIMenu0 = UIUtils.easyMenu("", 0, 0, 0, (UIItem) null, "*r", "*r");
      assertNotNull(uIMenu0);
      assertEquals(0, uIMenu0.getType());
      assertFalse(uIMenu0.isOpenedState());
      assertEquals((-1), uIMenu0.getGradientSelectedColor());
      assertEquals(0, uIMenu0.getLayoutWidth());
      assertEquals((-1), uIMenu0.getWidth());
      assertEquals(0, uIMenu0.getLayoutHeight());
      assertEquals((-1), uIMenu0.getSelectedIndex());
      assertFalse(uIMenu0.isSelected());
      assertEquals(8947848, uIMenu0.getSelectedColor());
      assertEquals((-1), uIMenu0.getBg_color());
      assertEquals(0, uIMenu0.getAbsoluteX());
      assertEquals(0, uIMenu0.getAbsoluteY());
      assertEquals((-1), uIMenu0.getGradientColor());
      assertTrue(uIMenu0.isAutoClose());
      assertEquals((-1), uIMenu0.getFg_color());
      assertTrue(uIMenu0.isFocusable());
      
      // Undeclared exception!
      try { 
        UIUtils.easyMenu("Czh)uh,bpB", 0, 0, 0, (UIItem) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.ui.UIMenu", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = UIUtils.medColor(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UIMenu uIMenu0 = UIUtils.easyMenu((String) null, 1126, 0, 1227, (UIItem) null);
      assertNotNull(uIMenu0);
      assertEquals((-1), uIMenu0.getSelectedIndex());
      assertEquals(1126, uIMenu0.getAbsoluteX());
      assertEquals((-1), uIMenu0.getGradientColor());
      assertTrue(uIMenu0.isFocusable());
      assertEquals(1227, uIMenu0.getWidth());
      assertTrue(uIMenu0.isAutoClose());
      assertEquals(0, uIMenu0.getType());
      assertEquals(8947848, uIMenu0.getSelectedColor());
      assertEquals((-1), uIMenu0.getBg_color());
      assertEquals((-1), uIMenu0.getFg_color());
      assertEquals(0, uIMenu0.getAbsoluteY());
      assertFalse(uIMenu0.isSelected());
      assertEquals((-1), uIMenu0.getGradientSelectedColor());
      assertFalse(uIMenu0.isOpenedState());
      assertEquals(0, uIMenu0.getLayoutHeight());
      assertEquals(0, uIMenu0.getLayoutWidth());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UILabel uILabel0 = new UILabel("");
      assertNotNull(uILabel0);
      assertFalse(uILabel0.isFocusable());
      assertEquals(20, uILabel0.getAnchorPoint());
      assertEquals(0, uILabel0.getType());
      assertEquals((-1), uILabel0.getBg_color());
      assertEquals((-1), uILabel0.getGradientSelectedColor());
      assertEquals(8947848, uILabel0.getSelectedColor());
      assertFalse(uILabel0.isSelected());
      assertEquals("", uILabel0.getText());
      assertFalse(uILabel0.isWrappable());
      assertEquals((-1), uILabel0.getImgAnchorPoint());
      assertEquals((-1), uILabel0.getFg_color());
      assertEquals((-1), uILabel0.getGradientColor());
      assertFalse(uILabel0.isFlip());
      assertEquals(0, uILabel0.getLayoutHeight());
      assertEquals(0, uILabel0.getLayoutWidth());
      assertEquals((-1), uILabel0.getWidth());
      
      UIMenu uIMenu0 = UIUtils.easyMenu((String) null, 2821, 2821, 0, (UIItem) uILabel0);
      assertNotNull(uIMenu0);
      assertEquals(20, uILabel0.getAnchorPoint());
      assertEquals(0, uILabel0.getType());
      assertEquals((-1), uILabel0.getGradientSelectedColor());
      assertEquals(8947848, uILabel0.getSelectedColor());
      assertEquals("", uILabel0.getText());
      assertFalse(uILabel0.isWrappable());
      assertTrue(uILabel0.isFocusable());
      assertEquals((-1), uILabel0.getImgAnchorPoint());
      assertEquals((-1), uILabel0.getFg_color());
      assertEquals((-1), uILabel0.getGradientColor());
      assertTrue(uILabel0.isSelected());
      assertFalse(uILabel0.isFlip());
      assertEquals(0, uILabel0.getLayoutHeight());
      assertEquals(11322072, uILabel0.getBg_color());
      assertEquals(0, uILabel0.getLayoutWidth());
      assertEquals((-1), uILabel0.getWidth());
      assertEquals(2821, uIMenu0.getAbsoluteX());
      assertEquals(2821, uIMenu0.getAbsoluteY());
      assertFalse(uIMenu0.isOpenedState());
      assertFalse(uIMenu0.isSelected());
      assertEquals(0, uIMenu0.getType());
      assertEquals(8947848, uIMenu0.getSelectedColor());
      assertEquals((-1), uIMenu0.getBg_color());
      assertEquals((-1), uIMenu0.getGradientSelectedColor());
      assertTrue(uIMenu0.isAutoClose());
      assertTrue(uIMenu0.isFocusable());
      assertEquals((-1), uIMenu0.getFg_color());
      assertEquals((-1), uIMenu0.getGradientColor());
      assertEquals(0, uIMenu0.getLayoutHeight());
      assertEquals(0, uIMenu0.getSelectedIndex());
      assertEquals((-1), uIMenu0.getWidth());
      assertEquals(0, uIMenu0.getLayoutWidth());
      
      UIHLayout uIHLayout0 = UIUtils.easyCenterLayout(uIMenu0, (-2183));
      assertNotNull(uIHLayout0);
      assertEquals(20, uILabel0.getAnchorPoint());
      assertEquals(0, uILabel0.getType());
      assertEquals((-1), uILabel0.getGradientSelectedColor());
      assertEquals(8947848, uILabel0.getSelectedColor());
      assertEquals("", uILabel0.getText());
      assertFalse(uILabel0.isWrappable());
      assertTrue(uILabel0.isFocusable());
      assertEquals((-1), uILabel0.getImgAnchorPoint());
      assertEquals((-1), uILabel0.getFg_color());
      assertEquals((-1), uILabel0.getGradientColor());
      assertTrue(uILabel0.isSelected());
      assertFalse(uILabel0.isFlip());
      assertEquals(0, uILabel0.getLayoutHeight());
      assertEquals(11322072, uILabel0.getBg_color());
      assertEquals(0, uILabel0.getLayoutWidth());
      assertEquals((-1), uILabel0.getWidth());
      assertEquals(2821, uIMenu0.getAbsoluteX());
      assertEquals(2821, uIMenu0.getAbsoluteY());
      assertFalse(uIMenu0.isOpenedState());
      assertFalse(uIMenu0.isSelected());
      assertEquals(0, uIMenu0.getType());
      assertEquals(8947848, uIMenu0.getSelectedColor());
      assertEquals((-1), uIMenu0.getBg_color());
      assertEquals((-1), uIMenu0.getGradientSelectedColor());
      assertTrue(uIMenu0.isAutoClose());
      assertTrue(uIMenu0.isFocusable());
      assertEquals((-1), uIMenu0.getFg_color());
      assertEquals((-2183), uIMenu0.getLayoutWidth());
      assertEquals((-1), uIMenu0.getGradientColor());
      assertEquals(0, uIMenu0.getLayoutHeight());
      assertEquals(0, uIMenu0.getSelectedIndex());
      assertEquals((-1), uIMenu0.getWidth());
      assertEquals((-1), uIHLayout0.getFg_color());
      assertEquals((-1), uIHLayout0.getBg_color());
      assertTrue(uIHLayout0.isFocusable());
      assertFalse(uIHLayout0.isSelected());
      assertEquals(0, uIHLayout0.getLayoutWidth());
      assertEquals(0, uIHLayout0.getType());
      assertEquals((-1), uIHLayout0.getWidth());
      assertFalse(uIHLayout0.isGroup());
      assertEquals((-1), uIHLayout0.getGradientSelectedColor());
      assertEquals(0, uIHLayout0.getLayoutHeight());
      assertEquals(8947848, uIHLayout0.getSelectedColor());
      assertEquals((-1), uIHLayout0.getGradientColor());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-15);
      intArray0[1] = 7;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        UIUtils.rescalaArray(intArray0, intArray0, 0, 0, 244, 98, 0, 98, 1816);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 177968
         //
         verifyException("it.yup.ui.UIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = (-1183);
      intArray0[1] = (-1183);
      intArray0[2] = 2417;
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        UIUtils.rescalaArray(intArray0, intArray0, (-1183), 2417, 2417, 2417, 109, 0, 109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 109
         //
         verifyException("it.yup.ui.UIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = UIUtils.colorize((-487), (-487));
      assertEquals((-64869984), int0);
      
      int int1 = UIUtils.medColor((-64869984), 0);
      assertEquals(1119312, int1);
      assertFalse(int1 == int0);
      
      int int2 = UIUtils.colorize(279, 3010);
      assertEquals(504953182, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = UIUtils.medColor(0, 873);
      assertEquals(308, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1848);
      UIUtils.rescalaArray(intArray0, intArray0, (-2226), 512, 0, 308, 7829367, 0, 512);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1848)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[0];
      UIUtils.rescalaArray(intArray0, intArray0, 111, (-298), (-298), (-298), 111, (-298), 111);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      UIButton uIButton0 = new UIButton("K-.)@06A>PD(ky-f");
      assertNotNull(uIButton0);
      assertFalse(uIButton0.isWrappable());
      assertEquals((-1), uIButton0.getGradientSelectedColor());
      assertFalse(uIButton0.isFlip());
      assertTrue(uIButton0.isFocusable());
      assertEquals((-1), uIButton0.getGradientColor());
      assertEquals((-1), uIButton0.getBg_color());
      assertEquals(0, uIButton0.getType());
      assertEquals((-1), uIButton0.getImgAnchorPoint());
      assertEquals((-1), uIButton0.getFg_color());
      assertEquals(0, uIButton0.getLayoutWidth());
      assertFalse(uIButton0.isSelected());
      assertEquals(2, uIButton0.getHPadding());
      assertEquals(8947848, uIButton0.getSelectedColor());
      assertEquals("K-.)@06A>PD(ky-f", uIButton0.getText());
      assertEquals(0, uIButton0.getLayoutHeight());
      assertFalse(uIButton0.isPressed());
      assertEquals((-1), uIButton0.getWidth());
      assertEquals(1, uIButton0.getAnchorPoint());
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        UIUtils.rescalaArray(intArray0, intArray1, 10, 10, 111, 111, (-298), (-3417), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("it.yup.ui.UIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = UIUtils.colorize(112, 0);
      assertEquals(112, int0);
      
      // Undeclared exception!
      try { 
        UIUtils.rescalaArray((int[]) null, (int[]) null, 112, (-140), 112, 13369344, 13369344, 0, (-140));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.ui.UIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = UIUtils.colorize(3490, 3490);
      assertEquals(585373519, int0);
      
      Image image0 = Image.createImage(585373519, 3490);
      assertNull(image0);
      
      UILabel uILabel0 = new UILabel((Image) null);
      assertNotNull(uILabel0);
      assertEquals(0, uILabel0.getLayoutWidth());
      assertEquals(0, uILabel0.getLayoutHeight());
      assertEquals((-1), uILabel0.getBg_color());
      assertEquals(0, uILabel0.getType());
      assertFalse(uILabel0.isSelected());
      assertEquals((-1), uILabel0.getGradientSelectedColor());
      assertEquals(8947848, uILabel0.getSelectedColor());
      assertEquals((-1), uILabel0.getFg_color());
      assertEquals((-1), uILabel0.getImgAnchorPoint());
      assertEquals(20, uILabel0.getAnchorPoint());
      assertEquals((-1), uILabel0.getWidth());
      assertEquals((-1), uILabel0.getGradientColor());
      assertFalse(uILabel0.isWrappable());
      assertEquals("", uILabel0.getText());
      assertFalse(uILabel0.isFocusable());
      assertFalse(uILabel0.isFlip());
      
      UIHLayout uIHLayout0 = UIUtils.easyCenterLayout(uILabel0, 571);
      assertNotNull(uIHLayout0);
      assertEquals(0, uILabel0.getLayoutHeight());
      assertEquals((-1), uILabel0.getBg_color());
      assertEquals(0, uILabel0.getType());
      assertFalse(uILabel0.isSelected());
      assertEquals((-1), uILabel0.getGradientSelectedColor());
      assertEquals(8947848, uILabel0.getSelectedColor());
      assertEquals((-1), uILabel0.getFg_color());
      assertEquals(1, uILabel0.getAnchorPoint());
      assertEquals((-1), uILabel0.getImgAnchorPoint());
      assertEquals((-1), uILabel0.getWidth());
      assertEquals((-1), uILabel0.getGradientColor());
      assertFalse(uILabel0.isWrappable());
      assertEquals("", uILabel0.getText());
      assertFalse(uILabel0.isFocusable());
      assertEquals(571, uILabel0.getLayoutWidth());
      assertFalse(uILabel0.isFlip());
      assertEquals((-1), uIHLayout0.getBg_color());
      assertEquals(0, uIHLayout0.getLayoutHeight());
      assertEquals(8947848, uIHLayout0.getSelectedColor());
      assertEquals(0, uIHLayout0.getType());
      assertEquals((-1), uIHLayout0.getWidth());
      assertFalse(uIHLayout0.isGroup());
      assertEquals((-1), uIHLayout0.getGradientSelectedColor());
      assertFalse(uIHLayout0.isSelected());
      assertEquals(0, uIHLayout0.getLayoutWidth());
      assertEquals((-1), uIHLayout0.getFg_color());
      assertEquals((-1), uIHLayout0.getGradientColor());
      assertFalse(uIHLayout0.isFocusable());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        UIUtils.easyCenterLayout((UIItem) null, (-2444));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.ui.UIHLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = UIUtils.medColor((-2564), 483);
      assertEquals(8354799, int0);
      
      int int1 = UIUtils.colorize(483, 0);
      assertEquals(483, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = UIUtils.colorize((-1493), (-3473));
      assertEquals((-565835178), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = null;
      int int0 = (-1611);
      int int1 = 108;
      int int2 = 1093;
      int int3 = 0;
      UICheckbox uICheckbox0 = new UICheckbox("");
      assertNotNull(uICheckbox0);
      assertEquals((-1), uICheckbox0.getWidth());
      assertTrue(uICheckbox0.isFocusable());
      assertEquals(0, uICheckbox0.getLayoutHeight());
      assertEquals(8947848, uICheckbox0.getSelectedColor());
      assertEquals((-1), uICheckbox0.getGradientColor());
      assertEquals((-1), uICheckbox0.getFg_color());
      assertEquals((-1), uICheckbox0.getImgAnchorPoint());
      assertEquals(0, uICheckbox0.getType());
      assertEquals((-1), uICheckbox0.getBg_color());
      assertFalse(uICheckbox0.isSelected());
      assertEquals(20, uICheckbox0.getAnchorPoint());
      assertFalse(uICheckbox0.isFlip());
      assertEquals((-1), uICheckbox0.getGradientSelectedColor());
      assertFalse(uICheckbox0.isWrappable());
      assertEquals("", uICheckbox0.getText());
      assertFalse(uICheckbox0.isChecked());
      assertEquals(0, uICheckbox0.getLayoutWidth());
      
      UIMenu uIMenu0 = UIUtils.easyMenu("", 3800, 3800, 0, (UIItem) uICheckbox0);
      assertNotNull(uIMenu0);
      assertEquals((-1), uICheckbox0.getWidth());
      assertTrue(uICheckbox0.isFocusable());
      assertEquals(0, uICheckbox0.getLayoutHeight());
      assertEquals(8947848, uICheckbox0.getSelectedColor());
      assertTrue(uICheckbox0.isSelected());
      assertEquals((-1), uICheckbox0.getGradientColor());
      assertEquals((-1), uICheckbox0.getFg_color());
      assertEquals((-1), uICheckbox0.getImgAnchorPoint());
      assertEquals(0, uICheckbox0.getType());
      assertEquals(20, uICheckbox0.getAnchorPoint());
      assertFalse(uICheckbox0.isFlip());
      assertEquals((-1), uICheckbox0.getGradientSelectedColor());
      assertFalse(uICheckbox0.isWrappable());
      assertEquals("", uICheckbox0.getText());
      assertFalse(uICheckbox0.isChecked());
      assertEquals(11322072, uICheckbox0.getBg_color());
      assertEquals(0, uICheckbox0.getLayoutWidth());
      assertEquals(0, uIMenu0.getType());
      assertEquals(0, uIMenu0.getLayoutWidth());
      assertEquals((-1), uIMenu0.getGradientColor());
      assertTrue(uIMenu0.isFocusable());
      assertEquals(3800, uIMenu0.getAbsoluteX());
      assertEquals(3800, uIMenu0.getAbsoluteY());
      assertEquals((-1), uIMenu0.getWidth());
      assertEquals(0, uIMenu0.getLayoutHeight());
      assertTrue(uIMenu0.isAutoClose());
      assertEquals(8947848, uIMenu0.getSelectedColor());
      assertEquals((-1), uIMenu0.getBg_color());
      assertEquals((-1), uIMenu0.getFg_color());
      assertFalse(uIMenu0.isSelected());
      assertEquals(0, uIMenu0.getSelectedIndex());
      assertEquals((-1), uIMenu0.getGradientSelectedColor());
      assertFalse(uIMenu0.isOpenedState());
      
      uICheckbox0.text = "SELECT";
      assertEquals((-1), uICheckbox0.getWidth());
      assertTrue(uICheckbox0.isFocusable());
      assertEquals(0, uICheckbox0.getLayoutHeight());
      assertEquals(8947848, uICheckbox0.getSelectedColor());
      assertTrue(uICheckbox0.isSelected());
      assertEquals((-1), uICheckbox0.getGradientColor());
      assertEquals((-1), uICheckbox0.getFg_color());
      assertEquals((-1), uICheckbox0.getImgAnchorPoint());
      assertEquals(0, uICheckbox0.getType());
      assertEquals(20, uICheckbox0.getAnchorPoint());
      assertFalse(uICheckbox0.isFlip());
      assertEquals((-1), uICheckbox0.getGradientSelectedColor());
      assertFalse(uICheckbox0.isWrappable());
      assertFalse(uICheckbox0.isChecked());
      assertEquals("SELECT", uICheckbox0.getText());
      assertEquals(11322072, uICheckbox0.getBg_color());
      assertEquals(0, uICheckbox0.getLayoutWidth());
      
      uIMenu0.setWidth(0);
      assertEquals((-1), uICheckbox0.getWidth());
      assertTrue(uICheckbox0.isFocusable());
      assertEquals(0, uICheckbox0.getLayoutHeight());
      assertEquals(8947848, uICheckbox0.getSelectedColor());
      assertTrue(uICheckbox0.isSelected());
      assertEquals((-1), uICheckbox0.getGradientColor());
      assertEquals((-1), uICheckbox0.getFg_color());
      assertEquals((-1), uICheckbox0.getImgAnchorPoint());
      assertEquals(0, uICheckbox0.getType());
      assertEquals(20, uICheckbox0.getAnchorPoint());
      assertFalse(uICheckbox0.isFlip());
      assertEquals((-1), uICheckbox0.getGradientSelectedColor());
      assertFalse(uICheckbox0.isWrappable());
      assertFalse(uICheckbox0.isChecked());
      assertEquals("SELECT", uICheckbox0.getText());
      assertEquals(11322072, uICheckbox0.getBg_color());
      assertEquals(0, uICheckbox0.getLayoutWidth());
      assertEquals(0, uIMenu0.getType());
      assertEquals(0, uIMenu0.getLayoutWidth());
      assertEquals((-1), uIMenu0.getGradientColor());
      assertTrue(uIMenu0.isFocusable());
      assertEquals(3800, uIMenu0.getAbsoluteX());
      assertEquals(3800, uIMenu0.getAbsoluteY());
      assertEquals(0, uIMenu0.getWidth());
      assertEquals(0, uIMenu0.getLayoutHeight());
      assertTrue(uIMenu0.isAutoClose());
      assertEquals(8947848, uIMenu0.getSelectedColor());
      assertEquals((-1), uIMenu0.getBg_color());
      assertEquals((-1), uIMenu0.getFg_color());
      assertFalse(uIMenu0.isSelected());
      assertEquals(0, uIMenu0.getSelectedIndex());
      assertEquals((-1), uIMenu0.getGradientSelectedColor());
      assertFalse(uIMenu0.isOpenedState());
      
      uIMenu0.setLayoutWidth((-1611));
      assertEquals((-1), uICheckbox0.getWidth());
      assertTrue(uICheckbox0.isFocusable());
      assertEquals(0, uICheckbox0.getLayoutHeight());
      assertEquals(8947848, uICheckbox0.getSelectedColor());
      assertTrue(uICheckbox0.isSelected());
      assertEquals((-1), uICheckbox0.getGradientColor());
      assertEquals((-1), uICheckbox0.getFg_color());
      assertEquals((-1), uICheckbox0.getImgAnchorPoint());
      assertEquals(0, uICheckbox0.getType());
      assertEquals(20, uICheckbox0.getAnchorPoint());
      assertFalse(uICheckbox0.isFlip());
      assertEquals((-1), uICheckbox0.getGradientSelectedColor());
      assertFalse(uICheckbox0.isWrappable());
      assertFalse(uICheckbox0.isChecked());
      assertEquals("SELECT", uICheckbox0.getText());
      assertEquals(11322072, uICheckbox0.getBg_color());
      assertEquals(0, uICheckbox0.getLayoutWidth());
      assertEquals(0, uIMenu0.getType());
      assertEquals((-1611), uIMenu0.getLayoutWidth());
      assertEquals((-1), uIMenu0.getGradientColor());
      assertTrue(uIMenu0.isFocusable());
      assertEquals(3800, uIMenu0.getAbsoluteX());
      assertEquals(3800, uIMenu0.getAbsoluteY());
      assertEquals(0, uIMenu0.getWidth());
      assertEquals(0, uIMenu0.getLayoutHeight());
      assertTrue(uIMenu0.isAutoClose());
      assertEquals(8947848, uIMenu0.getSelectedColor());
      assertEquals((-1), uIMenu0.getBg_color());
      assertEquals((-1), uIMenu0.getFg_color());
      assertFalse(uIMenu0.isSelected());
      assertEquals(0, uIMenu0.getSelectedIndex());
      assertEquals((-1), uIMenu0.getGradientSelectedColor());
      assertFalse(uIMenu0.isOpenedState());
      
      // Undeclared exception!
      try { 
        UIUtils.easyMenu("node", 1093, (-1611), 108, (UIItem) uIMenu0, (String) null, "CANCEL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.ui.UIMenu", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 0;
      Image.createImage(498, 498);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((-1521));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 498);
      Image.createImage((InputStream) pushbackInputStream0);
      Image.createImage((Image) null);
      UILabel uILabel0 = new UILabel((Image) null);
      uILabel0.getSubmenu();
      UIUtils.easyMenu("", 498, 498, 0, (UIItem) null, "17X#t]`A{4L_y&2-|", "'QyC\"6**YA#!(");
      UIUtils uIUtils0 = new UIUtils();
      // Undeclared exception!
      try { 
        UIUtils.easyMenu("Z d", 498, 498, 158, (UIItem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.ui.UIMenu", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        UIUtils.imageResize((Image) null, 110, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.ui.UIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = UIUtils.medColor(2273, 900);
      assertEquals(1458, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UISeparator uISeparator0 = new UISeparator(486);
      UIMenu uIMenu0 = UIUtils.easyMenu("", 11, 11, 35, (UIItem) uISeparator0, "", "");
      assertEquals(35, uIMenu0.getWidth());
      assertEquals(11, uIMenu0.getAbsoluteY());
      assertEquals(11, uIMenu0.getAbsoluteX());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UIButton uIButton0 = new UIButton(":o");
      // Undeclared exception!
      try { 
        UIUtils.easyMenu("muc#roomconfig_persistentroom", 0, 0, 0, (UIItem) uIButton0, "muc#roomconfig_persistentroom", "muc#roomconfig_persistentroom");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.ui.UIMenu", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UICheckbox uICheckbox0 = new UICheckbox("");
      UIMenu uIMenu0 = UIUtils.easyMenu("", 848, 848, 848, (UIItem) uICheckbox0);
      assertEquals(848, uIMenu0.getAbsoluteX());
      assertEquals(848, uIMenu0.getAbsoluteY());
      assertEquals(848, uIMenu0.getWidth());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UIUtils uIUtils0 = new UIUtils();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 104;
      intArray0[1] = (-6);
      intArray0[2] = 113;
      UIUtils.rescalaArray(intArray0, intArray0, 92, 2062, (-1778), 2220, (-6), 107, 113);
      assertArrayEquals(new int[] {104, (-6), 113}, intArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        UIUtils.imageResize((Image) null, 956, 720);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.ui.UIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UIUtils.colorize((-712), 110);
      int[] intArray0 = new int[3];
      intArray0[1] = 16777234;
      intArray0[2] = (-712);
      UILabel uILabel0 = new UILabel((Image) null);
      uILabel0.bg_color = 54;
      UIUtils.easyCenterLayout(uILabel0, 14354212);
      assertEquals(14354212, uILabel0.getLayoutWidth());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UITextPanel uITextPanel0 = new UITextPanel();
      UIItem uIItem0 = uITextPanel0.getSelectedItem();
      uITextPanel0.setType(2168);
      UIHLayout uIHLayout0 = UIUtils.easyCenterLayout(uIItem0, 56);
      UIUtils uIUtils0 = new UIUtils();
      uIHLayout0.setType(1367);
      UIUtils.easyMenu("", 56, 2168, 56, (UIItem) uIHLayout0, "Gr;--jF:b*m-hRCqaib", "P");
      int[] intArray0 = new int[1];
      intArray0[0] = 1367;
      // Undeclared exception!
      try { 
        UIUtils.rescalaArray(intArray0, intArray0, 1752, 106, 2168, 1367, 0, 118, 1367);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 161306
         //
         verifyException("it.yup.ui.UIUtils", e);
      }
  }
}
