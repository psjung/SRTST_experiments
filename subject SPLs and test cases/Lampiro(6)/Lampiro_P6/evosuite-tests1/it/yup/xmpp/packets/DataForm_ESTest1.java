/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 01 02:28:19 KST 2018
 */

package it.yup.xmpp.packets;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.fail;

import java.util.Vector;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import it.yup.xml.Element;
import static org.evosuite.runtime.EvoAssertions.*;
@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class DataForm_ESTest1 extends DataForm_ESTest_scaffolding1 {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Element element0 = new Element("", "");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "type";
      stringArray0[3] = "";
      element0.setAttributes(stringArray0, stringArray0);
      DataForm dataForm0 = new DataForm(element0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Element element0 = new Element("", "");
      DataForm dataForm0 = new DataForm(element0);
      Vector<Object> vector0 = new Vector<Object>();
      vector0.setSize(1);
      dataForm0.fields = vector0;
      // Undeclared exception!
      try { 
        dataForm0.getResultElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xmpp.packets.DataForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Element element0 = new Element("", "");
      DataForm dataForm0 = new DataForm(element0);
      Vector<Integer> vector0 = new Vector<Integer>();
      dataForm0.fields = vector0;
      vector0.add((Integer) 0);
      // Undeclared exception!
      try { 
        dataForm0.getResultElement();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to it.yup.xmpp.packets.DataForm$Field
         //
         verifyException("it.yup.xmpp.packets.DataForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String[][] stringArray0 = new String[9][9];
      Element element0 = new Element("", (String) null, objectArray0, stringArray0);
      DataForm dataForm0 = null;
      try {
        dataForm0 = new DataForm(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String[][] stringArray0 = new String[6][9];
      String[] stringArray1 = new String[8];
      stringArray1[1] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[0];
      stringArray0[1] = stringArray2;
      Element element0 = new Element("", "", objectArray0, stringArray0);
      DataForm dataForm0 = null;
      try {
        dataForm0 = new DataForm(element0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("it.yup.xml.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Element element0 = new Element("", "");
      element0.addElementAndContent("", "value", "");
      element0.addElementAndContent("", "value", "");
      DataForm dataForm0 = new DataForm(element0);
      DataForm.Field dataForm_Field0 = dataForm0.new Field(element0);
      assertFalse(dataForm_Field0.required);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Element element0 = new Element("", "");
      DataForm dataForm0 = new DataForm(element0);
      element0.addElementAndContent("", "", "");
      DataForm.Field dataForm_Field0 = dataForm0.new Field(element0);
      assertFalse(dataForm_Field0.required);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Element element0 = new Element("", "");
      DataForm dataForm0 = new DataForm(element0);
      Vector<Object> vector0 = new Vector<Object>();
      DataForm.Field dataForm_Field0 = dataForm0.new Field(element0);
      vector0.add((Object) dataForm_Field0);
      dataForm0.fields = vector0;
      Element element1 = dataForm0.getResultElement();
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Element element0 = new Element("", "");
      DataForm dataForm0 = new DataForm(element0);
      dataForm0.type = "cancel";
      Element element1 = dataForm0.getResultElement();
      assertNotSame(element1, element0);
  }
}
