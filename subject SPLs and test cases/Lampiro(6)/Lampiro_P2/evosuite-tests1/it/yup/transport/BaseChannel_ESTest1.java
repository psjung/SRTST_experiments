/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 01 00:42:42 KST 2018
 */

package it.yup.transport;

import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.fail;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;

import javax.microedition.io.StreamConnection;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import it.yup.xml.Element;
import it.yup.xmlstream.BasicXmlStream;
import it.yup.xmlstream.EventQuery;
import it.yup.xmlstream.SocketStream;
import static org.evosuite.runtime.EvoAssertions.*;
@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class BaseChannel_ESTest1 extends BaseChannel_ESTest_scaffolding1 {
@BeforeClass
public static void initEvoSuiteFramework() {
String a = "aa";
}
@AfterClass
public static void exitEvoSuiteFramework() {
String a = "aa";
}

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SocketChannel socketChannel0 = new SocketChannel("7Ojrk<EX$YJK'", (TransportListener) null);
      socketChannel0.exiting = false;
      BaseChannel.Sender baseChannel_Sender0 = socketChannel0.new Sender(socketChannel0);
      baseChannel_Sender0.exiting = false;
      socketChannel0.sender = baseChannel_Sender0;
      baseChannel_Sender0.exiting = true;
      socketChannel0.transportType = null;
      baseChannel_Sender0.run();
      socketChannel0.isOpen();
      baseChannel_Sender0.exiting = true;
      baseChannel_Sender0.exiting = true;
      socketChannel0.exiting = true;
      baseChannel_Sender0.run();
      baseChannel_Sender0.run();
      socketChannel0.pollAlive();
      socketChannel0.isOpen();
      socketChannel0.getOutputStream();
      socketChannel0.close();
      socketChannel0.sender.run();
      assertSame(socketChannel0.sender, baseChannel_Sender0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SocketChannel socketChannel0 = new SocketChannel((String) null, (TransportListener) null);
      InputStream inputStream0 = null;
      File file0 = new File("]'fY&?p");
      PrintStream printStream0 = null;
      try {
        printStream0 = new PrintStream(file0, "DIRECT_SOCKET");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // DIRECT_SOCKET
         //
         verifyException("java.io.PrintStream", e);
      }
  }
}
