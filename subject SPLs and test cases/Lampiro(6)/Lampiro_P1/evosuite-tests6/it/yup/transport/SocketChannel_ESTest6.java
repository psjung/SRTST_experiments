/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 01 14:19:01 KST 2018
 */

package it.yup.transport;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.fail;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;

import org.bouncycastle.asn1.BERConstructedOctetString;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DEREnumerated;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import it.yup.xmlstream.SocketStream;
import javab.math.BigInteger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class SocketChannel_ESTest6 extends SocketChannel_ESTest_scaffolding6 {
@BeforeClass
public static void initEvoSuiteFramework() {
String a = "aa";
}
@AfterClass
public static void exitEvoSuiteFramework() {
String a = "aa";
}

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("", socketStream0);
      socketChannel0.pollAlive();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("", socketStream0);
      socketChannel0.close();
      socketChannel0.pollAlive();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("", socketStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      socketChannel0.outputStream = (OutputStream) byteArrayOutputStream0;
      socketChannel0.getOutputStream();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("", socketStream0);
      socketChannel0.getInputStream();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("", socketStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedOutputStream0.write(128);
      SocketChannel.UTFReader socketChannel_UTFReader0 = socketChannel0.new UTFReader(pipedInputStream0);
      int int0 = socketChannel_UTFReader0.read();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("", socketStream0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SocketChannel.UTFReader socketChannel_UTFReader0 = socketChannel0.new UTFReader(byteArrayInputStream0);
      try { 
        socketChannel_UTFReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid byte received on text stream: 255
         //
         verifyException("it.yup.transport.SocketChannel$UTFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("", socketStream0);
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      DEREnumerated dEREnumerated0 = new DEREnumerated(bigInteger0);
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString((DEREncodable) dEREnumerated0);
      InputStream inputStream0 = bERConstructedOctetString0.getOctetStream();
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      SocketChannel.UTFReader socketChannel_UTFReader0 = socketChannel0.new UTFReader(dataInputStream0);
      int int0 = socketChannel_UTFReader0.read();
      assertEquals(2, inputStream0.available());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("", socketStream0);
      boolean boolean0 = socketChannel0.isOpen();
      assertEquals(300000L, socketChannel0.KEEP_ALIVE);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("", socketStream0);
      socketChannel0.close();
      socketChannel0.close();
      assertEquals(300000L, socketChannel0.KEEP_ALIVE);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("", socketStream0);
      socketChannel0.getOutputStream();
      assertEquals(300000L, socketChannel0.KEEP_ALIVE);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("", socketStream0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        socketChannel0.sendContent(byteArray0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Timer already cancelled.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("", socketStream0);
      socketChannel0.open();
      assertEquals(300000L, socketChannel0.KEEP_ALIVE);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("", socketStream0);
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      DEREnumerated dEREnumerated0 = new DEREnumerated(bigInteger0);
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString((DEREncodable) dEREnumerated0);
      InputStream inputStream0 = bERConstructedOctetString0.getOctetStream();
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      SocketChannel.UTFReader socketChannel_UTFReader0 = socketChannel0.new UTFReader(dataInputStream0);
      char[] charArray0 = new char[7];
      try { 
        socketChannel_UTFReader0.read(charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unsupported method
         //
         verifyException("it.yup.transport.SocketChannel$UTFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("", socketStream0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      SocketChannel.UTFReader socketChannel_UTFReader0 = socketChannel0.new UTFReader(fileInputStream0);
      socketChannel_UTFReader0.close();
      assertEquals(300000L, socketChannel0.KEEP_ALIVE);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SocketStream socketStream0 = new SocketStream();
      SocketChannel socketChannel0 = new SocketChannel("", socketStream0);
      SocketChannel.UTFReader socketChannel_UTFReader0 = socketChannel0.getReader();
      char[] charArray0 = new char[5];
      try { 
        socketChannel_UTFReader0.read(charArray0, 0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unsupported method
         //
         verifyException("it.yup.transport.SocketChannel$UTFReader", e);
      }
  }
}
