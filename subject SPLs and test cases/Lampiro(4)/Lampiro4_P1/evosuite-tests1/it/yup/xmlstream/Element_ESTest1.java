/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 01 01:57:29 KST 2018
 */

package it.yup.xmlstream;

import static org.junit.Assert.assertEquals;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.fail;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.util.Vector;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import static org.evosuite.runtime.EvoAssertions.*;
@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class Element_ESTest1 extends Element_ESTest_scaffolding1 {
@BeforeClass
public static void initEvoSuiteFramework() {
String a = "aa";
}
@AfterClass
public static void exitEvoSuiteFramework() {
String a = "aa";
}

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      it.yup.xml.KXmlParser kXmlParser0 = new it.yup.xml.KXmlParser();
      Element element0 = Element.pullDocumentStart(kXmlParser0);
      element0.maxWait = (-1);
      try { 
        element0._parse(kXmlParser0);
        fail("Expecting exception: XmlPullParserException");
      
      } catch(XmlPullParserException e) {
         //
         // No Input specified (position:START_DOCUMENT null@0:0) 
         //
         verifyException("it.yup.xml.KXmlParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KXmlParser kXmlParser0 = new KXmlParser();
      StringReader stringReader0 = new StringReader("");
      kXmlParser0.setInput((Reader) stringReader0);
      Element element0 = Element.pullDocumentStart(kXmlParser0);
      assertEquals(0, element0.maxWait);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KXmlParser kXmlParser0 = new KXmlParser();
      Element element0 = Element.pullDocumentStart(kXmlParser0);
      element0.maxWait = 1;
      Element element1 = element0.addElement("", "");
      Element element2 = element0.getChildByName("", "");
      assertNotNull(element2);
      assertSame(element2, element1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Element element0 = new Element("", "");
      element0.setAttribute("", "");
      String string0 = element0.getAttribute("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      Element element0 = Element.load(dataInputStream0);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Element element0 = new Element();
      element0.setAttribute("", "");
      Element element1 = element0.clone();
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KXmlParser kXmlParser0 = new KXmlParser();
      Element element0 = Element.pullDocumentStart(kXmlParser0);
      // Undeclared exception!
      try { 
        element0.toXml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KXmlParser kXmlParser0 = new KXmlParser();
      StringReader stringReader0 = new StringReader("");
      kXmlParser0.setInput((Reader) stringReader0);
      // Undeclared exception!
      Element.pullElement(kXmlParser0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Element.pullElement((XmlPullParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Element.pullDocumentStart((XmlPullParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xmlstream.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      it.yup.xml.KXmlParser kXmlParser0 = new it.yup.xml.KXmlParser();
      StringReader stringReader0 = new StringReader("");
      kXmlParser0.setInput((Reader) stringReader0);
      // Undeclared exception!
      Element.parseDocument(kXmlParser0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Element.parseDocument((XmlPullParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xmlstream.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Element.load((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xmlstream.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 1);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        Element.load(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Element element0 = new Element("", "");
      Element element1 = element0.addElement("", "");
      element1.uri = null;
      // Undeclared exception!
      try { 
        element0.getChildrenByName("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xmlstream.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Element element0 = new Element();
      element0.addElement("", (String) null);
      // Undeclared exception!
      try { 
        element0.getChildByName((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xmlstream.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Element element0 = new Element();
      // Undeclared exception!
      try { 
        element0._parse((XmlPullParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xmlstream.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KXmlParser kXmlParser0 = new KXmlParser();
      Element element0 = Element.pullDocumentStart(kXmlParser0);
      // Undeclared exception!
      try { 
        element0.serialize((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("it.yup.xmlstream.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Element element0 = new Element();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      element0.name = "";
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      element0.serialize(dataOutputStream0);
      assertEquals(0L, element0.queueTime);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Element element0 = new Element();
      Element element1 = element0.addElement("", "");
      Element element2 = element0.clone();
      assertNotSame(element2, element0);
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Element element0 = new Element("", "");
      Vector<String> vector0 = new Vector<String>();
      element0.attributes = vector0;
      vector0.add("");
      // Undeclared exception!
      try { 
        element0.clone();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to [Ljava.lang.String;
         //
         verifyException("it.yup.xmlstream.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Element element0 = new Element("", "");
      Element element1 = element0.addElement("", "");
      Element element2 = new Element(element0);
      assertFalse(element2.equals((Object)element1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Element element0 = new Element((String) null, "");
      Element element1 = element0.addElement((String) null, "");
      element1.content = "";
      byte[] byteArray0 = element1.toXml();
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Element element0 = new Element("", "");
      Element element1 = element0.addElement("", "");
      byte[] byteArray0 = element0.toXml();
      assertNotSame(element0, element1);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Element element0 = new Element("", "");
      it.yup.xml.KXmlParser kXmlParser0 = new it.yup.xml.KXmlParser();
      StringReader stringReader0 = new StringReader("I");
      kXmlParser0.setInput((Reader) stringReader0);
      // Undeclared exception!
      element0._parse(kXmlParser0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Element element0 = new Element("", "");
      Element element1 = element0.addElement("S", "");
      Element[] elementArray0 = element0.getChildrenByName("", "");
      assertNotSame(element0, element1);
      assertEquals(0, elementArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Element element0 = new Element();
      Element element1 = element0.addElement("", "");
      Element[] elementArray0 = element0.getChildrenByName("", (String) null);
      assertNotSame(element0, element1);
      assertEquals(0, elementArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Element element0 = new Element("", "");
      Element element1 = element0.addElement("S", "");
      element1.children = element0.children;
      assertFalse(element1.children.isEmpty());
      
      Element element2 = element1.getChildByName("", "");
      assertNotSame(element1, element0);
      assertNull(element2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      KXmlParser kXmlParser0 = new KXmlParser();
      Element element0 = Element.pullDocumentStart(kXmlParser0);
      Element element1 = element0.addElement("", "o");
      Element element2 = element0.getChildByName("", "");
      assertNull(element2);
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Element element0 = new Element("", "");
      element0.delAttribute((String) null);
      assertEquals(0, element0.maxWait);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Element element0 = new Element();
      element0.setAttribute("", "");
      element0.delAttribute("");
      assertEquals(0L, element0.queueTime);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Element element0 = new Element();
      element0.setAttribute("", "");
      element0.setAttribute("V", (String) null);
      assertEquals(0, element0.maxWait);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Element element0 = new Element();
      element0.setAttribute("", "");
      element0.setAttribute("", (String) null);
      assertEquals(0L, element0.queueTime);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      KXmlParser kXmlParser0 = new KXmlParser();
      Element element0 = Element.pullDocumentStart(kXmlParser0);
      element0.setAttribute("", "");
      String string0 = element0.getAttribute((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      KXmlParser kXmlParser0 = new KXmlParser();
      try { 
        Element.pullElement(kXmlParser0);
        fail("Expecting exception: XmlPullParserException");
      
      } catch(XmlPullParserException e) {
         //
         // No Input specified (position:START_DOCUMENT null@0:0) 
         //
         verifyException("it.yup.xmlstream.KXmlParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = Element.createUniqueId();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Element element0 = new Element("", "");
      Element element1 = element0.addElement("", "");
      Element[] elementArray0 = element0.getChildrenByName("", "");
      assertEquals(1, elementArray0.length);
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Element element0 = new Element("", "");
      String string0 = element0.getUri("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      it.yup.xml.KXmlParser kXmlParser0 = new it.yup.xml.KXmlParser();
      try { 
        Element.parseDocument(kXmlParser0);
        fail("Expecting exception: XmlPullParserException");
      
      } catch(XmlPullParserException e) {
         //
         // No Input specified (position:START_DOCUMENT null@0:0) 
         //
         verifyException("it.yup.xml.KXmlParser", e);
      }
  }
}
